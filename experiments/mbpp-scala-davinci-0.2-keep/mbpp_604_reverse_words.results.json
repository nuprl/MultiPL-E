{
  "name": "mbpp_604_reverse_words",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversedWords = words.map(word => word.reverse)\n        reversedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphxsqq1wc.scala:11)\n\tat Problem.main(tmphxsqq1wc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(w => w.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp112o6p_j.scala:11)\n\tat Problem.main(tmp112o6p_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        var result = \"\"\n        for (i <- words.length - 1 to 0 by -1) {\n            result += words(i) + \" \"\n        }\n        result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        val result = new StringBuilder\n        for (i <- 0 until reversed.length) {\n            result.append(reversed(i))\n            if (i != reversed.length - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        val result = reversed.mkString(\" \")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        val result = reversed.mkString(\" \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn0ro50ao.scala:12)\n\tat Problem.main(tmpn0ro50ao.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(x => x.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1s043y8q.scala:11)\n\tat Problem.main(tmp1s043y8q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.map(word => word.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk0un7wq8.scala:10)\n\tat Problem.main(tmpk0un7wq8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.map(w => w.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplj3087ig.scala:10)\n\tat Problem.main(tmplj3087ig.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversedWords = words.map(_.reverse)\n        reversedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpta89czqd.scala:11)\n\tat Problem.main(tmpta89czqd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        var result = \"\"\n        for (i <- words.length - 1 to 0 by -1) {\n            result += words(i) + \" \"\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversedWords = words.map(word => word.reverse)\n        reversedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphxsqq1wc.scala:11)\n\tat Problem.main(tmphxsqq1wc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(w => w.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp112o6p_j.scala:11)\n\tat Problem.main(tmp112o6p_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(_.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptudhhya1.scala:11)\n\tat Problem.main(tmptudhhya1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        var result = \"\"\n        for (i <- 0 until words.length) {\n            result += words(words.length - 1 - i) + \" \"\n        }\n        return result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(_.reverse)\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsz48hr6g.scala:11)\n\tat Problem.main(tmpsz48hr6g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        val result = reversed.mkString(\" \")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        val result = reversed.mkString(\" \")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(w => w.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp112o6p_j.scala:11)\n\tat Problem.main(tmp112o6p_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(_.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptudhhya1.scala:11)\n\tat Problem.main(tmptudhhya1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        var words = s.split(\" \")\n        var reversed = new Array[String](words.length)\n        for (i <- 0 until words.length) {\n            reversed(i) = words(words.length - 1 - i)\n        }\n        return reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(x => x.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4g9abxgk.scala:9)\n\tat Problem.main(tmp4g9abxgk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        var result = \"\"\n        for (i <- words.length - 1 to 0 by -1) {\n            result += words(i) + \" \"\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.reverse\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversedWords = words.map(word => word.reverse)\n        reversedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphxsqq1wc.scala:11)\n\tat Problem.main(tmphxsqq1wc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(word => word.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxfbsor3.scala:11)\n\tat Problem.main(tmpuxfbsor3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(_.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptudhhya1.scala:11)\n\tat Problem.main(tmptudhhya1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        var result = \"\"\n        for (i <- 0 until words.length) {\n            if (i == words.length - 1) result += words(i)\n            else result += words(i) + \" \"\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyk7q3_cv.scala:15)\n\tat Problem.main(tmpyk7q3_cv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        words.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(_.reverse).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqq68iazy.scala:9)\n\tat Problem.main(tmpqq68iazy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n        val words = s.split(\" \")\n        val reversed = words.map(w => w.reverse)\n        reversed.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp112o6p_j.scala:11)\n\tat Problem.main(tmp112o6p_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}