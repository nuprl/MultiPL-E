{
  "name": "mbpp_602_first_repeated_char",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the first repeated character in a given string.\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstRepeatedChar((\"abcabc\")).equals(\"a\"));\n    assert(firstRepeatedChar((\"abc\")).equals(None));\n    assert(firstRepeatedChar((\"123123\")).equals(\"1\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var charMap = Map[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map += (str(i) -> 1)\n        }\n        return None",
    "        val map = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val charMap = HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c.toString) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        var result : Option[String] = None\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                result = Some(c.toString)\n                return result\n            }\n        }\n        result",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val char = str1.substring(i, i + 1)\n            if (charMap.contains(char)) {\n                return Some(char)\n            }\n            charMap(char) = 1\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charCount.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charCount(str(i)) = 1\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        if (str5 == str2) None\n        else {\n            val str6 = str2.toSet\n            val str7 = str6.mkString\n            val str8 = str7.toList\n            val str9 = str8.sorted\n            val str10 = str9.mkString\n            val str11 = str10.toList\n            val str12 = str11.distinct\n            val str13 = str12.mkString\n            val str14 = str13.toList\n            val str15 = str14.sorted\n            val str16 = str15.mkString\n            val str17 = str16.toList\n            val str18 = str17.distinct\n            val str19 = str18.mkString\n            val str20 = str19.toList\n            val str21 = str20.sorted\n            val str22 = str21.mkString\n            val str23 = str22.toList\n            val str24 = str23.distinct\n            val str25 = str24.mkString\n            val str26 = str25.toList\n            val str27 = str26.sorted\n            val str28 = str27.mkString\n            val str29 = str28.toList\n            val str30 = str29.distinct\n            val str31 = str30.mkString\n            val str32 = str31.toList\n            val str33 = str32.sorted\n            val str34 = str33.mkString\n            val str35 = str34.toList\n            val str36 = str35.distinct\n            val str37 = str36.mkString\n            val str38 = str37.toList\n            val str39 = str38.sorted\n            val str40 = str39.mkString\n            val str41 = str40.toList\n            val str42 = str41.distinct\n            val str43 = str42.mkString\n            val str44 = str43.toList\n            val str45 = str44.sorted\n            val str46 = str45.mkString\n",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map.put(c, 1)\n            }\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                map += (c.toString -> 1)\n            }\n        }\n        return None",
    "        val map = HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) return Some(c)\n            else map(c) = 1\n        }\n        None",
    "        val str2 = str1.toLowerCase()\n        val str3 = str2.toCharArray()\n        val map = Map[Char, Int]()\n        for (i <- 0 until str3.length) {\n            if (map.contains(str3(i))) {\n                return Some(str3(i).toString)\n            }\n            else {\n                map += (str3(i) -> 1)\n            }\n        }\n        return None",
    "        val charSet = Set[Char]()\n        for (c <- str1) {\n            if (charSet.contains(c)) return Some(c.toString)\n            charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (charMap.contains(c)) {\n                return Some(c)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val charMap = HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val char = str.charAt(i).toString\n            if (map.contains(char)) {\n                return Some(char)\n            }\n            else {\n                map(char) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map(str(i)) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i))) return Some(str1(i).toString)\n            else map.put(str1(i), 1)\n        }\n        None",
    "        val charSet = Set[Char]()\n        for (c <- str1) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (char <- str1) {\n            if (charMap.contains(char)) {\n                return Some(char.toString)\n            }\n            else {\n                charMap.put(char, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val char = str1.charAt(i).toString\n            if (charMap.contains(char)) {\n                return Some(char)\n            }\n            else {\n                charMap += (char -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            map.put(str(i), 1)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val map = HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) return Some(c)\n            else map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map(str(i)) = 1\n            }\n        }\n        return None",
    "        val map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.groupBy(x => x)\n        val str6 = str5.filter(x => x._2.length > 1)\n        if (str6.isEmpty) None\n        else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[String, Int]\n        for (c <- str) {\n            if (charCount.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c.toString) = 1\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map(c) = 1\n            }\n        }\n        return None",
    "        val str1Arr = str1.toCharArray\n        val str1Set = str1Arr.toSet\n        val str1SetArr = str1Set.toArray\n        val str1SetArrLen = str1SetArr.length\n        val str1Len = str1Arr.length\n        var i = 0\n        var j = 0\n        var found = false\n        while(i < str1SetArrLen && !found) {\n            j = 0\n            while(j < str1Len && !found) {\n                if(str1SetArr(i) == str1Arr(j)) {\n                    found = true\n                }\n                j += 1\n            }\n            i += 1\n        }\n        if(found) {\n            Some(str1SetArr(i - 1).toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                charMap(str(i)) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map(str(i)) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        var charMap = new HashMap[String, Int]()\n        for (char <- str1) {\n            if (charMap.contains(char.toString)) {\n                return Some(char.toString)\n            }\n            else {\n                charMap += (char.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map(c) = 1\n        }\n        return None",
    "        var str = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val map = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += c -> 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) {\n                return Some(c)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c.toString -> 1)\n            }\n        }\n        None",
    "        val map = HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (i <- 0 until str.length) {\n            if (charSet.contains(str(i))) return Some(str(i).toString)\n            else charSet += str(i)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map(c) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap.put(str(i), 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val char = str1(i).toString\n            if (charMap.contains(char)) {\n                return Some(char)\n            }\n            else {\n                charMap.put(char, 1)\n            }\n        }\n        None",
    "        val charMap = HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) return Some(c.toString)\n            else charMap += (c.toString -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charCount.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charCount(str(i)) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charCount.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charCount.put(str(i), 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map(c) = 1\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map.put(str(i), 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            if (charMap.contains(str1(i).toString)) return Some(str1(i).toString)\n            else charMap += (str1(i).toString -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val char = str1.substring(i, i + 1)\n            if (charMap.contains(char)) {\n                return Some(char)\n            }\n            else {\n                charMap(char) = 1\n            }\n        }\n        None",
    "        var charMap = Map[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c.toString -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i).toString)) {\n                return Some(str(i).toString)\n            }\n            else {\n                map(str(i).toString) = 1\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        str1.foreach(x => {\n            val key = x.toString\n            if (map.contains(key)) map(key) += 1\n            else map(key) = 1\n        })\n        map.find(x => x._2 > 1).map(x => x._1)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap(c) = 1\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c.toString, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val len = str.length\n        for (i <- 0 until len) {\n            for (j <- i + 1 until len) {\n                if (str(i) == str(j)) return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map.put(str(i), 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        val charSet = Set[Char]()\n        for (c <- str1) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                map += (c.toString -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map += (str(i) -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val set = Set[Char]()\n        for (c <- str) {\n            if (set.contains(c)) return Some(c.toString)\n            else set += c\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            map.put(c.toString, 1)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map(str(i)) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount += (c -> 1)\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val charMap = HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val map = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str1.length) {\n            if (charMap.contains(str1(i))) {\n                return Some(str1(i).toString)\n            } else {\n                charMap += (str1(i) -> 1)\n            }\n        }\n        None",
    "        val map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) return Some(c)\n            else map(c) = 1\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val set = Set[String]()\n        for (c <- str1) {\n            if (set.contains(c.toString)) return Some(c.toString)\n            else set += c.toString\n        }\n        None",
    "        var map = Map[String, Int]()\n        for (i <- 0 to str1.length - 1) {\n            if (map.contains(str1(i).toString)) {\n                return Some(str1(i).toString)\n            }\n            else {\n                map += (str1(i).toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        None",
    "        val charMap = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c.toString) = 1\n            }\n        }\n        return None",
    "        val map = new HashMap[Char, Int]()\n        for(c <- str1) {\n            if(map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.groupBy(identity).mapValues(_.size)\n        val str6 = str5.filter(_._2 > 1)\n        if (str6.isEmpty) None else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            map(str(i)) = 1\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map(c) = 1\n        }\n        return None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) {\n                return Some(c)\n            } else {\n                map(c) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        var result : Option[String] = None\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                result = Some(c.toString)\n                return result\n            }\n        }\n        result",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val set = Set[Char]()\n        for (i <- 0 until str.length) {\n            if (set.contains(str(i))) return Some(str(i).toString)\n            else set += str(i)\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            }\n            map.put(c.toString, 1)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map(c) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map += (str(i) -> i)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map += (c -> 1)\n        }\n        None",
    "        val charSet = Set[Char]()\n        for (c <- str1) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i))) return Some(str1(i).toString)\n            else map(str1(i)) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c.toString, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap.put(str(i), 1)\n            }\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString())\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        var charMap = Map[String, Int]()\n        for (char <- str1) {\n            if (charMap.contains(char.toString)) {\n                return Some(char.toString)\n            }\n            else {\n                charMap += (char.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        None",
    "        val charMap = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            if (charMap.contains(str1(i).toString)) {\n                return Some(str1(i).toString)\n            }\n            else {\n                charMap += (str1(i).toString -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]()\n        for (char <- str1) {\n            if (charMap.contains(char.toString)) {\n                return Some(char.toString)\n            } else {\n                charMap.put(char.toString, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.distinct\n        val str6 = str5.mkString\n        val str7 = str6.toCharArray\n        val str8 = str7.toList\n        val str9 = str8.map(x => str2.count(_ == x))\n        val str10 = str9.zip(str8)\n        val str11 = str10.filter(x => x._1 > 1)\n        if (str11.isEmpty) None else Some(str11.head._2.toString)",
    "        val str = str1.toLowerCase\n        val charCount = HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) return Some(c.toString)\n            else charMap += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            map += (str(i) -> 1)\n        }\n        None",
    "        val str1_arr = str1.toCharArray\n        val str1_set = str1_arr.toSet\n        val str1_map = Map[Char, Int]()\n        for (i <- 0 until str1_arr.length) {\n            if (str1_map.contains(str1_arr(i))) {\n                return Some(str1_arr(i).toString)\n            }\n            else {\n                str1_map(str1_arr(i)) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val set = Set[String]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (set.contains(c)) return Some(c)\n            else set += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        var map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) return Some(c)\n            else map += (c -> 1)\n        }\n        return None"
  ]
}