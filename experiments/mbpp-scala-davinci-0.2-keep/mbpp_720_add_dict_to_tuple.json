{
  "name": "mbpp_720_add_dict_to_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        if (test_tup < 0) Left(test_tup)\n        else Right(test_dict)",
    "        return Right(test_dict)",
    "        var tup_dict = test_tup.toString.split(\"\").map(_.toInt).toList\n        var dict_list = test_dict.toList\n        var dict_list_int = dict_list.map(x => x._2.toInt)\n        var dict_list_int_sum = dict_list_int.sum\n        var tup_dict_sum = tup_dict.sum\n        var tup_dict_sum_dict_list_int_sum = tup_dict_sum + dict_list_int_sum\n        if (tup_dict_sum_dict_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        if(test_tup > 0)\n            Left(test_tup)\n        else\n            Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        val tup_dict = Map(test_tup.toString -> test_tup)\n        val new_dict = test_dict ++ tup_dict\n        if (new_dict.size == test_dict.size) {\n            Left(test_tup)\n        } else {\n            Right(new_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n            val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n            val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(x => x.toInt)\n            val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n            val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n            val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(x => x.toInt)\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_",
    "        // Write your code here\n        return Right(test_dict)",
    "        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        Left(test_tup)",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        //Write your code here\n        Left(test_tup)",
    "        // Write your code here\n        Right(test_dict)",
    "        val tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        val sum = tup_list.sum\n        if (sum > 10) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Add code here\n        var test_tup1 = test_tup\n        var test_dict1 = test_dict\n        Right(test_dict1)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        Left(test_tup)",
    "        val test_tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        val test_tup_sum = test_tup_list.sum\n        if (test_tup_sum == 0) {\n            Left(test_tup)\n        } else {\n            val test_tup_sum_str = test_tup_sum.toString\n            val test_tup_sum_str_list = test_tup_sum_str.split(\"\").map(_.toInt).toList\n            val test_tup_sum_str_list_sum = test_tup_sum_str_list.sum\n            if (test_tup_sum_str_list_sum == 0) {\n                Left(test_tup)\n            } else {\n                val test_tup_sum_str_list_sum_str = test_tup_sum_str_list_sum.toString\n                val test_tup_sum_str_list_sum_str_list = test_tup_sum_str_list_sum_str.split(\"\").map(_.toInt).toList\n                val test_tup_sum_str_list_sum_str_list_sum = test_tup_sum_str_list_sum_str_list.sum\n                if (test_tup_sum_str_list_sum_str_list_sum == 0) {\n                    Left(test_tup)\n                } else {\n                    val test_tup_sum_str_list_sum_str_list_sum_str = test_tup_sum_str_list_sum_str_list_sum.toString\n                    val test_tup_sum_str_list_sum_str_list_sum_str_list = test_tup_sum_str_list_sum_str_list_sum_str.split(\"\").map(_.toInt).toList\n                    val test_tup_sum_str_list_sum_str_list_sum_str_list_sum = test_tup_sum_str_list_sum_str_list_sum_str_list.sum\n                    if (test_",
    "        val test_tup_list = test_tup.toString.toList\n        val test_dict_list = test_dict.toList\n        val test_tup_dict = test_tup_list.zip(test_dict_list).toMap\n        val test_tup_dict_list = test_tup_dict.toList\n        val test_tup_dict_list_sorted = test_tup_dict_list.sortBy(_._1)\n        val test_tup_dict_list_sorted_map = test_tup_dict_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list = test_tup_dict_list_sorted_map.toList\n        val test_tup_dict_list_sorted_map_list_sorted = test_tup_dict_list_sorted_map_list.sortBy(_._2)\n        val test_tup_dict_list_sorted_map_list_sorted_map = test_tup_dict_list_sorted_map_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list_sorted_map_list = test_tup_dict_list_sorted_map_list_sorted_map.toList\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted = test_tup_dict_list_sorted_map_list_sorted_map_list.sortBy(_._1)\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map = test_tup_dict_list_sorted_map_list_sorted_map_list_sorted.toMap\n        val test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map_list = test_tup_dict_list_sorted_map_list_sorted_map_list_sorted_map.toList\n        val test_tup_dict_list_sorted_",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Left(test_tup)",
    "        // Write your code here\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        // Write your code here\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Left(test_tup)",
    "        // Write your code here\n        if(test_tup > 0)\n            Left(test_tup)\n        else\n            Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        val test_tuple = (test_tup, test_dict)\n        Right(test_dict)",
    "        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        Right(test_dict)",
    "        // Add code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val test_tup_new = (test_tup, test_dict)\n        Right(test_tup_new)",
    "        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup < 0) Left(test_tup)\n        else Right(test_dict)",
    "        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        Left(test_tup)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        val new_dict = test_dict + (\"test\" -> test_tup)\n        Right(new_dict)",
    "        return Right(test_dict)",
    "        // Write your code here\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Add your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        val test_tup_new = (test_tup, test_dict)\n        Right(test_dict)",
    "        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup == 1) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Add code here\n        Right(test_dict)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val new_tup = (test_tup, test_dict)\n        return Right(new_tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        val result = (test_tup, test_dict)\n        Right(result)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val test_tup_list = test_tup.toString.toList\n        val test_dict_list = test_dict.toList\n        val test_tup_list_len = test_tup_list.length\n        val test_dict_list_len = test_dict_list.length\n        var test_dict_list_len_index = test_dict_list_len - 1\n        var test_tup_list_len_index = test_tup_list_len - 1\n        var test_tup_list_len_index_2 = test_tup_list_len - 2\n        var test_tup_list_len_index_3 = test_tup_list_len - 3\n        var test_tup_list_len_index_4 = test_tup_list_len - 4\n        var test_tup_list_len_index_5 = test_tup_list_len - 5\n        var test_tup_list_len_index_6 = test_tup_list_len - 6\n        var test_tup_list_len_index_7 = test_tup_list_len - 7\n        var test_tup_list_len_index_8 = test_tup_list_len - 8\n        var test_tup_list_len_index_9 = test_tup_list_len - 9\n        var test_tup_list_len_index_10 = test_tup_list_len - 10\n        var test_tup_list_len_index_11 = test_tup_list_len - 11\n        var test_tup_list_len_index_12 = test_tup_list_len - 12\n        var test_tup_list_len_index_13 = test_tup_list_len - 13\n        var test_tup_list_len_index_14 = test_tup_list_len - 14\n        var test_tup_list_len_index_15 = test_tup_list_len - 15\n        var test_tup_list_len_index_16 = test_tup_list_len - 16\n        var",
    "        // Write your code here\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }",
    "        return Right(test_dict)",
    "        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup == 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n        val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str",
    "        Right(test_dict)",
    "        return Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        return Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Add code here\n        return Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Add code here\n        Right(test_dict)",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n        val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(_.toInt)\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n        val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum_str_list_int_sum.toString\n        val test_tup_list_int_sum_str_list_int_sum_str",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        return Left(test_tup)",
    "        // Add your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        return Right(test_dict)",
    "        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)",
    "        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        // Write your code here\n        return Right(test_dict)",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }",
    "        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(_.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        return Right(test_dict)",
    "        Right(test_dict)"
  ]
}