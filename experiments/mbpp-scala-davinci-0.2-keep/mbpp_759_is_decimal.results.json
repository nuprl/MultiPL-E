{
  "name": "mbpp_759_is_decimal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val decimal = parts(1)\n                if (decimal.length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp51fyla8r.scala:19)\n\tat Problem.main(tmp51fyla8r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decimalPart) = (parts(0), parts(1))\n                if (intPart.length > 0 && decimalPart.length == 2) {\n                    if (intPart.forall(c => c.isDigit) && decimalPart.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1 && num(0) == '.') return false\n        if (num.length == 2 && num(0) == '.') return false\n        if (num.length == 2 && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '.' && num(2) == '.') return false\n        if (num.length == 3 && num(1) == '.' && num(2) == '.') return false\n        if (num.length == 3 && num(0) == '.' && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '0' && num(2) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '0' && num(2) == '0') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '0' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '0' && num(3) == '0') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '0' && num(2) == '.' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '0' && num(2) == '.' && num(3\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510383,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpewj71hpy.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpewj71hpy.scala:21:85 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (num.length == \u001b[31m4\u001b[0m && num(\u001b[31m0\u001b[0m) == \u001b[31m'0'\u001b[0m && num(\u001b[31m1\u001b[0m) == \u001b[31m'0'\u001b[0m && num(\u001b[31m2\u001b[0m) == \u001b[31m'.'\u001b[0m && num(\u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Char\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp020xnll_.scala:19)\n\tat Problem.main(tmp020xnll_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-') {\n            if (num.length == 2) return num(1).isDigit\n            if (num.length == 3) return num(1).isDigit && num(2) == '.'\n            if (num.length == 4) return num(1).isDigit && num(2) == '.' && num(3).isDigit\n            if (num.length == 5) return num(1).isDigit && num(2) == '.' && num(3).isDigit && num(4).isDigit\n            return false\n        }\n        if (num.length == 1) return num(0).isDigit\n        if (num.length == 2) return num(0).isDigit && num(1) == '.'\n        if (num.length == 3) return num(0).isDigit && num(1) == '.' && num(2).isDigit\n        if (num.length == 4) return num(0).isDigit && num(1) == '.' && num(2).isDigit && num(3).isDigit\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp68jt_jp_.scala:22)\n\tat Problem.main(tmp68jt_jp_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0) >= '0' && num(0) <= '9'\n        if (num(0) == '0') return false\n        var i = 0\n        while (i < num.length && num(i) >= '0' && num(i) <= '9') i += 1\n        if (i == num.length) return true\n        if (num(i) != '.') return false\n        i += 1\n        if (i == num.length) return false\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2 && nums(1).length > 2) return false\n        try {\n            num.toDouble\n            true\n        } catch {\n            case e : Exception => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{1,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n            if (parts(1).length == 2 && parts(1)(0) == '0') return false\n        }\n        for (i <- 0 until parts(0).length) {\n            if (!(parts(0)(i) >= '0' && parts(0)(i) <= '9')) return false\n        }\n        if (parts.length == 2) {\n            for (i <- 0 until parts(1).length) {\n                if (!(parts(1)(i) >= '0' && parts(1)(i) <= '9')) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(a, b) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 1) return nums(0).forall(c => c.isDigit)\n        if (nums(1).length > 2) return false\n        nums(0).forall(c => c.isDigit) && nums(1).forall(c => c.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') count += 1\n            else if (num(i) < '0' || num(i) > '9') return false\n        }\n        if (count > 1) return false\n        if (count == 1) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1 || index == 0) return false\n            if (num.length - index - 1 > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (index == 0) return num.length - 1 <= 2\n            return num.length - index - 1 <= 2\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split('.')\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9' || num(i) == '.')) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decPart) = (parts(0), parts(1))\n                if (intPart.length > 0 && decPart.length == 2) {\n                    intPart.forall(c => c >= '0' && c <= '9') && decPart.forall(c => c >= '0' && c <= '9')\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(num) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length == 1) return true\n        if (nums.length == 2) {\n            if (nums(1).length == 2) return true\n            else return false\n        }\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplmwsj0dd.scala:17)\n\tat Problem.main(tmplmwsj0dd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '.') return false\n        var dot = false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) {\n                return false\n            } else if (dot) {\n                count += 1\n            }\n        }\n        if (dot) {\n            if (count == 0) return false\n            if (count > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val dot = num.indexOf('.')\n        if (dot == -1) return false\n        val left = num.substring(0, dot)\n        val right = num.substring(dot + 1)\n        if (left.length == 0) return false\n        if (right.length != 2) return false\n        for (c <- left) if (!c.isDigit) return false\n        for (c <- right) if (!c.isDigit) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(1).length > 2) return false\n            return parts(0).forall(_.isDigit) && parts(1).forall(_.isDigit)\n        }\n        else return num.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(1).forall(c => c.isDigit)) return true\n            return false\n        }\n        else {\n            if (num.forall(c => c.isDigit)) return true\n            return false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp27u7ysux.scala:21)\n\tat Problem.main(tmp27u7ysux.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        var afterDot = 0\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            }\n            else if (num(i) < '0' || num(i) > '9') return false\n            else if (dot) afterDot += 1\n            i += 1\n        }\n        if (afterDot > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var hasPoint = false\n        var hasDigit = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (hasPoint) return false\n                hasPoint = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n            else hasDigit = true\n            i += 1\n        }\n        if (!hasDigit) return false\n        if (hasPoint) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (index == num.length - 3) return true\n            return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(1).length > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            }\n            else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val parts = num.split(\"\\\\.\")\n            if (parts(1).length > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprjz8ian.scala:18)\n\tat Problem.main(tmpprjz8ian.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^-?\\\\d+(\\\\.\\\\d{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var decimal = false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n            else if (decimal) count += 1\n        }\n        if (decimal && count == 2) return true\n        if (!decimal) return true\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptvkid2x4.scala:19)\n\tat Problem.main(tmptvkid2x4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^\\d+\\.\\d{2}$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+\\.\\d{1,2})\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr9s83qsk.scala:14)\n\tat Problem.main(tmpr9s83qsk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c >= '0' && c <= '9') && right.forall(c => c >= '0' && c <= '9')) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val nums = num.split(\"\\\\.\")\n            if (nums.length == 2) {\n                if (nums(1).length == 2) {\n                    true\n                } else {\n                    false\n                }\n            } else {\n                false\n            }\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpldw7go1e.scala:23)\n\tat Problem.main(tmpldw7go1e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 1) return nums(0).forall(c => c >= '0' && c <= '9')\n        if (nums(1).length > 2) return false\n        nums(0).forall(c => c >= '0' && c <= '9') && nums(1).forall(c => c >= '0' && c <= '9')\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.forall(_.isDigit) && right.forall(_.isDigit) && right.length == 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit) && right.length <= 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (num.length - index - 1 > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5qgspjc4.scala:18)\n\tat Problem.main(tmp5qgspjc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+\\.\\d{1,2})\"\"\".r\n        num match {\n            case regex(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var hasDot = false\n        var hasDigit = false\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (hasDot) return false\n                hasDot = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n            else hasDigit = true\n        }\n        if (!hasDigit) return false\n        if (hasDot) {\n            val dotIndex = num.indexOf('.')\n            if (dotIndex == num.length - 1) return false\n            if (dotIndex == num.length - 3) return true\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-' || num(0) == '+') return isDecimal(num.substring(1))\n        if (num.indexOf('.') == -1) return num.forall(_.isDigit)\n        val arr = num.split('.')\n        if (arr.length != 2) return false\n        if (arr(0).length == 0) return false\n        if (arr(1).length != 2) return false\n        arr(0).forall(_.isDigit) && arr(1).forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length != 2) return false\n        if (decimal(1).length > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe3kck6xg.scala:13)\n\tat Problem.main(tmpe3kck6xg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (a, b) = (parts(0), parts(1))\n                if (a.length == 0) return false\n                if (b.length == 0) return false\n                if (b.length > 2) return false\n                if (a.forall(c => c.isDigit)) {\n                    if (b.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(1).length > 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length == 0) return false\n            for (i <- 0 until parts(0).length) {\n                if (!parts(0)(i).isDigit) return false\n            }\n            for (i <- 0 until parts(1).length) {\n                if (!parts(1)(i).isDigit) return false\n            }\n            return true\n        }\n        else {\n            for (i <- 0 until num.length) {\n                if (!num(i).isDigit) return false\n            }\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        val result = pattern.findFirstIn(num)\n        if (result.isEmpty) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0yukzvtl.scala:12)\n\tat Problem.main(tmp0yukzvtl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpspfdfajq.scala:18)\n\tat Problem.main(tmpspfdfajq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length <= 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : NumberFormatException => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0) >= '0' && num(0) <= '9'\n        if (num(0) == '0') return false\n        if (num(0) == '-') return isDecimal(num.substring(1))\n        var i = 0\n        while (i < num.length && num(i) >= '0' && num(i) <= '9') i += 1\n        if (i == num.length) return true\n        if (num(i) != '.') return false\n        i += 1\n        if (i == num.length) return false\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return false\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            return parts(0).forall(c => c.isDigit) && parts(1).forall(c => c.isDigit)\n        }\n        else return num.forall(c => c.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern() => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw7jrzmtk.scala:13)\n\tat Problem.main(tmpw7jrzmtk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprjz8ian.scala:18)\n\tat Problem.main(tmpprjz8ian.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]*\\\\.[0-9]{2}\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphgaxw0ux.scala:14)\n\tat Problem.main(tmphgaxw0ux.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length > 0 && parts(1).length <= 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(0).forall(c => c.isDigit) && parts(1).forall(c => c.isDigit)) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        num match {\n            case pattern() => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length == 1) return false\n        if (decimal(1).length > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123118,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkdmuv3xu.scala:13)\n\tat Problem.main(tmpkdmuv3xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp08vut388.scala:18)\n\tat Problem.main(tmp08vut388.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprjz8ian.scala:18)\n\tat Problem.main(tmpprjz8ian.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpej07e6zx.scala:18)\n\tat Problem.main(tmpej07e6zx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit) && right.length <= 2) true\n                else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case _ : Throwable => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (index == num.length - 3) return true\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var hasDot = false\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (hasDot) return false\n                else hasDot = true\n            } else if (!num(i).isDigit) return false\n        }\n        if (hasDot) {\n            val parts = num.split(\"\\\\.\")\n            if (parts(1).length > 2) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length == 2) {\n            if (decimal(1).length == 2) {\n                return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjqbbx82p.scala:16)\n\tat Problem.main(tmpjqbbx82p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var decimal = false\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            } else if (!(num(i) >= '0' && num(i) <= '9')) return false\n        }\n        if (decimal) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (index == num.length - 3) return true\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (int, dec) = (parts(0), parts(1))\n                if (int.forall(c => c.isDigit) && dec.forall(c => c.isDigit) && dec.length <= 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^-?\\d+\\.\\d{2}$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit) && right.length == 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n            if (parts(1).length == 2) {\n                if (parts(1)(0) == '0' && parts(1)(1) == '0') return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm9kay2wl.scala:19)\n\tat Problem.main(tmpm9kay2wl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2 && parts(1).length <= 2) true\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpet4vsqto.scala:15)\n\tat Problem.main(tmpet4vsqto.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var decimal = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (decimal) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(1).length > 2) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val split = num.split('.')\n        if (split.length > 2) return false\n        if (split.length == 2 && split(1).length > 2) return false\n        try {\n            split(0).toInt\n            if (split.length == 2) split(1).toInt\n            true\n        } catch {\n            case e : Exception => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = 0\n        while (i < num.length) {\n            if (num(i) == '.') {\n                dot += 1\n                if (dot > 1) return false\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot == 0) return true\n        if (num.length - num.indexOf('.') > 3) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length == 0 || right.length == 0) return false\n                if (left.length == 1 && left(0) == '-') return false\n                if (left.forall(c => c.isDigit)) {\n                    if (right.forall(c => c.isDigit)) {\n                        if (right.length <= 2) return true\n                    }\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0) >= '0' && num(0) <= '9'\n        if (num(0) == '0') return false\n        var i = 0\n        while (i < num.length && num(i) >= '0' && num(i) <= '9') i += 1\n        if (i == num.length) return true\n        if (num(i) != '.') return false\n        i += 1\n        if (i == num.length) return false\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            for (i <- 0 until parts(0).length) {\n                if (!parts(0)(i).isDigit) return false\n            }\n            for (i <- 0 until parts(1).length) {\n                if (!parts(1)(i).isDigit) return false\n            }\n            return true\n        }\n        else {\n            if (num.length == 0) return false\n            for (i <- 0 until num.length) {\n                if (!num(i).isDigit) return false\n            }\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[+-]?[0-9]*(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decimalPart) = (parts(0), parts(1))\n                if (intPart.length() > 0 && decimalPart.length() == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmponxa6wxa.scala:19)\n\tat Problem.main(tmponxa6wxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(1).length > 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length == 0) return false\n            for (i <- 0 until parts(0).length) {\n                if (parts(0)(i) < '0' || parts(0)(i) > '9') return false\n            }\n            for (i <- 0 until parts(1).length) {\n                if (parts(1)(i) < '0' || parts(1)(i) > '9') return false\n            }\n            return true\n        } else {\n            for (i <- 0 until num.length) {\n                if (num(i) < '0' || num(i) > '9') return false\n            }\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzfxdmmo8.scala:14)\n\tat Problem.main(tmpzfxdmmo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph28m2eo8.scala:14)\n\tat Problem.main(tmph28m2eo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimalPattern = \"\"\"(\\d+\\.\\d{2})\"\"\".r\n        num match {\n            case decimalPattern(x) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n            if (nums(1).length == 2 && nums(1)(1) == '0') return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk7072rh3.scala:17)\n\tat Problem.main(tmpk7072rh3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510384,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length > 2) return false\n                else return parts(0).forall(c => c.isDigit) && parts(1).forall(c => c.isDigit)\n            }\n            else return false\n        }\n        else return num.forall(c => c.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n            if (nums(1).length == 2 && nums(1)(0) == '0') return false\n        }\n        if (nums(0).length == 0) return false\n        for (i <- 0 until nums(0).length) {\n            if (!Character.isDigit(nums(0)(i))) return false\n        }\n        if (nums.length == 2) {\n            for (i <- 0 until nums(1).length) {\n                if (!Character.isDigit(nums(1)(i))) return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length > 2) return false\n        if (decimal.length == 2) {\n            if (decimal(1).length > 2) return false\n        }\n        val digits = num.split(\"\\\\.\")(0).toList\n        digits.forall(c => c >= '0' && c <= '9')\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            val parts = num.split(\"\\\\.\")\n            if (parts(1).length > 2) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+\\.\\d{2})\"\"\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                count += 1\n                if (count > 1) return false\n            }\n            else if (!num(i).isDigit) return false\n        }\n        if (count == 0) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpobxqgbh6.scala:21)\n\tat Problem.main(tmpobxqgbh6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}