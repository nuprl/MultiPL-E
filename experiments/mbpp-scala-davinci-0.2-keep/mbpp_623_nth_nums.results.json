{
  "name": "mbpp_623_nth_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(pow(_, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        var result = List[Long]()\n        for (num <- nums) {\n            result = result :+ pow(num, n).toLong\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(pow(_, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(pow(_, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(pow(_, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(num => pow(num, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(num => pow(num, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(pow(_, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        var result = List[Long]()\n        for (num <- nums) {\n            result = result :+ pow(num, n).toLong\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums.map(x => pow(x, n).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}