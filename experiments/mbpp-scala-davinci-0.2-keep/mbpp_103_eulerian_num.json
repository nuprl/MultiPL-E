{
  "name": "mbpp_103_eulerian_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    def eulerianNum(n : Long, m : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) * (m - j + 1) / i\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (n - k) * (n - k - 1) * pow(n - k - 2, m - k - 1).toLong\n        }\n        result",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) a(i)(j) = 1\n                else if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (i - j + 1) * a(i - 1)(j) + j * a(i - 1)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        if (n < m) return eulerianNum(n, n)\n        if (n == m) return eulerianNum(n, m - 1) + eulerianNum(n - 1, m - 1)\n        eulerianNum(n - 1, m) + eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (j <- 2 to m.toInt) {\n            for (i <- j to n.toInt) {\n                dp(i)(j) = dp(i - 1)(j) + (i - 1) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)"
  ]
}