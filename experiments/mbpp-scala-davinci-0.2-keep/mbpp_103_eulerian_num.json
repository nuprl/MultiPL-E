{
  "name": "mbpp_103_eulerian_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    def eulerianNum(n : Long, m : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) * (m - j + 1) / i\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (n - k) * (n - k - 1) * pow(n - k - 2, m - k - 1).toLong\n        }\n        result",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) a(i)(j) = 1\n                else if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (i - j + 1) * a(i - 1)(j) + j * a(i - 1)(j - 1)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        if (n < m) return eulerianNum(n, n)\n        if (n == m) return eulerianNum(n, m - 1) + eulerianNum(n - 1, m - 1)\n        eulerianNum(n - 1, m) + eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (j <- 2 to m.toInt) {\n            for (i <- j to n.toInt) {\n                dp(i)(j) = dp(i - 1)(j) + (i - 1) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += (if (k % 2 == 0) 1 else -1) * (n + k).toLong.choose(k)\n        }\n        result",
    "        def factorial(n : Long) : Long = {\n            def factorialHelper(n : Long, acc : Long) : Long = {\n                if (n == 0) acc\n                else factorialHelper(n - 1, acc * n)\n            }\n            factorialHelper(n, 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNumHelper(n : Long, m : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else eulerianNumHelper(n - 1, m, acc + binomial(m, n - 1) * factorial(n - 1))\n        }\n        eulerianNumHelper(n, m, 0)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += binomial(n + 1, k) * binomial(n - k + 1, m - k + 1)\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + j * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        for (i <- 1 to n.toInt) {\n            a(i) = 0\n            for (j <- 0 to i) {\n                a(i) += a(j) * a(i - j - 1) * (if (j == 0) 1 else j)\n            }\n        }\n        a(n.toInt) / (factorial(m) * factorial(n - m))",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 1) return (n + 1)\n        if (m == 2) return (n + 1) * (n + 2) / 2\n        if (m == 3) return (n + 1) * (n + 2) * (n + 3) / 6\n        if (m == 4) return (n + 1) * (n + 2) * (n + 3) * (n + 4) / 24\n        if (m == 5) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) / 120\n        if (m == 6) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) / 720\n        if (m == 7) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) / 5040\n        if (m == 8) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) / 40320\n        if (m == 9) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) / 362880\n        if (m == 10) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) * (n + 10) / 3628800\n        if (m == 11) return (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) a(i)(j) = 1\n                else if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (i - j + 1) * a(i - 1)(j - 1) + (j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        // a(n, m) = (n + m)! / (n! * m!)\n        val numerator = (n + m).factorial\n        val denominator = n.factorial * m.factorial\n        numerator / denominator",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return 1\n        if (m == 1) return 1\n        if (n == m) return 1\n        if (n < m) return 0\n        return (n - m) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 0 to m.toInt) dp(0)(i) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 2 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0) 0\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        var ans = 0L\n        for (k <- 0 to m.toInt) {\n            ans += binomial(m, k) * (m - k).toLong.pow(n.toInt)\n        }\n        ans",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return 1\n        if (m == 1) return 1\n        if (n == m) return 1\n        if (n < m) return 0\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == m) return 1\n        if (n < m) return 0\n        (m + 1) * eulerianNum(n - 1, m) + (n - m) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == m) return 1\n        if (n < m) return 0\n        (n - m + 1) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 0 to m.toInt) dp(0)(i) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 2 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val table = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) table(i)(j) = 1\n                else if (i == j) table(i)(j) = 1\n                else table(i)(j) = table(i - 1)(j - 1) + (i - j) * table(i - 1)(j)\n            }\n        }\n        table(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return m + 1\n        if (m == 1) return 1\n        if (n == 2) return (m + 1) * (m + 2) / 2\n        if (m == 2) return (n + 1) * (n + 2) / 2\n        var result = 0L\n        for (i <- 0 to m.toInt) {\n            result += eulerianNum(n - 1, i)\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        // a(n, m) = (n + m)! / (n! * m!)\n        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n + m) / (factorial(n) * factorial(m))",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == m) return 1\n        if (n < m) return 0\n        return (n - m + 1) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (m == 0 || n == m) 1\n            else m * eulerianNum(n - 1, m) + (n - m) * eulerianNum(n - 1, m - 1)\n        }\n        eulerianNum(n, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (j == i) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else (n - m + 1) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = (if (j == 0) 0 else dp(i - 1)(j - 1)) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            factorial(n) / (factorial(k) * factorial(n - k))\n        }\n        def eulerianNum(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else if (m == 0) 0\n            else (n - m + 1) * eulerianNum(n - 1, m - 1) + m * eulerianNum(n - 1, m)\n        }\n        eulerianNum(n, m)",
    "        if (n == 0 || m == 0) 1\n        else if (n == 1 || m == 1) n + m\n        else if (n < m) eulerianNum(n, n)\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 || m == 0) return 1\n        if (n == 1 || m == 1) return n + m\n        if (n == m) return 1\n        if (n < m) return eulerianNum(n, n)\n        eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to min(i, m.toInt)) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (m > n) return 0\n        return (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return m + 1\n        if (m == 1) return 1\n        if (n == m) return 1\n        if (n < m) return 0\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0 || j == i) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 0 to m.toInt) dp(0)(i) = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 2 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        var result = 0L\n        for (i <- 0 to m.toInt) {\n            result += eulerianNum(n - 1, i)\n        }\n        result",
    "        var sum = 0L\n        for (k <- 0 to m.toInt) {\n            sum += (factorial(n + 1) / (factorial(k) * factorial(n + 1 - k))) * pow(-1, k).toLong\n        }\n        sum",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == 1) 1\n        else if (m == 1) 1\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n - 1, m)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) 1\n        else if (n == 1) m + 1\n        else if (m == 1) n + 1\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) * j + dp(i - 1)(j) * (j + 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i + 1) * dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        // a(n, m) = (n - m + 1) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m)\n        val cache = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) cache(i)(j) = 1\n                else if (i == 0) cache(i)(j) = 0\n                else if (j == 0) cache(i)(j) = 1\n                else cache(i)(j) = (i - j + 1) * cache(i - 1)(j - 1) + (j + 1) * cache(i - 1)(j)\n            }\n        }\n        cache(n.toInt)(m.toInt)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        if (n < m) return eulerianNum(n, n)\n        if (n == m) return eulerianNum(n, m - 1) + eulerianNum(n - 1, m - 1)\n        eulerianNum(n - 1, m) + eulerianNum(n, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n < m) 0\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i + 1) * dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var result = 0L\n        for (i <- 0 to m.toInt) {\n            result += (-1) * (i % 2) * (n + 1 - i).toLong * (n + 1 - i).toLong * (n + 1 - i).toLong * (n + 1 - i).toLong * (n + 1 - i).toLong / (i.toLong * i.toLong * i.toLong * i.toLong * i.toLong)\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        if (n == m) return 1\n        if (n < m) return eulerianNum(n, n)\n        if (n > m) return eulerianNum(n - 1, m) + eulerianNum(n - 1, m - 1)\n        0",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + j * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + dp(i)(j - 1) * (i - 1))\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) * (i + j - 1)) / j\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def choose(n : Long, m : Long) : Long = {\n            factorial(n) / (factorial(m) * factorial(n - m))\n        }\n        choose(n + m - 1, n - 1)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1) return m + 1\n        if (m == 1) return n + 1\n        var result : Long = 0\n        for (i <- 0 to m.toInt) {\n            result += eulerianNum(n - 1, i)\n        }\n        return result",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) * i + dp(i - 1)(j) * (i - j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        if (n < m) return 0\n        if (n == m) return 1\n        if (m == 0) return 1\n        if (m == 1) return n\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 || m == 0) return 1\n        if (n == 1 || m == 1) return n + m\n        if (n < m) return eulerianNum(n, n)\n        if (n == m) return eulerianNum(n, m - 1) + eulerianNum(n - 1, m - 1)\n        eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + (n + 1) * eulerianNum(n - 1, m - 1)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) dp(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j - 1) + (i - 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) * (m - j + 1) / i\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else a(i)(j) = (a(i - 1)(j - 1) + j * a(i - 1)(j)) % 1000000007\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j - 1) + (j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return m + 1\n        if (m == 1) return 1\n        if (n > m) return 0\n        (m + 1) * eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(1) = i\n        }\n        for (i <- 2 to m.toInt) {\n            for (j <- i to n.toInt) {\n                dp(j)(i) = dp(j - 1)(i) + (i + 1) * dp(j - 1)(i - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) return 1\n        if (m == 0) return 0\n        if (m > n) return 0\n        if (m == 1) return 1\n        if (m == n) return 1\n        (n - m + 1) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j + 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        var result = 0L\n        for (k <- 0 to m.toInt) {\n            result += binomial(m, k) * (m - k).toLong.pow(n.toInt)\n        }\n        result",
    "        if (n < 0 || m < 0) 0\n        else if (n == 0 || m == 0) 1\n        else eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        var table = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) table(i)(j) = 0\n                else if (j == 0) table(i)(j) = 1\n                else table(i)(j) = (i - j + 1) * table(i - 1)(j) + (j + 1) * table(i - 1)(j - 1)\n            }\n        }\n        table(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0) dp(i)(j) = 1\n                else if (j == 0) dp(i)(j) = 0\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + j * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = (dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)) % 1000000007\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < m) 0\n        else if (n == m) 1\n        else (n - m + 1) * eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        if (n < m) 0\n        else if (n == m) 1\n        else if (m == 0) 1\n        else eulerianNum(n - 1, m) + (n - 1) * eulerianNum(n - 1, m - 1)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + j * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0 && m == 0) 1\n        else if (n == 0 || m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (m == 0) 1\n        else if (m == 1) n\n        else if (m > n) 0\n        else eulerianNum(n - 1, m) + m * eulerianNum(n - 1, m - 1)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) a(i)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to m.toInt) {\n                a(i)(j) = a(i - 1)(j - 1) + (i - 1) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else if (n == m) 1\n        else eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == j || j == 0) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j + 1) * dp(i - 1)(j) + j * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n == 0) 1\n        else if (m == 0) 0\n        else (n - m + 1) * eulerianNum(n - 1, m - 1) / m",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0) return 1\n        if (m == 0) return 0\n        if (n == 1) return 1\n        if (m == 1) return 1\n        if (n == m) return 1\n        eulerianNum(n - 1, m - 1) + (n - 1) * eulerianNum(n - 1, m)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        if (n < 0 || m < 0) return 0\n        if (n == 0 && m == 0) return 1\n        if (n == 0 || m == 0) return 0\n        eulerianNum(n - 1, m - 1) + (n + 1) * eulerianNum(n, m - 1)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + (i - j + 1) * dp(i - 1)(j)\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        val a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0) a(i)(j) = 0\n                else if (j == 0) a(i)(j) = 0\n                else if (j == 1) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = (j * a(i - 1)(j) + a(i - 1)(j - 1))\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + (i - j) * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.fill(n.toInt + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j) = dp(i - 1)(j) * (m - j + 1) / i\n            }\n        }\n        dp(n.toInt)(m.toInt)",
    "        var a = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, m.toInt)) {\n                if (j == 0) a(i)(j) = 1\n                else if (i == j) a(i)(j) = 1\n                else a(i)(j) = a(i - 1)(j - 1) + j * a(i - 1)(j)\n            }\n        }\n        a(n.toInt)(m.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, m.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to m.toInt) {\n                if (i == 0 && j == 0) dp(i)(j) = 1\n                else if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 1\n                else dp(i)(j) = (i - j) * dp(i - 1)(j) + (j + 1) * dp(i - 1)(j - 1)\n            }\n        }\n        dp(n.toInt)(m.toInt)"
  ]
}