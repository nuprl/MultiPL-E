{
  "name": "mbpp_88_freq_count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    def freqCount(list1 : List[Long]) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(freqCount((List[Long](10l.toLong, 10l.toLong, 10l.toLong, 10l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 40l.toLong, 40l.toLong, 50l.toLong, 50l.toLong, 30l.toLong))).equals((Map[Long,Long](10l -> 4l, 20l -> 4l, 40l -> 2l, 50l -> 2l, 30l -> 1l))));\n    assert(freqCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 4l.toLong))).equals((Map[Long,Long](1l -> 3l, 2l -> 2l, 3l -> 3l, 4l -> 3l))));\n    assert(freqCount((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 5l.toLong))).equals((Map[Long,Long](10l -> 1l, 5l -> 3l, 6l -> 2l, 7l -> 2l, 4l -> 2l, 9l -> 2l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) {\n                map1(i) += 1\n            } else {\n                map1(i) = 1\n            }\n        }\n        return map1",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map",
    "        val map = Map[Long,Long]()\n        for (i <- list1) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) map1(i) += 1\n            else map1(i) = 1\n        }\n        map1",
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) {\n                map1(i) += 1\n            } else {\n                map1(i) = 1\n            }\n        }\n        map1",
    "        var freq = Map[Long,Long]()\n        for (i <- list1) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq",
    "        var freqMap = Map[Long,Long]()\n        for (i <- list1) {\n            if (freqMap.contains(i)) {\n                freqMap(i) += 1\n            } else {\n                freqMap(i) = 1\n            }\n        }\n        freqMap",
    "        val map = Map[Long,Long]()\n        for (i <- list1) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var freqDict = Map[Long,Long]()\n        for (i <- list1) {\n            if (freqDict.contains(i)) freqDict(i) += 1\n            else freqDict(i) = 1\n        }\n        return freqDict",
    "        val freq = new HashMap[Long,Long]\n        for (i <- list1) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map",
    "        var map = Map[Long,Long]()\n        for (i <- list1) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map",
    "        var freqMap = Map[Long,Long]()\n        for (i <- list1) {\n            if (freqMap.contains(i)) {\n                freqMap(i) += 1\n            } else {\n                freqMap += (i -> 1)\n            }\n        }\n        freqMap",
    "        var freq = Map[Long,Long]()\n        for (i <- list1) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq",
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) map1(i) += 1\n            else map1(i) = 1\n        }\n        map1",
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) map1(i) += 1\n            else map1 += (i -> 1)\n        }\n        map1",
    "        var freqMap = Map[Long,Long]()\n        for (i <- list1) {\n            if (freqMap.contains(i)) {\n                freqMap(i) = freqMap(i) + 1\n            } else {\n                freqMap(i) = 1\n            }\n        }\n        return freqMap",
    "        var map1 = Map[Long,Long]()\n        for (i <- list1) {\n            if (map1.contains(i)) map1(i) += 1\n            else map1 += (i -> 1)\n        }\n        map1",
    "        var freqMap = Map[Long,Long]()\n        for (i <- list1) {\n            if (freqMap.contains(i)) {\n                freqMap(i) = freqMap(i) + 1\n            } else {\n                freqMap += (i -> 1)\n            }\n        }\n        return freqMap",
    "        var freq = Map[Long,Long]()\n        for (i <- list1) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq"
  ]
}