{
  "name": "mbpp_438_count_bidirectional",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count bidirectional tuple pairs.\n    def countBidirectional(test_list : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            val reverse = BigInt(i).toString.reverse.toLong\n            if (test_set.contains(reverse)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            if (test_set.contains(x.toLong * x.toLong)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0L\n        for (i <- 0 until sorted_list.length) {\n            val a = sorted_list(i)\n            val b = sorted_list(sorted_list.length - 1 - i)\n            if (a == b) count += 1\n            else if (a < b) return count\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        test_list.map(x => test_set.count(_ > x)).sum",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sortWith(_ < _)\n        val count = new HashMap[Long, Long]\n        for (i <- sorted_list) {\n            if (count.contains(i)) count(i) += 1\n            else count(i) = 1\n        }\n        var result = 0L\n        for (i <- count.keys) {\n            if (count(i) > 1) result += count(i) * (count(i) - 1)\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map.contains(-i)) count += map(i) * map(-i)\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * 2)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n                test_set.remove(i)\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * 2)) count += 1\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0L\n        for (i <- 0 until sorted_list.length - 1) {\n            val a = sorted_list(i)\n            val b = sorted_list(i + 1)\n            if (a * b > 0) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i + 1) && test_set.contains(i - 1)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n            }\n            for (j <- i + 1 until test_list.length) {\n                val y = test_list(j)\n                if (map.contains(y)) {\n                    map(y) += 1\n                }\n                else {\n                    map(y) = 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        var count = 0L\n        for (x <- map.keys) {\n            count += map(x) * (map(x) - 1) / 2\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i - 1)) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            if (test_map.contains(current)) {\n                test_map(current) += 1\n            } else {\n                test_map(current) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            if (test_map.contains(current)) {\n                result += test_map(current)\n                test_map(current) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) % (test_list(i) + test_list(j)) == 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j) && i != j) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) result += test_map(i) * test_map(-i)\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) % 1000000007 == 1) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toString.reverse.toLong)) count += 1\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length - 1) {\n            val x = test_list_sorted(i)\n            val y = test_list_sorted(i + 1)\n            if (x == y) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length; j <- i + 1 until test_list.length) {\n            if (test_list(i) + test_list(j) == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            for (j <- test_set) {\n                if (i != j) {\n                    if (test_set.contains(i + j)) {\n                        count += 1\n                    }\n                }\n            }\n        }\n        count / 2",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            if (map.contains(test_list(i))) {\n                count += map(test_list(i))\n                map(test_list(i)) += 1\n            } else {\n                map(test_list(i)) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            if (test_set.contains(x.toString.reverse.toLong)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            val v = map(i)\n            count += v * (v - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map += (i -> 1)\n            }\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length - 1) {\n            val x = sorted_list(i)\n            val y = sorted_list(i + 1)\n            if (x * y > 0) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_map = Map[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        var count : Long = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) result += test_map(i) * test_map(-i)\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length - 1) {\n            val x = sorted_list(i)\n            val y = sorted_list(i + 1)\n            if (x == y) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            if (test_set.contains(x.toLong * x.toLong)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) {\n                count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_map = test_list.groupBy(x => x).mapValues(_.length)\n        var count = 0L\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) {\n                val x_count = test_map(x)\n                val y_count = test_map(y)\n                count += x_count * y_count\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            val y = x * x\n            if (map.contains(y)) {\n                val n = map(y)\n                count += n\n                map(y) = 0\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            }\n            else map(x) = 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) % 1000000007 == 1) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            for (j <- test_set) {\n                if (i * j <= 1000000000) {\n                    if (test_set.contains(i * j)) {\n                        count += 1\n                    }\n                }\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Int]\n        var count = 0\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            }\n            else test_map += (i -> 1)\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            val x = map(i)\n            if (x > 1) count += x * (x - 1) / 2\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map(i) > 1) {\n                count += test_map(i) * (test_map(i) - 1) / 2\n            }\n        }\n        count",
    "        val list = test_list.sorted\n        var count = 0\n        for (i <- 0 until list.length - 1) {\n            val x = list(i)\n            val y = list(i + 1)\n            if (x == y) {\n                count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                val n = map(x)\n                count += n * (n - 1) / 2\n                map.remove(x)\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j) && i != j) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                result += test_map(test_list(i))\n                test_map(test_list(i)) = 0\n            }\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val list = test_list.sorted\n        var count = 0\n        for (i <- 0 until list.length - 1) {\n            val a = list(i)\n            val b = list(i + 1)\n            if (a * b > 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            if (test_set.contains(x * x)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toLong * i.toLong)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        return count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        var set = Set[Long]()\n        for (i <- 0 until test_list.length) {\n            if (set.contains(test_list(i))) count += 1\n            set += test_list(i)\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            val a = test_list_sorted(i)\n            for (j <- i + 1 until test_list_sorted.length) {\n                val b = test_list_sorted(j)\n                if (a * b <= 1000000) {\n                    count += 1\n                } else {\n                    return count\n                }\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) result += test_map(i) * test_map(-i)\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toLong * i.toLong)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_map = test_list.groupBy(x => x)\n        var count = 0L\n        for ((k, v) <- test_map) {\n            if (test_set.contains(k + 1)) count += v.length\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var result : Long = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) result += 1\n            }\n        }\n        return result",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * -1)) count += 1\n        }\n        count / 2",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j) * test_list(j)) count += 1\n                if (test_list(j) == test_list(i) * test_list(i)) count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_map = test_list.groupBy(x => x)\n        var count = 0L\n        for (x <- test_map) {\n            val y = x._1\n            val z = test_map(y).length\n            if (test_set.contains(y + y)) count += z * (z - 1) / 2\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_list_set = test_list.toSet\n        var count = 0\n        for (i <- 0 until test_list.length) {\n            val a = test_list(i)\n            val b = test_list(i) - 1\n            if (test_list_set.contains(b)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            val y = test_list(test_list.length - i - 1)\n            if (x != y) {\n                val count = map.getOrElse(x, 0)\n                map.put(x, count + 1)\n                val count2 = map.getOrElse(y, 0)\n                map.put(y, count2 + 1)\n            }\n        }\n        var result = 0L\n        for (x <- map.keySet) {\n            val count = map(x)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        count",
    "        val count = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (count.contains(x)) count(x) += 1\n            else count(x) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (count.contains(x)) {\n                result += count(x)\n                count(x) = 0\n            }\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            }\n            else test_map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_set.contains(test_list_sorted(i) + test_list_sorted(j))) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else map(x) = 1\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 to test_list_sorted.length - 1) {\n            for (j <- i + 1 to test_list_sorted.length - 1) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i - 1)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toString.reverse.toLong)) count += 1\n        }\n        count",
    "        val hash_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (hash_map.contains(i)) {\n                count += hash_map(i)\n            }\n            if (hash_map.contains(-i)) {\n                hash_map(i) = hash_map(-i) + 1\n            } else {\n                hash_map(i) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var result = 0L\n        for (i <- map.values) result += i * (i - 1) / 2\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = (x * 3) / 2\n            if (test_set.contains(y)) {\n                count += 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val counts = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val count = counts.getOrElse(test_list(i), 0)\n            counts(test_list(i)) = count + 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val count = counts.getOrElse(test_list(i), 0)\n            if (count > 1) {\n                result += count * (count - 1) / 2\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            val value = map(i)\n            if (value > 1) count += value * (value - 1)\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) {\n                count += test_map(i) * test_map(-i)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = test_list_sorted(i)\n            if (test_set.contains(x + y)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            val v = map(i)\n            if (v > 1) count += v * (v - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length) {\n            val x = sorted_list(i)\n            val y = x * x\n            val index = sorted_list.indexOf(y)\n            if (index != -1) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n                test_set.remove(i)\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        val map = HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_set_size = test_set.size\n        val test_list_size = test_list.size\n        if (test_set_size == test_list_size) {\n            return test_list_size * (test_list_size - 1) / 2\n        }\n        var count = 0\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                if (test_list(i) == test_list(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val list = test_list.sorted\n        var count = 0\n        for (i <- 0 until list.length) {\n            for (j <- i + 1 until list.length) {\n                if (list(i) * list(j) > 0) {\n                    val k = list.indexOf(list(i) * list(j))\n                    if (k != -1 && k > j) {\n                        count += 1\n                    }\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j) * 2) count += 1\n                if (test_list(j) == test_list(i) * 2) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length) {\n            val x = sorted_list(i)\n            val y = sorted_list(i)\n            val index = sorted_list.indexOf(y)\n            if (index != -1 && index != i) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count / 2",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) test_map(test_list(i)) += 1\n            else test_map(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (test_map(test_list(i)) > 1) {\n                result += test_map(test_list(i)) - 1\n                test_map(test_list(i)) = 1\n            }\n        }\n        result",
    "        val list = test_list.sorted\n        var count = 0L\n        for (i <- 0 until list.length - 1) {\n            val a = list(i)\n            val b = list(i + 1)\n            if (a == b) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            }\n            else map(x) = 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            val a = test_list_sorted(i)\n            for (j <- i + 1 until test_list_sorted.length) {\n                val b = test_list_sorted(j)\n                if (a * b <= 1000000) count += 1\n                else break\n            }\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length) {\n            var j = i + 1\n            while (j < sorted_list.length && sorted_list(j) <= sorted_list(i) * 2) {\n                if (sorted_list(j) == sorted_list(i) * 2) count += 1\n                j += 1\n            }\n        }\n        count"
  ]
}