{
  "name": "mbpp_438_count_bidirectional",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count bidirectional tuple pairs.\n    def countBidirectional(test_list : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            val reverse = BigInt(i).toString.reverse.toLong\n            if (test_set.contains(reverse)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            if (test_set.contains(x.toLong * x.toLong)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0L\n        for (i <- 0 until sorted_list.length) {\n            val a = sorted_list(i)\n            val b = sorted_list(sorted_list.length - 1 - i)\n            if (a == b) count += 1\n            else if (a < b) return count\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        test_list.map(x => test_set.count(_ > x)).sum",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sortWith(_ < _)\n        val count = new HashMap[Long, Long]\n        for (i <- sorted_list) {\n            if (count.contains(i)) count(i) += 1\n            else count(i) = 1\n        }\n        var result = 0L\n        for (i <- count.keys) {\n            if (count(i) > 1) result += count(i) * (count(i) - 1)\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map.contains(-i)) count += map(i) * map(-i)\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * 2)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n                test_set.remove(i)\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * 2)) count += 1\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count"
  ]
}