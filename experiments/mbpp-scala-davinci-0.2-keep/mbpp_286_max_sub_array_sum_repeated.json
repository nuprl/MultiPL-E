{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    def maxSubArraySumRepeated(a : List[Long], n : Long, k : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySumRepeated((List[Long](10l.toLong, 20l.toLong, -30l.toLong, -1l.toLong)), (4l), (3l)) == (30l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, 10l.toLong, 20l.toLong)), (3l), (2l)) == (59l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)), (3l), (3l)) == (-1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sum = a.sum\n        val maxSum = a.max\n        if (sum > 0) {\n            val maxSumRepeated = sum * k\n            if (maxSumRepeated > maxSum) maxSumRepeated else maxSum\n        } else maxSum",
    "        val sum = a.sum\n        val max = a.max\n        if (sum < 0) max\n        else sum * k",
    "        val m = a.length\n        val sum = Array.fill(m)(0L)\n        sum(0) = a(0)\n        for (i <- 1 until m) sum(i) = sum(i - 1) + a(i)\n        var max = sum(m - 1)\n        for (i <- 0 until m) {\n            val j = (i + m - 1) % m\n            val s = sum(j) - (if (i == 0) 0 else sum(i - 1))\n            val t = s * k\n            val u = if (i == 0) sum(m - 1) else sum(i - 1)\n            val v = if (j == m - 1) sum(m - 1) else sum(j + 1)\n            val w = (u + v) * (k - 1)\n            max = max(max, t + w)\n        }\n        max",
    "        val sum = a.sum\n        val max = a.max\n        if (sum > 0) {\n            val maxSum = sum * k\n            val maxSumWithRepeated = maxSum - (a.sum - max)\n            maxSumWithRepeated\n        } else max",
    "        var sum = 0L\n        var maxSum = 0L\n        for (i <- 0 until n) {\n            sum += a(i)\n        }\n        var maxSumSoFar = 0L\n        for (i <- 0 until n) {\n            maxSumSoFar += a(i)\n            if (maxSumSoFar < 0) maxSumSoFar = 0\n            else if (maxSumSoFar > maxSum) maxSum = maxSumSoFar\n        }\n        var sumSoFar = 0L\n        for (i <- 0 until n) {\n            sumSoFar += a(i)\n            if (sumSoFar < 0) sumSoFar = 0\n        }\n        if (k == 1) return maxSum\n        var ans = max(sum * k, maxSum)\n        if (sum > 0) {\n            ans = max(ans, sumSoFar + sum * (k - 2))\n        }\n        return ans",
    "        val sum = a.sum\n        val maxSum = max(a.max, sum * k)\n        val minSum = min(a.min, sum * k)\n        val maxSumRepeated = max(maxSum, (sum * (k - 2) + max(a.max, a.min * k)))\n        maxSumRepeated",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (sum < 0) maxSum\n        else {\n            val maxSumRepeated = sum * k\n            val maxSumCircular = maxSumRepeated - (a.map(x => if (x < 0) 0 else x).sum - maxSum)\n            max(maxSumRepeated, maxSumCircular)\n        }",
    "        val sum = a.sum\n        val max = a.max\n        if (max < 0) max\n        else {\n            val maxSubArraySum = maxSubArraySum(a)\n            val maxSubArraySumRepeated = maxSubArraySum * k\n            val maxSubArraySumRepeatedWithOverlap = maxSubArraySumRepeated + (sum * (k - 1))\n            max(maxSubArraySumRepeated, maxSubArraySumRepeatedWithOverlap)\n        }",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (sum < 0) maxSum\n        else {\n            val maxSumRepeated = sum * k\n            val maxSumCircular = maxSumRepeated - (a.map(x => max(0, x)).sum - maxSum)\n            max(maxSumRepeated, maxSumCircular)\n        }",
    "        val sum = a.sum\n        val max = a.max\n        if (sum < 0) max\n        else {\n            val maxSubArraySum = maxSubArraySum(a)\n            if (maxSubArraySum > 0) maxSubArraySum + (k - 1) * sum\n            else max\n        }",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (maxSum <= 0) maxSum\n        else {\n            val maxSumRepeated = max(sum * k, maxSum + sum * (k - 2))\n            maxSumRepeated\n        }",
    "        val sum = a.sum\n        val maxSum = a.max\n        val maxSumRepeated = max(sum * k, maxSum)\n        val prefixSum = a.scanLeft(0L)(_ + _).tail\n        val suffixSum = a.scanRight(0L)(_ + _).init\n        val maxPrefixSum = prefixSum.max\n        val maxSuffixSum = suffixSum.max\n        val maxPrefixSuffixSum = (0 until n.toInt).map(i => prefixSum(i) + suffixSum(i) - a(i)).max\n        val maxPrefixSuffixSumRepeated = max(maxPrefixSuffixSum, maxPrefixSum + maxSuffixSum + (k - 2) * sum, maxPrefixSum + maxSuffixSum + (k - 2) * maxSum)\n        max(maxSumRepeated, maxPrefixSuffixSumRepeated)",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (maxSum < 0) maxSum\n        else if (k == 1) maxSubArraySum(a, n)\n        else {\n            val maxSumRepeated = maxSubArraySum(a, n)\n            val maxSumRepeated2 = maxSubArraySum(a, n)\n            val maxSumRepeated3 = maxSubArraySum(a, n)\n            val maxSumRepeated4 = maxSubArraySum(a, n)\n            val maxSumRepeated5 = maxSubArraySum(a, n)\n            val maxSumRepeated6 = maxSubArraySum(a, n)\n            val maxSumRepeated7 = maxSubArraySum(a, n)\n            val maxSumRepeated8 = maxSubArraySum(a, n)\n            val maxSumRepeated9 = maxSubArraySum(a, n)\n            val maxSumRepeated10 = maxSubArraySum(a, n)\n            val maxSumRepeated11 = maxSubArraySum(a, n)\n            val maxSumRepeated12 = maxSubArraySum(a, n)\n            val maxSumRepeated13 = maxSubArraySum(a, n)\n            val maxSumRepeated14 = maxSubArraySum(a, n)\n            val maxSumRepeated15 = maxSubArraySum(a, n)\n            val maxSumRepeated16 = maxSubArraySum(a, n)\n            val maxSumRepeated17 = maxSubArraySum(a, n)\n            val maxSumRepeated18 = maxSubArraySum(a, n)\n            val maxSumRepeated19 = maxSubArraySum(a, n)\n            val maxSumRepeated20 = maxSubArraySum(a, n)\n            val maxSumRepeated21 = maxSubArraySum(a, n)\n            val maxSumRepeated22 = maxSubArraySum(a, n)\n            val maxSumRepeated23 = maxSubArraySum(a, n)\n            val maxSumRepeated24 = maxSubArraySum(a, n)\n            val maxSumRepeated25 = maxSubArraySum(a, n)\n            val maxSumRepeated26 = maxSubArraySum",
    "        val sum = a.sum\n        val maxSum = a.max\n        val maxSumRepeated = max(sum * k, maxSum)\n        val maxSumNonRepeated = max(maxSum, maxSubArraySum(a))\n        max(maxSumRepeated, maxSumNonRepeated)",
    "        val sum = a.sum\n        val max = a.max\n        if (max < 0) max else {\n            val maxSum = a.map(x => x * k).sum\n            val maxSumRepeated = a.map(x => x * (k - 1)).sum\n            val maxSumRepeated2 = a.map(x => x * (k - 2)).sum\n            val maxSumRepeated3 = a.map(x => x * (k - 3)).sum\n            val maxSumRepeated4 = a.map(x => x * (k - 4)).sum\n            val maxSumRepeated5 = a.map(x => x * (k - 5)).sum\n            val maxSumRepeated6 = a.map(x => x * (k - 6)).sum\n            val maxSumRepeated7 = a.map(x => x * (k - 7)).sum\n            val maxSumRepeated8 = a.map(x => x * (k - 8)).sum\n            val maxSumRepeated9 = a.map(x => x * (k - 9)).sum\n            val maxSumRepeated10 = a.map(x => x * (k - 10)).sum\n            val maxSumRepeated11 = a.map(x => x * (k - 11)).sum\n            val maxSumRepeated12 = a.map(x => x * (k - 12)).sum\n            val maxSumRepeated13 = a.map(x => x * (k - 13)).sum\n            val maxSumRepeated14 = a.map(x => x * (k - 14)).sum\n            val maxSumRepeated15 = a.map(x => x * (k - 15)).sum\n            val maxSumRepeated16 = a.map(x => x * (k - 16)).sum\n            val maxSumRepeated17 = a.map(x => x * (k - 17)).sum\n            val maxSumRepeated18 = a.map(x => x * (k - 18)).sum\n            val maxSumRepeated19 = a.map(x => x * (k - 19)).sum\n            val maxSumRepeated20 = a.map(x => x * (k - 20)).sum\n            val maxSumRepeated21 =",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (sum > 0) {\n            val result = (sum * k) - (a.map(x => sum - x).min)\n            if (result > maxSum) result else maxSum\n        } else maxSum",
    "        val sum = a.foldLeft(0L)(_ + _)\n        val maxSum = a.foldLeft(0L)((x, y) => max(x, x + y))\n        val minSum = a.foldLeft(0L)((x, y) => min(x, x + y))\n        if (maxSum <= 0) maxSum\n        else if (minSum >= 0) sum * k\n        else {\n            val maxPrefix = a.foldLeft(0L)((x, y) => max(x, x + y))\n            val maxSuffix = a.foldLeft(0L)((x, y) => max(x, x + y))\n            max(maxPrefix + maxSuffix, max(maxSubArraySumRepeated(a, n, k - 1), maxSubArraySumRepeated(a, n, k - 2) + sum * 2))\n        }",
    "        val sum = a.sum\n        val max = a.max\n        if (sum > 0) {\n            val maxSum = sum * k\n            if (max > 0) maxSum\n            else max(maxSum, max * k + maxSubArraySum(a, n))\n        } else max * k",
    "        val sum = a.sum\n        val maxSum = a.max\n        if (sum < 0) maxSum\n        else {\n            val maxSumRepeated = sum * k\n            val maxSumCircular = maxSumRepeated - a.map(x => if (x < 0) x else 0).sum\n            max(maxSumRepeated, maxSumCircular)\n        }",
    "        val sum = a.sum\n        val maxSum = a.max\n        val maxSumRepeated = max(sum * k, maxSum)\n        val maxSumSubArray = maxSubArraySum(a, n)\n        max(maxSumRepeated, maxSumSubArray)"
  ]
}