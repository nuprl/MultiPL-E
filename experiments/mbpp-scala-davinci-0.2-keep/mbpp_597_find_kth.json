{
  "name": "mbpp_597_find_kth",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted arrays.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt)\n            if (arr2.length == 0) return arr1(k.toInt)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val i = min(k / 2, arr1.length)\n            val j = min(k / 2, arr2.length)\n            if (arr1(i - 1) < arr2(j - 1)) findKthRec(arr1.drop(i), arr2, k - i)\n            else findKthRec(arr1, arr2.drop(j), k - j)\n        }\n        findKthRec(arr1, arr2, k)",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val k1 = min(k / 2, arr1.length).toInt\n            val k2 = min(k / 2, arr2.length).toInt\n            if (arr1(k1 - 1) < arr2(k2 - 1)) findKth(arr1.drop(k1), arr2, k - k1)\n            else findKth(arr1, arr2.drop(k2), k - k2)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, k / 2).toInt\n        val mid2 = min(arr2.length, k / 2).toInt\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        else if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val i = min(k / 2, arr1.length).toInt\n            val j = min(k / 2, arr2.length).toInt\n            if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n            else findKth(arr1.slice(i, arr1.length), arr2, k - i)\n        }",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i == arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j == arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Int, j : Int) : Long = {\n            if (i >= arr1.length) return arr2(j + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i + k.toInt - 1)\n            if (k == 1) return min(arr1(i), arr2(j))\n            val mid1 = if (i + k.toInt / 2 - 1 < arr1.length) arr1(i + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k.toInt / 2 - 1 < arr2.length) arr2(j + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k.toInt / 2, i + k.toInt / 2, j)\n            else findKth(arr1, arr2, k - k.toInt / 2, i, j + k.toInt / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) <= arr2(mid2)) {\n            findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(k / 2, arr1.length).toInt\n        val j = min(k / 2, arr2.length).toInt\n        if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.slice(i, arr1.length), arr2, k - i)\n        else findKth(arr1, arr2.slice(j, arr2.length), k - j)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length > arr2.length) findKthRec(arr2, arr1, k)\n            else if (arr1.length == 0) arr2(k.toInt - 1)\n            else if (k == 1) min(arr1(0), arr2(0))\n            else {\n                val i = min(k / 2, arr1.length).toInt\n                val j = min(k / 2, arr2.length).toInt\n                if (arr1(i - 1) > arr2(j - 1)) findKthRec(arr1, arr2.drop(j), k - j)\n                else findKthRec(arr1.drop(i), arr2, k - i)\n            }\n        }\n        findKthRec(arr1, arr2, k)",
    "        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt - 1)\n            if (arr2.length == 0) return arr1(k.toInt - 1)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val i = min(k / 2, arr1.length)\n            val j = min(k / 2, arr2.length)\n            if (arr1(i - 1) < arr2(j - 1)) findKthRec(arr1.drop(i), arr2, k - i)\n            else findKthRec(arr1, arr2.drop(j), k - j)\n        }\n        findKthRec(arr1, arr2, k)"
  ]
}