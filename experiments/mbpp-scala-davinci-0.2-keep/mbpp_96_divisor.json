{
  "name": "mbpp_96_divisor",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var divisors = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) divisors += 1\n        }\n        divisors",
    "        var count = 0\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                if (i == sqrt(n).toInt) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2"
  ]
}