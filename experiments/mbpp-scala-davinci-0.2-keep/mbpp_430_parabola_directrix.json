{
  "name": "mbpp_430_parabola_directrix",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return -a / b",
    "        -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -b / (2 * a)",
    "        // The directrix is the line perpendicular to the axis of symmetry and passing through the focus.\n        // The focus is the point (b, c) and the axis of symmetry is the line y = -a/2.\n        // The directrix is the line y = -a/2 - sqrt(b^2 - 4ac)/2a.\n        return -a / 2 - sqrt(b * b - 4 * a * c) / (2 * a)",
    "        -(a * a) / (4 * b) + c",
    "        return -c / b",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(b * b) / (4 * a) + c",
    "        return -a / b",
    "        return -4 * a * c / b",
    "        return -b/(2*a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a + b * b) / (4 * a) + c",
    "        -a / 2",
    "        return -(4 * a * c) / b",
    "        -a / b",
    "        -a / b",
    "        return -a / b",
    "        return -a / b",
    "        -(b * b) / (4 * a) + c",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        val d = (4 * a * c - b * b).toDouble\n        if (d < 0) throw new Exception(\"No directrix\")\n        else if (d == 0) -b / (2 * a)\n        else -b / (2 * a) + sqrt(d) / (2 * a)",
    "        return -b / (2 * a)",
    "        -(a * a) / (4 * b) + c",
    "        -(a * a * a * c + a * b * b * b - 3 * a * a * b * c) / (a * a)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val d = -y / a\n        return d",
    "        val d = -(a * a + b * b) / (4 * a)\n        if (d < 0) -d else d",
    "        return -a / b",
    "        return -b / (2 * a)",
    "        -(b * b) / (4 * a) + c",
    "        return -4 * a * c / b",
    "        -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        -b / (2 * a)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        return -a / b",
    "        -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(4 * a * c) / b",
    "        return -b / (2 * a)",
    "        -(a * a * a * c + a * b * b * b - 3 * a * a * b * c) / (3 * a * a)",
    "        return -b / (2 * a)",
    "        return -(4 * a * c) / (b * b)",
    "        -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -(b * b) / (4 * a) + c",
    "        -a / b",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -a / b",
    "        return -b / (2 * a)",
    "        return -a / b",
    "        return -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        return -4 * a * c / b",
    "        -a / b",
    "        -(4 * a * c) / (b * b)",
    "        return -(4 * a * c) / (b * b)",
    "        val d = (a * a) / (4 * b)\n        return -(c + d) / b",
    "        -a / b",
    "        -a / b",
    "        return -b / (2 * a)",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -(b * b) / (4 * a) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -b / (2 * a)",
    "        return -(4 * a * c) / (b * b)",
    "        -a / b",
    "        val d = b * b - 4 * a * c\n        if (d < 0) -1\n        else if (d == 0) -b / (2 * a)\n        else {\n            val x1 = (-b + sqrt(d)) / (2 * a)\n            val x2 = (-b - sqrt(d)) / (2 * a)\n            if (x1 > x2) x1 else x2\n        }",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        val d = -(a * a + b * b) / (4 * a)\n        return d",
    "        val d = 2 * a\n        return -b / d",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        return -(b * b - 4 * a * c) / (4 * a)",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        -a / b",
    "        -(a * a * a * c - a * a * b * b + a * b * b * b) / (2 * a * c - 2 * b * b)",
    "        return -(4 * a * c) / (b * b)",
    "        -a / b",
    "        return -a / b",
    "        return -a / b",
    "        return -c / b",
    "        return -b / (2 * a)",
    "        -a / b",
    "        return -b / (2 * a)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        -a / b",
    "        -a / b",
    "        return -a / b",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val m = -a / b\n        val k = y - m * x\n        val x1 = -k / (m + 1 / m)\n        val y1 = m * x1 + k\n        val x2 = -k / (m - 1 / m)\n        val y2 = m * x2 + k\n        val d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\n        val x3 = x1 + (x2 - x1) * d / (d + 1)\n        val y3 = y1 + (y2 - y1) * d / (d + 1)\n        val x4 = x2 + (x1 - x2) * d / (d + 1)\n        val y4 = y2 + (y1 - y2) * d / (d + 1)\n        val m1 = (y4 - y3) / (x4 - x3)\n        val k1 = y3 - m1 * x3\n        val x5 = -k1 / (m1 + 1 / m1)\n        val y5 = m1 * x5 + k1\n        val x6 = -k1 / (m1 - 1 / m1)\n        val y6 = m1 * x6 + k1\n        val d1 = sqrt((x5 - x6) * (x5 - x6) + (y5 - y6) * (y5 - y6))\n        val x7 = x5 + (x6 - x5) * d1 / (d1 + 1)\n        val y7 = y5 + (y6 - y5) * d1 / (d1 + 1)\n        val x8 = x6 + (x5 - x6) * d1 / (d1 + 1)\n        val y8 = y6 + (y5 - y6) * d1 / (d1 + 1)\n        val m2 = (y8 - y7) / (x8 - x7)\n        val k2 = y7 -",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -a / b",
    "        -a / b",
    "        return -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        val d = -(a * a + b * b) / (4 * a)\n        return d",
    "        return -a / b",
    "        return -a / b",
    "        return -a / b",
    "        -a / b",
    "        -b / (2 * a)",
    "        -a / b",
    "        return -a / b",
    "        -b / (2 * a)",
    "        return -a * a / (4 * b) + c",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -a / b",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -b / (2 * a)",
    "        return -(4 * a * c) / (b * b)",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -a / b",
    "        -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        -a / b",
    "        -a / b",
    "        return -(b * b) / (4 * a) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -4 * a * c / b",
    "        -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -a / b",
    "        return -a / b",
    "        val d = -b / (2 * a)\n        val k = c - a * d * d\n        return -k / d",
    "        return -b / (2 * a)",
    "        return -(a * a + b * b) / (2 * c)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        return y - sqrt(b * b - 4 * a * c)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -b / a\n        val d = y - k * x\n        return -d / a",
    "        return -(a * a) / (4 * b) + c",
    "        -(b * b - 4 * a * c) / (4 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -(4 * a * c) / (b * b)",
    "        -(a * a) / (4 * b) + c",
    "        return -c / b",
    "        return -a / b",
    "        -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        val d = (a * a + b * b) / (2 * a)\n        -(c - d) / b",
    "        val d = (a * a) / 4\n        val e = b * b\n        val f = c * c\n        val g = d + e + f\n        val h = sqrt(g)\n        val i = b + h\n        val j = i / a\n        val k = -j\n        return k",
    "        -(a * a) / (4 * b) + c",
    "        return -(b * b) / (4 * a) + c",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -4 * a * c / b",
    "        -a / b",
    "        val d = -4 * a * c\n        val e = b * b\n        val f = d + e\n        if (f < 0) throw new Exception(\"No real solution\")\n        val g = sqrt(f)\n        val h = -b + g\n        val i = 2 * a\n        val j = h / i\n        j.toLong",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        val x1 = -b / (2 * a)\n        val y1 = a * x1 * x1 + b * x1 + c\n        val k1 = -a / b\n        val d1 = y1 - k1 * x1\n        val x2 = -b / (2 * a)\n        val y2 = a * x2 * x2 + b * x2 + c\n        val k2 = -a / b\n        val d2 = y2 - k2 * x2\n        val x3 = -b / (2 * a)\n        val y3 = a * x3 * x3 + b * x3 + c\n        val k3 = -a / b\n        val d3 = y3 - k3 * x3\n        val x4 = -b / (2 * a)\n        val y4 = a * x4 * x4 + b * x4 + c\n        val k4 = -a / b\n        val d4 = y4 - k4 * x4\n        val x5 = -b / (2 * a)\n        val y5 = a * x5 * x5 + b * x5 + c\n        val k5 = -a / b\n        val d5 = y5 - k5 * x5\n        val x6 = -b / (2 * a)\n        val y6 = a * x6 * x6 + b * x6 + c\n        val k6 = -a / b\n        val d6 = y6 - k6 * x6\n        val x7 = -b / (2 * a)\n        val y7 = a * x7 * x7 + b * x7 + c\n        val k7 = -a / b\n        val d7 = y7 - k7 * x7\n        val x8 = -b / (2 * a)\n        val y8 = a * x8 * x8 + b * x8 + c\n        val k8 = -a / b\n        val d8 = y8 - k8 * x8",
    "        return -a / b",
    "        return -a / b",
    "        return -b / (2 * a)",
    "        return -4 * a * c / b",
    "        return -a / b",
    "        -b / (2 * a)",
    "        return -a / b",
    "        return -b / (2 * a)",
    "        return -a / b"
  ]
}