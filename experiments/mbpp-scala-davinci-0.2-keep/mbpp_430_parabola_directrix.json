{
  "name": "mbpp_430_parabola_directrix",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return -a / b",
    "        -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -b / (2 * a)",
    "        // The directrix is the line perpendicular to the axis of symmetry and passing through the focus.\n        // The focus is the point (b, c) and the axis of symmetry is the line y = -a/2.\n        // The directrix is the line y = -a/2 - sqrt(b^2 - 4ac)/2a.\n        return -a / 2 - sqrt(b * b - 4 * a * c) / (2 * a)",
    "        -(a * a) / (4 * b) + c",
    "        return -c / b",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -(b * b) / (4 * a) + c",
    "        return -a / b",
    "        return -4 * a * c / b",
    "        return -b/(2*a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a + b * b) / (4 * a) + c",
    "        -a / 2",
    "        return -(4 * a * c) / b",
    "        -a / b",
    "        -a / b"
  ]
}