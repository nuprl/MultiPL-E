{
  "name": "mbpp_273_substract_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    def substractElements(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(substractElements((10l, 4l, 5l), (2l, 5l, 18l)) == (8l, -1l, -13l));\n    assert(substractElements((11l, 2l, 3l), (24l, 45l, 16l)) == (-13l, -43l, -13l));\n    assert(substractElements((7l, 18l, 9l), (10l, 11l, 12l)) == (-3l, 7l, -3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        val result = test_tup1 - test_tup2\n        return result",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2"
  ]
}