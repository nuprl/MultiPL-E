{
  "name": "mbpp_72_dif_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var x = sqrt(n).toLong\n        while (x > 0) {\n            if (x * x == n) return true\n            x -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i <= n) {\n            val j = n - i * i\n            if (j < 0) return false\n            if (j == 0) return true\n            if (j == i * i) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            if (sq == n) return true\n            else if (sq < n) {\n                val sq2 = (sqrt + 1) * (sqrt + 1)\n                if (sq2 == n) return true\n                else if (sq2 < n) return false\n            }\n            sqrt -= 1\n        }\n        false",
    "        var i = 0\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i).toLong == sqrt(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = sqrt(n).toInt\n        while (i > 0) {\n            if (i * i == n) return true\n            i -= 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            var sq = sqrt * sqrt\n            if (sq < n) {\n                var sq2 = sqrt * sqrt\n                while (sq2 < n) {\n                    if (sq + sq2 == n) return true\n                    sq2 += 2 * sqrt + 1\n                }\n            }\n            sqrt -= 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        var i = 1\n        while (i <= sqrt) {\n            var j = 1\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        if (n < 0) return false\n        var i = 0\n        while (i * i <= n) {\n            var j = 0\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var s = sqrt(n).toLong\n        while (s * s > n) s -= 1\n        while (s * s < n) s += 1\n        return s * s == n",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toInt\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        var i = sqrtN\n        while (i > 0) {\n            var sq = i * i\n            var diff = n - sq\n            var sqrtDiff = sqrt(diff).toLong\n            if (sqrtDiff * sqrtDiff == diff) return true\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i <= sqrt(n)) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i >= 0) {\n            if (i * i == n) return true\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var m = sqrt(n / 2).toLong\n        while (m > 0) {\n            if (m * m + (n - m * m) == n) return true\n            m -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            if (sq * 2 == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var s = sqrt(n).toLong\n        while (s > 0) {\n            if (s * s == n) return true\n            s -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j + i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            val dif = n - sq\n            val difSqrt = sqrt(dif).toLong\n            if (difSqrt * difSqrt == dif) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n + i * i)\n            if (j == j.toInt) return true\n            i += 1\n        }\n        return false",
    "        if (n < 0) return false\n        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val difSqrt = sqrt(dif).toLong\n            if (difSqrt * difSqrt == dif) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (i * i + (n - i * i) * (n - i * i) == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            if (sqrt(n + i * i).toLong == sqrt(n + i * i)) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i <= sqrt(n)) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i >= 1) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val m = sqrt(n).toLong\n        for (i <- 1 to m) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            val sq = sqrt * sqrt\n            val dif = n - sq\n            val sqrt2 = sqrt(dif).toLong\n            if (sqrt2 * sqrt2 == dif) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val m = sqrt(n).toLong\n        for (i <- 1 to m) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        if (n < 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        if (n == 0) return true\n        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        return false",
    "        var r = sqrt(n).toLong\n        if (r * r == n) return true\n        var i = 1\n        while (i <= r) {\n            var j = 1\n            while (j <= r) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (Math.sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i <= sqrt(n)) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        if (n < 0) return false\n        var i = 1L\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        if (sqrtN * sqrtN == n) return true\n        for (i <- 1 to sqrtN) {\n            var sqrtDiff = sqrt(n + i * i).toLong\n            if (sqrtDiff * sqrtDiff == n + i * i) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq * sq + n == 0) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            var sq2 = sqrt(n - sq).toInt\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        if (n < 0) return false\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        var i = 0\n        while (i <= sqrt) {\n            var j = 0\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var s = sqrt(n).toLong\n        while (s * s > n) s -= 1\n        while (s * s < n) s += 1\n        return s * s == n",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            var sq = sqrt * sqrt\n            if (sq < n) {\n                var sq2 = sqrt * sqrt\n                while (sq2 < n) {\n                    if (sq + sq2 == n) return true\n                    sq2 += 2 * sqrt + 1\n                }\n            }\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        if (n < 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i <= n) {\n            if (i * i > n) return false\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val x = i * i\n            val y = n + x\n            val sqrt2 = sqrt(y).toLong\n            if (sqrt2 * sqrt2 == y) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1L to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            if (sqSquare(n - sq)) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        while (sqrtN * sqrtN > n) sqrtN -= 1\n        while (sqrtN * sqrtN < n) sqrtN += 1\n        return sqrtN * sqrtN == n",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false",
    "        var m = sqrt(n).toLong\n        while (m * m > n) m -= 1\n        while (m * m < n) m += 1\n        return m * m == n",
    "        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        if (n < 0) return false\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toInt\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = (n + sq) / 2\n            val sq3 = (n - sq) / 2\n            if (sq2 * sq2 == sq3 * sq3) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var x = sqrt(n / 2).toLong\n        while (x > 0) {\n            if (x * x + (n - x * x) * (n - x * x) == n) return true\n            x -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1 to sqrt) {\n            var j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var x = sqrt(n).toLong\n        while (x * x > n) x -= 1\n        while (x * x < n) x += 1\n        return x * x == n",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            val sq2 = sqrt(n + sq).toLong\n            if (sq2 * sq2 == n + sq) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = 1\n        while (i <= sqrt) {\n            if (sqrt * sqrt == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false",
    "        var sq = sqrt(n).toLong\n        if (sq * sq == n) return true\n        for (i <- 1 to sq.toInt) {\n            var j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val x = sqrt - i\n            val y = sqrt + i\n            if (x * x - y * y == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toInt\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        var x = 1L\n        while (x * x < n) {\n            val y = sqrt(n - x * x)\n            if (y == y.toInt) return true\n            x += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var x = sqrt(n).toLong\n        while (x > 0) {\n            if (x * x == n) return true\n            x -= 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            var sq = i * i\n            if (sq > n) return false\n            var dif = n - sq\n            var sqrt2 = sqrt(dif).toInt\n            if (sqrt2 * sqrt2 == dif) return true\n        }\n        return false",
    "        var i = 0\n        while (i * i <= n) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false"
  ]
}