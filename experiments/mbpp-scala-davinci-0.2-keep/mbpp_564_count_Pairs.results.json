{
  "name": "mbpp_564_count_Pairs",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwrvjwl3i.scala:17)\n\tat Problem.main(tmpwrvjwl3i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n - 1) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmiq40lss.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmiq40lss.scala:8:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m to n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               Found:    Long\n\u001b[31m  |\u001b[0m                               Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclqznemj.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclqznemj.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1L until n) {\n                if (arr(i.toInt) != arr(j.toInt)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1)\n            if (map.contains(i + 1)) count += map(i) * map(i + 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm7e0hn6j.scala:19)\n\tat Problem.main(tmpm7e0hn6j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map += (arr(i.toInt) -> 1)\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy9bg1urh.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val m = arr.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- arr) {\n            if (m.contains(i)) {\n                count += m(i) - 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjbulz9wc.scala:17)\n\tat Problem.main(tmpjbulz9wc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1u7j1_b.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1)\n        }\n        count / 2\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zy0_7_j.scala:18)\n\tat Problem.main(tmp_zy0_7_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val count = Array.fill[Long](n.toInt + 1)(0)\n        for (i <- 0 until arr.length) {\n            count(arr(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until count.length) {\n            result += count(i) * (count(i) - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp373g42li.scala:17)\n\tat Problem.main(tmp373g42li.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i.toInt) != arr(j.toInt)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jpe186b.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jpe186b.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val m = new HashMap[Long, Long]()\n        for (i <- 0 until n) {\n            if (m.contains(arr(i.toInt))) m(arr(i.toInt)) += 1\n            else m += (arr(i.toInt) -> 1)\n        }\n        var ans = 0L\n        for (i <- m.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl60hiebu.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2b1eex2.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphsv1w5r4.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphsv1w5r4.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n; j <- i + 1 until n) {\n            if (arr(i) != arr(j)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxewgnpb0.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n; j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxewgnpb0.scala:7:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n; j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var count = 0L\n        for (i <- m.keys) {\n            if (m(i) > 1) {\n                count += m(i) * (m(i) - 1)\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpircvkcj0.scala:21)\n\tat Problem.main(tmpircvkcj0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i.toInt) != arr(j.toInt)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx00a5j5m.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx00a5j5m.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmbyzdx3.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagrc5ijn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1L until n) {\n                if (arr(i.toInt) != arr(j.toInt)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i.toInt) != arr(j.toInt)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jpe186b.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jpe186b.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpie1tjp3d.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpie1tjp3d.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptci0_u57.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j && arr(i.toInt) != arr(j.toInt)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprtsyjc1o.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprtsyjc1o.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_92my_bn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_92my_bn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lnbhvtd.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpie1tjp3d.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpie1tjp3d.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lnbhvtd.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1x82r3d.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1x82r3d.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqvz_er_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_92my_bn.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_92my_bn.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpca_u36pf.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) {\n                count += map(arr(i.toInt))\n                map(arr(i.toInt)) += 1\n            }\n            else {\n                map(arr(i.toInt)) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_bf1_ol.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    Long\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26ahfe_v.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o4v46g5.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122689,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppg5qh_md.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkr1j_330.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhsovy6u.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhsovy6u.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvugdkatx.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvugdkatx.scala:8:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (n : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63fx22g7.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until n) for (j <- i + 1 until n) if (arr(i) != arr(j)) count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_a70tkv.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) \u001b[33mif\u001b[0m (arr(i) != arr(j)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_a70tkv.scala:7:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) \u001b[33mif\u001b[0m (arr(i) != arr(j)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                                                   Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666122688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mkvcqhp.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (n : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}