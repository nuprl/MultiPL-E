{
  "name": "mbpp_256_count_Primes_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6807pkw6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n            while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2) == 0) return false\n                i += 6\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517503,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzabu5rkh.scala:24)\n\tat Problem.main(tmpzabu5rkh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for (i <- 3 to n by 2) {\n            var isPrime = true\n            for (j <- 0 until primes.length) {\n                if (i % primes(j) == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        return primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_65m997.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_65m997.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmryly92.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmryly92.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio0jlm_q.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39oc9w3i.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m until n) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (n : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp39oc9w3i.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6807pkw6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        val primes = Array.fill(n.toInt)(true)\n        for (i <- 2 to sqrt(n).toInt) {\n            if (primes(i)) {\n                for (j <- i * i to n.toInt by i) {\n                    primes(j) = false\n                }\n            }\n        }\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (primes(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5\n\tat Problem$.countPrimesNums$$anonfun$2(tmpj0cp7dwr.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.countPrimesNums(tmpj0cp7dwr.scala:18)\n\tat Problem$.main(tmpj0cp7dwr.scala:22)\n\tat Problem.main(tmpj0cp7dwr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        val primes = new Array[Boolean](n.toInt)\n        for (i <- 0 until n.toInt) primes(i) = true\n        for (i <- 2 until sqrt(n).toInt) {\n            if (primes(i)) {\n                for (j <- i*i until n.toInt by i) {\n                    primes(j) = false\n                }\n            }\n        }\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (primes(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphin7mme0.scala:23)\n\tat Problem.main(tmphin7mme0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1i_conxx.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4a189t9r.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpugsvr5xr.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) primes += i\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for (i <- 3 to n.toInt by 2) {\n            var isPrime = true\n            for (p <- primes) {\n                if (i % p == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        return primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5cgrrwg1.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6807pkw6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n            while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2) == 0) return false\n                i += 6\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp470peh5x.scala:24)\n\tat Problem.main(tmp470peh5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp02fti3tp.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkhg7xtel.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxw2nhdqn.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        val sieve = Array.fill(n.toInt)(true)\n        sieve(0) = false\n        sieve(1) = false\n        for (i <- 2 until n.toInt) {\n            if (sieve(i)) {\n                var j = i * 2\n                while (j < n.toInt) {\n                    sieve(j) = false\n                    j += i\n                }\n            }\n        }\n        sieve.count(x => x)\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl9l0iige.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphbhwmgpy.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjevs3opi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4a189t9r.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        val primes = new ArrayBuffer[Long]\n        primes += 2\n        var i = 3\n        while (i < n) {\n            var isPrime = true\n            for (prime <- primes) {\n                if (i % prime == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n            i += 2\n        }\n        primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuhq3f3g1.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9a4p_dx3.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmryly92.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphbhwmgpy.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69sk2y8r.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphbhwmgpy.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        val primes = new ArrayBuffer[Long]()\n        for (i <- 2L until n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.size\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpglha9rg_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) primes += i\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1i_conxx.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl9l0iige.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6807pkw6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpouwz2jey.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmryly92.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc4oqr_gl.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6807pkw6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        val primes = new ArrayBuffer[Long]\n        primes += 2\n        for (i <- 3 to n.toInt by 2) {\n            var isPrime = true\n            for (prime <- primes) {\n                if (i % prime == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wcgw0kp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl9l0iige.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            var isPrime = true\n            for (j <- 2 until i) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp53pfhi1o.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpznk9p8uv.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgbd87weh.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4a189t9r.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmryly92.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd2r2fgi.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to n by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (n : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppd2r2fgi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdaclw_e_.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjevs3opi.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x0zj3ee.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp72n_8on.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeagwq0b9.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphbhwmgpy.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7sg9r_g.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1i_conxx.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for (i <- 3 to n.toInt by 2) {\n            if (isPrime(i)) primes += i\n        }\n        primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_89cba2.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) primes += i\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
      "timestamp": 1665517502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsxepsap_.scala:8:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(i)) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPrime\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}