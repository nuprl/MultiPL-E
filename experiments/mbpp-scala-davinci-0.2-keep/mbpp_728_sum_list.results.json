{
  "name": "mbpp_728_sum_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        else if (lst2.isEmpty) return lst1\n        else return (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else if (lst1.length == 0) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else if (lst1.length == 0) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be the same length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        (lst1, lst2) match {\n            case (Nil, _) => Nil\n            case (_, Nil) => Nil\n            case (x :: xs, y :: ys) => (x + y) :: sumList(xs, ys)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n        return lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of the same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) {\n                result = result :+ (lst1(i) + lst2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) Nil\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        val lst = ListBuffer[Long]()\n        for (i <- 0 until lst1.length) lst += lst1(i) + lst2(i)\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        else if (lst1.length == 0) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of same length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else if (lst1.length == 0) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of same length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists are not of the same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else if (lst1.length == 0) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var lst = List[Long]()\n        for (i <- 0 until lst1.length) lst = lst :+ (lst1(i) + lst2(i))\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        if (lst1.length == 0) return List()\n        return (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        (lst1 zip lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var lst = List[Long]()\n        for (i <- 0 until lst1.length) lst = lst :+ (lst1(i) + lst2(i))\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var lst = List[Long]()\n            for (i <- 0 until lst1.length) lst = lst :+ (lst1(i) + lst2(i))\n            lst\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        (lst1, lst2) match {\n            case (Nil, _) => Nil\n            case (_, Nil) => Nil\n            case (x :: xs, y :: ys) => (x + y) :: sumList(xs, ys)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        (lst1, lst2) match {\n            case (Nil, Nil) => Nil\n            case (x :: xs, y :: ys) => (x + y) :: sumList(xs, ys)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        if (lst1.length == 0) return List()\n        return (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else if (lst1.length == 0) return List()\n        else return List(lst1.head + lst2.head) ::: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var lst = List[Long]()\n        for (i <- 0 until lst1.length) {\n            lst = lst :+ (lst1(i) + lst2(i))\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) return List()\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length.\")\n        else {\n            var sumLst = List[Long]()\n            for (i <- 0 until lst1.length) {\n                sumLst = sumLst :+ (lst1(i) + lst2(i))\n            }\n            sumLst\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) return List[Long]()\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length.\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.size != lst2.size) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) {\n                result = result :+ (lst1(i) + lst2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = (lst1(i) + lst2(i)) :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else (lst1 zip lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var lst = List[Long]()\n        for (i <- 0 until lst1.length) {\n            lst = lst :+ (lst1(i) + lst2(i))\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) {\n                result = result :+ (lst1(i) + lst2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of same length\")\n        else if (lst1.length == 0) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var lst = List[Long]()\n        for (i <- 0 until lst1.length) {\n            lst = lst :+ (lst1(i) + lst2(i))\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else if (lst1.length == 0) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else if (lst1.length == 0) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else if (lst1.length == 0) List()\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must have the same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) {\n                result = result :+ (lst1(i) + lst2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        List(lst1.head + lst2.head) ::: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        else (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of same length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty || lst2.isEmpty) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists are not of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        var sum = List[Long]()\n        for (i <- 0 until lst1.length) sum ::= lst1(i) + lst2(i)\n        return sum.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        (lst1, lst2) match {\n            case (Nil, _) => Nil\n            case (_, Nil) => Nil\n            case (x :: xs, y :: ys) => (x + y) :: sumList(xs, ys)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        else (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        (lst1, lst2) match {\n            case (Nil, Nil) => Nil\n            case (x :: xs, y :: ys) => (x + y) :: sumList(xs, ys)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) result = (lst1(i) + lst2(i)) :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        return (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.size != lst2.size) throw new Exception(\"Lists must be of same length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        (lst1, lst2).zipped.map(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until lst1.length) result = result :+ (lst1(i) + lst2(i))\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be the same length\")\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until lst1.length) {\n            result = result :+ (lst1(i) + lst2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of the same length\")\n        else if (lst1.length == 0) Nil\n        else lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be the same length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n        (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length.\")\n        else if (lst1.length == 0) return List()\n        else return lst1.head + lst2.head :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of the same length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        lst1.zip(lst2).map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n        else (lst1.head + lst2.head) :: sumList(lst1.tail, lst2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        if (lst1.length != lst2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var lst = List[Long]()\n            for (i <- 0 until lst1.length) {\n                lst = lst :+ (lst1(i) + lst2(i))\n            }\n            lst\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}