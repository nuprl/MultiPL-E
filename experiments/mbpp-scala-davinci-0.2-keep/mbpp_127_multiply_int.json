{
  "name": "mbpp_127_multiply_int",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        var result = 0L\n        if (a < 0) {\n            a = -a\n            if (b < 0) {\n                b = -b\n                while (a > 0) {\n                    result += b\n                    a -= 1\n                }\n            } else {\n                while (a > 0) {\n                    result -= b\n                    a -= 1\n                }\n            }\n        } else {\n            if (b < 0) {\n                b = -b\n                while (a > 0) {\n                    result -= b\n                    a -= 1\n                }\n            } else {\n                while (a > 0) {\n                    result += b\n                    a -= 1\n                }\n            }\n        }\n        result",
    "        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y + y + y + y + y + y\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y + y + y + y + y + y + y + y + y + y + y",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (y > x) multiplyInt(y, x)\n        else {\n            val z = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) z + z\n            else z + z + x\n        }",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half << 1\n            else half + half + x\n        }",
    "        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y << 1 + y << 2\n        if (y == 6) return x << 1 + x << 2\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y << 2 + y << 2\n        if (y == 12) return x << 2 + x << 2\n        if (x == 13) return y + y + y + y + y + y + y + y + y",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (y == 0) return 0\n        if (y == 1) return x\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        return x + multiplyInt(x + x, (y - 1) / 2)",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }",
    "        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)",
    "        if (y == 0) 0\n        else if (y < 0) -(x + multiplyInt(x, -y - 1))\n        else x + multiplyInt(x, y - 1)",
    "        if (x == 0 || y == 0) return 0\n        val (x1, y1) = if (x < 0) (-x, y) else (x, y)\n        val (x2, y2) = if (y < 0) (x1, -y1) else (x1, y1)\n        val (x3, y3) = if (x2 < y2) (x2, y2) else (y2, x2)\n        val (x4, y4) = if (x3 == 1) (x3, y3) else (x3 >> 1, y4 << 1)\n        val (x5, y5) = if (x4 % 2 == 0) (x4, y5) else (x4 - 1, y5 + y4)\n        val (x6, y6) = if (x5 == 0) (x5, y6) else (x5, multiplyInt(x5, y5))\n        if (x < 0) -y6 else y6",
    "        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) a = -x\n        if (y < 0) b = -y\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        if (x < 0 && y < 0) result else if (x < 0 || y < 0) -result else result",
    "        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val z = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) z + z\n            else z + z + x\n        }",
    "        var sum = 0L\n        var i = 0\n        while (i < y) {\n            sum += x\n            i += 1\n        }\n        sum",
    "        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y + y\n        else if (y == 2) x + x\n        else if (x % 2 == 0) multiplyInt(x / 2, y + y)\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x, y - 1)",
    "        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)",
    "        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val (x1, y1) = if (x > y) (x, y) else (y, x)\n        var result = 0L\n        for (i <- 1 to y1.toInt) {\n            result += x1\n        }\n        result"
  ]
}