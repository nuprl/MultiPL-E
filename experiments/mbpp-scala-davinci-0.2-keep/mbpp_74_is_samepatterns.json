{
  "name": "mbpp_74_is_samepatterns",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether it follows the sequence given in the patterns array.\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"green\")), (List[String](\"a\", \"b\", \"b\"))) == (true));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\", \"b\"))) == (false));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\"))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (patterns(i) == \"any\") continue\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        var i = 0\n        var j = 0\n        while (i < colors.length && j < patterns.length) {\n            if (colors(i) == patterns(j)) {\n                i += 1\n                j += 1\n            } else {\n                i += 1\n            }\n        }\n        if (j == patterns.length) true else false",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until patterns.length) {\n            if (colors(i) != patterns(i) && patterns(i) != \"*\") return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        var i = 0\n        var j = 0\n        while (i < colors.length && j < patterns.length) {\n            if (colors(i) == patterns(j)) {\n                j += 1\n            }\n            i += 1\n        }\n        return j == patterns.length",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        var i = 0\n        var j = 0\n        var result = true\n        while(i < colors.length && j < patterns.length) {\n            if(colors(i) == patterns(j)) {\n                i += 1\n                j += 1\n            } else {\n                i += 1\n            }\n        }\n        if(j != patterns.length) result = false\n        return result",
    "        var i = 0\n        var j = 0\n        while (i < colors.length && j < patterns.length) {\n            if (colors(i) == patterns(j)) {\n                i += 1\n                j += 1\n            }\n            else i += 1\n        }\n        if (j == patterns.length) true else false",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true"
  ]
}