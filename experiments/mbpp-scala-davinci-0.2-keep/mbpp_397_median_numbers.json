{
  "name": "mbpp_397_median_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid - 1) + sortedList(mid)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val median = sorted(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0\n        if (middle == median) middle.toFloat\n        else median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val l = List(a, b, c).sorted\n        if (l.length % 2 == 0) (l(l.length / 2) + l(l.length / 2 - 1)) / 2.0f\n        else l(l.length / 2)",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0\n        if (middle == median) middle.toFloat\n        else median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        list.sortWith(_ < _).apply(1)",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f",
    "        if (a <= b && b <= c) (b.toFloat)\n        else if (a <= c && c <= b) (c.toFloat)\n        else if (b <= a && a <= c) (a.toFloat)\n        else if (b <= c && c <= a) (c.toFloat)\n        else if (c <= a && a <= b) (a.toFloat)\n        else (b.toFloat)",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val l = List(a, b, c)\n        val sorted = l.sorted\n        val mid = sorted(1)\n        return mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            val mid = sorted.length / 2\n            (sorted(mid - 1) + sorted(mid)) / 2.0f\n        } else {\n            sorted(sorted.length / 2)\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) {\n            (list(list.size / 2 - 1) + list(list.size / 2)).toFloat / 2\n        } else {\n            list(list.size / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        else sorted(sorted.length / 2).toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        val median = list(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            return (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        }\n        return list(list.length / 2)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        return median",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        list.sorted.apply(1)",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0\n        if (middle == median) middle.toFloat\n        else median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }",
    "        val x = Array(a, b, c)\n        x.sorted.apply(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val sorted = List(a, b, c).sorted\n        sorted(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val numbers = List(a, b, c).sorted\n        numbers(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        } else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length / 2)",
    "        val x = List(a, b, c)\n        val y = x.sorted\n        (y(1) + y(2)) / 2.0f",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            val mid = sorted.length / 2\n            (sorted(mid) + sorted(mid - 1)) / 2.0f\n        } else {\n            sorted(sorted.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList.length / 2\n        if (sortedList.length % 2 == 0) {\n            (sortedList(mid - 1) + sortedList(mid)).toFloat / 2\n        } else {\n            sortedList(mid).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        val median = list(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        return middle.toFloat",
    "        val sorted = List(a, b, c).sorted\n        (sorted(0) + sorted(1) + sorted(2)) / 3.0f",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2).toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val middle = sortedList.length / 2\n            (sortedList(middle - 1) + sortedList(middle)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }",
    "        var list = List(a, b, c)\n        list = list.sorted\n        list(1)",
    "        val x = List(a, b, c)\n        x.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val numbers = List(a, b, c)\n        val sorted = numbers.sorted\n        val median = sorted(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            val mid = sorted.length / 2\n            (sorted(mid - 1) + sorted(mid)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        (list(0) + list(1)) / 2.0f",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val first = sortedList(sortedList.length / 2)\n            val second = sortedList(sortedList.length / 2 - 1)\n            (first + second).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val l = List(a, b, c)\n        val sorted = l.sorted\n        if (sorted.size % 2 == 0) {\n            val m1 = sorted(sorted.size / 2)\n            val m2 = sorted(sorted.size / 2 - 1)\n            (m1 + m2) / 2.0f\n        } else {\n            sorted(sorted.size / 2)\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2 - 1) + sortedList(sortedList.length / 2)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        }\n        else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }",
    "        if (a > b) {\n            if (b > c) (b + min(a, c)) / 2.0f\n            else if (a > c) (a + b) / 2.0f\n            else (a + c) / 2.0f\n        } else {\n            if (a > c) (a + min(b, c)) / 2.0f\n            else if (b > c) (b + a) / 2.0f\n            else (b + c) / 2.0f\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val sorted = List(a, b, c).sorted\n        val mid = sorted(1)\n        val left = sorted(0)\n        val right = sorted(2)\n        if (left == right) mid.toFloat\n        else if (mid == left) (left + right) / 2.0f\n        else if (mid == right) (left + right) / 2.0f\n        else mid.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val l = List(a, b, c).sorted\n        if (l.length % 2 == 0) (l(l.length / 2) + l(l.length / 2 - 1)) / 2.0f\n        else l(l.length / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) (arr(arr.length / 2) + arr(arr.length / 2 - 1)) / 2.0f\n        else arr(arr.length / 2).toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val l = List(a, b, c)\n        val s = l.sorted\n        s(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0\n        if (mid == median) mid.toFloat\n        else median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        List(a, b, c).sorted.apply(1)",
    "        val ary = Array(a, b, c)\n        val sorted = ary.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        else sorted(sorted.length / 2).toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2 - 1) + list(list.length / 2)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) {\n            (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        } else {\n            list(list.size / 2)\n        }",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val median = List(a, b, c).sorted\n        median(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 1) sortedList(sortedList.length / 2).toFloat\n        else (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val nums = Array(a, b, c)\n        nums.sortWith(_ < _)\n        if (nums.length % 2 == 0) (nums(nums.length / 2) + nums(nums.length / 2 - 1)) / 2.0f\n        else nums(nums.length / 2)",
    "        val l = List(a, b, c)\n        l.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2).toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f",
    "        val x = Array(a, b, c)\n        x.sortWith(_ < _)\n        if (x.length % 2 == 0) (x(x.length / 2) + x(x.length / 2 - 1)) / 2.0f\n        else x(x.length / 2)",
    "        val list = List(a, b, c)\n        list.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)"
  ]
}