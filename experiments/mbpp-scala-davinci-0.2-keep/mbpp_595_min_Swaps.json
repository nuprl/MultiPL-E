{
  "name": "mbpp_595_min_Swaps",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    def minSwaps(str1 : String, str2 : String) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Any(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Any(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Any(\"Not Possible\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        if (count % 2 == 1) return -1\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        return count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        val n = str1.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1(i) != str2(i)) {\n                count += 1\n            }\n        }\n        if (count % 2 == 0) {\n            return count / 2\n        } else {\n            return -1\n        }",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        val n = str1.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        return count / 2",
    "        val n = str1.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return \"Invalid input\"\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        val n = str1.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        val s1 = str1.toList\n        val s2 = str2.toList\n        val diff = s1.zip(s2).map(x => if (x._1 == x._2) 0 else 1).sum\n        if (diff % 2 == 1) \"impossible\"\n        else {\n            val diffs = s1.zip(s2).map(x => if (x._1 == x._2) 0 else 1)\n            val ones = diffs.filter(_ == 1).length\n            val zeros = diffs.filter(_ == 0).length\n            val swaps = ones / 2\n            swaps\n        }",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        count / 2",
    "        if (str1.length != str2.length) return -1\n        var count = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) != str2(i)) count += 1\n        }\n        if (count % 2 == 0) count / 2\n        else -1"
  ]
}