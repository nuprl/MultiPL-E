{
  "name": "mbpp_296_get_Inv_Count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2",
    "        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ::: left.slice(leftIndex, left.length)\n            else merged = merged ::: right.slice(rightIndex, right.length)\n            (merged, count)\n        }\n        mergeSort(arr)._2",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count",
    "        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2",
    "        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var result = List[Long]()\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ++ left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ++ right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2",
    "        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (sorted, count) = merge(leftSorted, rightSorted)\n            (sorted, count + leftCount + rightCount)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var sorted = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    sorted = sorted :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    sorted = sorted :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) sorted = sorted ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) sorted = sorted ::: right.slice(rightIndex, right.length)\n            (sorted, count)\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += (left.length - i)\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergedCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergedCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftCount = countInversions(left)\n            val rightCount = countInversions(right)\n            val splitCount = countSplitInversions(left, right)\n            leftCount + rightCount + splitCount\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2",
    "        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var result = List[Long]()\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInvCount) = merge(left, right)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2"
  ]
}