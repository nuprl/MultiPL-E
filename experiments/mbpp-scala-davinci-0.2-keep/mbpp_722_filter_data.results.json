{
  "name": "mbpp_722_filter_data",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.isLeft && x._2.left.get > w) || (x._2.isRight && x._2.right.get > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(y => y > w, y => y > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphpk6pysm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphpk6pysm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphpk6pysm.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > w && x._2.right.get > h)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0l6efvxt.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0l6efvxt.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0l6efvxt.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        val filtered = students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n        filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe_k2yct0.scala:6:75 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfiltered\u001b[0m = students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe_k2yct0.scala:6:100 ------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfiltered\u001b[0m = students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_k2yct0.scala:10:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_k2yct0.scala:10:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(student => student._2.right.get > h && student._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbnt2lt3.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbnt2lt3.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbnt2lt3.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter { case (k, v) => v match {\n            case Left(l) => l > w\n            case Right(r) => r > h\n        }}\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdtkvl5xq.scala:12:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdtkvl5xq.scala:12:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdtkvl5xq.scala:12:137 ----------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xct2odx.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xct2odx.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xct2odx.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        val filtered = students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n        filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe_k2yct0.scala:6:75 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfiltered\u001b[0m = students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe_k2yct0.scala:6:100 ------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfiltered\u001b[0m = students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_k2yct0.scala:10:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_k2yct0.scala:10:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.isRight && x._2.right.get > h) || (x._2.isLeft && x._2.left.get > w))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhm6ej3f.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhm6ej3f.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhm6ej3f.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > w && x._2.isRight && x._2.right.get > h)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e7k6ssq.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e7k6ssq.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2e7k6ssq.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdir59hi7.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.isLeft && x._2.left.get > w) || (x._2.isRight && x._2.right.get > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61m_t5lx.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn97yp99c.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn97yp99c.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(s => s._2.isRight && s._2.right.get._1 > h && s._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptof0j09m.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36ms\u001b[0m => s._2.isRight && s._2.right.get._1 > h && s._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptof0j09m.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36ms\u001b[0m => s._2.isRight && s._2.right.get._1 > h && s._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptof0j09m.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptof0j09m.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.isLeft && x._2.left.get > h) || (x._2.isRight && x._2.right.get > w))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk34o0x9.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk34o0x9.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk34o0x9.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0.0) > h && x._2.right.getOrElse(0.0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5hewl7sb.scala:6:54 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0.0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0.0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hewl7sb.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hewl7sb.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))),",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7whuavxs.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxxpz2cjm.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxpz2cjm.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaifrlhkf.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaifrlhkf.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        val filtered = students.filter(x => x._2.right.get > h && x._2.left.get > w)\n        filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvz0zwcb.scala:10:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvz0zwcb.scala:10:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvz0zwcb.scala:10:137 ----------",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}