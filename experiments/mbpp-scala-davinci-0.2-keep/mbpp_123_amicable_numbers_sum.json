{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisors(i).sum\n            if (d != i && divisors(d).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += divisors(i) + i\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (i != divisorsSum) {\n                val divisorsSumDivisors = divisors(divisorsSum.toInt)\n                if (divisorsSumDivisors.sum == i) {\n                    sum += i\n                    sum += divisorsSum\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && j != i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val d = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                d(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (d(i) != i && d(i) <= limit.toInt && d(d(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        (1 to limit.toInt).filter(i => factors(i) != i && factors(factors(i)) == i).sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(List[Int]())\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) = i :: factors(j)\n            }\n        }\n        factors.map(x => x.sum).zipWithIndex.filter(x => x._1 < limit && x._1 != x._2 && factors(x._1).sum == x._2).map(x => x._2).sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val primes = Prime.primes(limit.toInt)\n        val primeSet = primes.toSet\n        val primeFactorization = new PrimeFactorization(primes)\n        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            divisors(i) = primeFactorization.divisors(i).sum\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && j <= limit.toInt && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit.toInt && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val amicableNumbers = HashSet[Long]()\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                amicableNumbers += i\n                amicableNumbers += sumOfDivisors\n            }\n        }\n        amicableNumbers.sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisors(i)\n            if (d != i && d <= limit && divisors(d) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit && divisors(divisors(i).toInt) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) {\n                sum += i + a\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = divisorSums(i)\n            if (i != j && divisorSums(j) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (factors(i) > i && factors(i) <= limit.toInt && factors(factors(i)) == i) {\n                sum += i + factors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j <= limit.toInt && j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i + sumOfDivisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 2L to limit) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i) {\n                val b = sumOfDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i && divisors(divisorsSum) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisorSums(i) != i && divisorSums(i) <= limit && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i && divisors(divisorsSum) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisors(i)\n            if (d > i && divisors(d) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisorsSum(i)\n            if (d != i && divisorsSum(d) == i) sum += i\n        }\n        sum",
    "        val sumOfProperDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfProperDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfProperDivisors(i) > i && sumOfProperDivisors(i) <= limit && sumOfProperDivisors(sumOfProperDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val primes = new Prime(limit.toInt)\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            var n = i\n            var d = 1\n            for (p <- primes.primes) {\n                if (p * p > n) {\n                    d *= 2\n                    break\n                }\n                var e = 1\n                while (n % p == 0) {\n                    e += 1\n                    n /= p\n                }\n                if (e > 1) d *= e\n                if (n == 1) break\n            }\n            divisors(i) = d\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && j != i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i * i != n) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i + j\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i) {\n                val b = divisorsSum(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit.toInt && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val primes = new PrimeSet(limit)\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = primes.properDivisorsSum(i)\n            if (d != i && primes.properDivisorsSum(d) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) != i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit.toInt && sumOfDivisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i + 1 to limit.toInt) {\n                if (i * j <= limit.toInt && i * j / i == j) divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 to (limit.toInt / i)) {\n                divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (i < divisors(i) && divisors(i) <= limit.toInt && divisors(divisors(i).toInt) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val amicableNumbers = ArrayBuffer[Long]()\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                amicableNumbers += i\n                amicableNumbers += a\n            }\n        }\n        amicableNumbers.distinct.sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        sumOfDivisors.zipWithIndex.filter(x => x._1 < limit && x._1 != x._2 && sumOfDivisors(x._1.toInt) == x._2).map(_._2).sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && j != i && divisors(j) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            val sumOfDivisorsOfSum = divisors(sumOfDivisors).sum\n            if (sumOfDivisorsOfSum == i && sumOfDivisors != sumOfDivisorsOfSum) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) != i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && a != b) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j != i && divisors(j) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit.toInt && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) sum += i + j\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (i != j && i == sumOfDivisors(j)) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i && divisors(divisorsSum) == i) sum += i\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to (n / 2)) {\n                if (n % i == 0) sum += i\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisorsOfI = sumOfDivisors(i)\n            if (sumOfDivisorsOfI > i && sumOfDivisors(sumOfDivisorsOfI) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (factors(i) <= limit.toInt && factors(factors(i)) == i && factors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisorSum = divisorSum(i)\n            if (divisorSum != i && divisorSum <= limit && divisorSum(divisorSum) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            val sqrt = sqrt(n).toLong\n            val factors = (2 to sqrt).filter(n % _ == 0).toList\n            val sum = factors.foldLeft(1L)((acc, x) => acc + x + n / x)\n            if (sqrt * sqrt == n) sum - sqrt else sum\n        }\n        val sum = (1 to limit.toInt).foldLeft(0L)((acc, x) => {\n            val y = sumOfDivisors(x)\n            if (x == sumOfDivisors(y) && x != y) acc + x + y else acc\n        })\n        sum / 2",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit && divisors(divisors(i).toInt) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i + 1 to limit.toInt) {\n                if (i * j <= limit && i * j > 0) divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(i) > 0 && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i && sumOfDivisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i + sumOfDivisors(i)\n            }\n        }\n        sum",
    "        val divisors = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i until limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i < j && j <= limit.toInt && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSum = Array.fill[Long](limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSum(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSum(i) > i && divisorSum(i) <= limit && divisorSum(divisorSum(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Long]\n        for (i <- 1 to limit.toInt) {\n            map.put(i, sumOfDivisors(i))\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = map(i)\n            if (a <= limit && a != i && map(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = sumOfDivisors(i)\n            val sum2 = sumOfDivisors(sum1)\n            if (sum2 == i && sum1 != i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i).sum\n            if (i != j && divisors(j).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisors(i).sum\n            val b = divisors(a).sum\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && j <= limit.toInt && divisors(j) == i) {\n                sum += i + j\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val d = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                d(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (d(i) > i && d(i) <= limit.toInt && d(d(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i) {\n                val divisorsSumDivisors = divisors(divisorsSum)\n                if (divisorsSumDivisors.sum == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit.toInt && i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = sumOfDivisorsOf(i)\n            if (sumOfDivisors != i && sumOfDivisorsOf(sumOfDivisors) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) != i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit.toInt && i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j <= limit.toInt && factors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) <= limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum"
  ]
}