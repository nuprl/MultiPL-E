{
  "name": "mbpp_758_unique_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps_agmeel.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps_agmeel.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm9ncb7d9.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm9ncb7d9.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        return list4.toSet\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yq5041j.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yq5041j.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73z_dawm.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73z_dawm.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].apply(i)\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4a2oewl.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4a2oewl.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiqqlht2.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiqqlht2.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val xs1 = uniqueSublists(xs).asInstanceOf[List[(List[Any], Int)]]\n                val xs2 = xs1.filter(x1 => x1._1 == x)\n                if (xs2.isEmpty) (x, 1) :: xs1\n                else (x, xs2.head._2 + 1) :: xs1.filter(x1 => x1._1 != x)\n            }\n            case x :: xs => uniqueSublists(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpedtcu0te.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpedtcu0te.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.toSet\n        var list5 = list4.map(x => (x, list3.count(y => y == x)))\n        list5\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfdjo_7r3.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfdjo_7r3.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdtzdahfe.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdtzdahfe.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnf72uo0q.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnf72uo0q.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps_agmeel.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps_agmeel.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvepfqgj.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvepfqgj.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var dict = Map[Any, Any]()\n        for (i <- 0 to list2.length - 1) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 to list3.length - 1) {\n            if (!list4.contains(list3(i))) {\n                list4 += list3(i)\n            }\n        }\n        for (i <- 0 to list4.length - 1) {\n            var count = 0\n            for (j <- 0 to list3.length - 1) {\n                if (list4(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list4(i) -> count)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptahbbza6.scala:32:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptahbbza6.scala:32:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdop7axpq.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdop7axpq.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp39yfaiki.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp39yfaiki.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dictionary = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            }\n            else {\n                dictionary(list1(i)) = 1\n            }\n        }\n        return dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122483,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr6eav2gf.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpr6eav2gf.scala:8:36 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (dictionary.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpr6eav2gf.scala:9:27 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dictionary(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpr6eav2gf.scala:12:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                dictionary(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr6eav2gf.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var dictionary = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (list(i).isInstanceOf[List[Any]]) {\n                val tuple = list(i).asInstanceOf[List[Any]].toSet.toList.toString\n                if (dictionary.contains(tuple)) dictionary(tuple) += 1\n                else dictionary(tuple) = 1\n            }\n        }\n        dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmd2j18fr.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmd2j18fr.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict += (tuple -> 1)\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0i8q7h4.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0i8q7h4.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.groupBy(x => x)\n        var list7 = list6.map(x => (x._1.replace(\"List(\",\"\").replace(\")\",\"\").split(\",\").toList, x._2.length))\n        list7\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpcl5t1fyg.scala:8:43 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcl5t1fyg.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcl5t1fyg.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (list3.contains(i)) {\n                list3(i) += 1\n            } else {\n                list3(i) = 1\n            }\n        }\n        return list3\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjzce3yi7.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjzce3yi7.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 until list3.length) {\n            var count = 0\n            for (j <- 0 until list3.length) {\n                if (list3(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list3(i) -> count)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprj00ffy3.scala:26:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprj00ffy3.scala:26:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1 else dict(tuple) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpas1mqr3v.scala:9:75 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toSet.toList.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpas1mqr3v.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpas1mqr3v.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp79tkw1jh.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp79tkw1jh.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        val list4 = list3.map(x => (x, list3.count(y => x == y)))\n        val list5 = list4.distinct\n        list5\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9q8qclc.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9q8qclc.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            val tuple = i.asInstanceOf[List[Any]].toSet\n            if (dict.contains(tuple)) dict(tuple) += 1 else dict(tuple) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph1le06ru.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph1le06ru.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.map(y => y.toString))\n        var list17 = list16.map(x => x.map(y => y.toInt))\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.map(y => y.toString))\n        var list22 = list21.map(x => x.map(y => y.toInt))\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.map(y => y.toString))\n        var list27 = list26.map(x => x.map(y => y.toInt))\n        var list28\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1bovdvn_.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1bovdvn_.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bovdvn_.scala:35:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1bovdvn_.scala:35:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toL",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toSet)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toSet)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toSet)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toSet)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9tzyv0t6.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:15:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist11\u001b[0m = list10.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:20:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist16\u001b[0m = list15.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var result = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (result.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                result.update(list1.asInstanceOf[List[Any]].apply(i), result.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1)\n            } else {\n                result += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpppwem674.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpppwem674.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 to list2.length - 1) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe09lvjw3.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe09lvjw3.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 : List[Any] = List()\n        var list3 : List[Any] = List()\n        var list4 : List[Any] = List()\n        var list5 : List[Any] = List()\n        var list6 : List[Any] = List()\n        var list7 : List[Any] = List()\n        var list8 : List[Any] = List()\n        var list9 : List[Any] = List()\n        var list10 : List[Any] = List()\n        var list11 : List[Any] = List()\n        var list12 : List[Any] = List()\n        var list13 : List[Any] = List()\n        var list14 : List[Any] = List()\n        var list15 : List[Any] = List()\n        var list16 : List[Any] = List()\n        var list17 : List[Any] = List()\n        var list18 : List[Any] = List()\n        var list19 : List[Any] = List()\n        var list20 : List[Any] = List()\n        var list21 : List[Any] = List()\n        var list22 : List[Any] = List()\n        var list23 : List[Any] = List()\n        var list24 : List[Any] = List()\n        var list25 : List[Any] = List()\n        var list26 : List[Any] = List()\n        var list27 : List[Any] = List()\n        var list28 : List[Any] = List()\n        var list29 : List[Any] = List()\n        var list30 : List[Any] = List()\n        var list31 : List[Any] = List()\n        var list32 : List[Any] = List()\n        var list33 : List[Any] = List()\n        var list34 : List[Any] = List()\n        var list35 : List[Any] = List()\n        var list36 : List[Any] = List()\n        var list37 : List[Any] = List()\n        var list38 : List[Any] = List()\n        var list39 : List[Any] = List()\n        var list40 : List[Any] = List()\n        var list41\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpivs2sje1.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivs2sje1.scala:48:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivs2sje1.scala:48:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dictionary = new HashMap[Any, Int]\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            }\n            else {\n                dictionary(list1(i)) = 1\n            }\n        }\n        return dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122483,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkwkdai3j.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkwkdai3j.scala:8:36 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (dictionary.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkwkdai3j.scala:9:27 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dictionary(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkwkdai3j.scala:12:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                dictionary(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkwkdai3j.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp79tkw1jh.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp79tkw1jh.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiqdyegq5.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiqdyegq5.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfs4kp93c.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfs4kp93c.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toList\n        var list9 = list8.map(x => x.toList)\n        var list10 = list9.map(x => x.sorted)\n        var list11 = list10.map(x => x.toSet)\n        var list12 = list11.map(x => x.toList)\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toSet)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sorted)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.sorted)\n        var list20 = list19.map(x => x.toSet)\n        var list21 = list20.map(x => x.toList)\n        var list22 = list21.map(x => x.sorted)\n        var list23 = list22.map(x => x.toSet)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.sorted)\n        var list26 = list25.map(x => x.toSet)\n        var list27 = list26.map(x => x.toList)\n        var list28 = list27.map(x => x.sorted)\n        var list29 = list28.map(x => x.toSet)\n        var list30 = list29.map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpokm3e6wu.scala:8:43 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpokm3e6wu.scala:14:44 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist10\u001b[0m = list9.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpokm3e6wu.scala:17:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist13\u001b[0m = list12.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpokm3e6wu.scala:20:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist16\u001b[0m = list15.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            }\n            else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0bzcaii4.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0bzcaii4.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        return null\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9pgvelr.scala:10:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9pgvelr.scala:10:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7ozmhc2.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7ozmhc2.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict += (list(i) -> 1)\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpez57agol.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpez57agol.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new HashMap[Any, Int]\n        for (i <- list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpccv9ej4e.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpccv9ej4e.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict += (i -> 1)\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs_z85ea.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs_z85ea.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 : List[Any] = List()\n        var list3 : List[Any] = List()\n        var list4 : List[Any] = List()\n        var list5 : List[Any] = List()\n        var list6 : List[Any] = List()\n        var list7 : List[Any] = List()\n        var list8 : List[Any] = List()\n        var list9 : List[Any] = List()\n        var list10 : List[Any] = List()\n        var list11 : List[Any] = List()\n        var list12 : List[Any] = List()\n        var list13 : List[Any] = List()\n        var list14 : List[Any] = List()\n        var list15 : List[Any] = List()\n        var list16 : List[Any] = List()\n        var list17 : List[Any] = List()\n        var list18 : List[Any] = List()\n        var list19 : List[Any] = List()\n        var list20 : List[Any] = List()\n        var list21 : List[Any] = List()\n        var list22 : List[Any] = List()\n        var list23 : List[Any] = List()\n        var list24 : List[Any] = List()\n        var list25 : List[Any] = List()\n        var list26 : List[Any] = List()\n        var list27 : List[Any] = List()\n        var list28 : List[Any] = List()\n        var list29 : List[Any] = List()\n        var list30 : List[Any] = List()\n        var list31 : List[Any] = List()\n        var list32 : List[Any] = List()\n        var list33 : List[Any] = List()\n        var list34 : List[Any] = List()\n        var list35 : List[Any] = List()\n        var list36 : List[Any] = List()\n        var list37 : List[Any] = List()\n        var list38 : List[Any] = List()\n        var list39 : List[Any] = List()\n        var list40 : List[Any] = List()\n        var list41\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpivs2sje1.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivs2sje1.scala:48:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivs2sje1.scala:48:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5w2vtz9d.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5w2vtz9d.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list1.length) {\n            if (dict.contains(list1(i))) {\n                dict(list1(i)) = dict(list1(i)) + 1\n            } else {\n                dict(list1(i)) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg_o_iqwc.scala:7:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpg_o_iqwc.scala:8:30 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (dict.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpg_o_iqwc.scala:9:21 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dict(list1(i)) = dict(list1(i)) + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpg_o_iqwc.scala:9:38 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dict(list1(i)) = dict(list1(i)) + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpg_o_iqwc.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                dict(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg_o_iqwc.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfbk3p4fw.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfbk3p4fw.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x))).toList\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi56kep9m.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi56kep9m.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = new ListBuffer[Any]()\n        var list3 = new ListBuffer[Any]()\n        var list4 = new ListBuffer[Any]()\n        var list5 = new ListBuffer[Any]()\n        var list6 = new ListBuffer[Any]()\n        var list7 = new ListBuffer[Any]()\n        var list8 = new ListBuffer[Any]()\n        var list9 = new ListBuffer[Any]()\n        var list10 = new ListBuffer[Any]()\n        var list11 = new ListBuffer[Any]()\n        var list12 = new ListBuffer[Any]()\n        var list13 = new ListBuffer[Any]()\n        var list14 = new ListBuffer[Any]()\n        var list15 = new ListBuffer[Any]()\n        var list16 = new ListBuffer[Any]()\n        var list17 = new ListBuffer[Any]()\n        var list18 = new ListBuffer[Any]()\n        var list19 = new ListBuffer[Any]()\n        var list20 = new ListBuffer[Any]()\n        var list21 = new ListBuffer[Any]()\n        var list22 = new ListBuffer[Any]()\n        var list23 = new ListBuffer[Any]()\n        var list24 = new ListBuffer[Any]()\n        var list25 = new ListBuffer[Any]()\n        var list26 = new ListBuffer[Any]()\n        var list27 = new ListBuffer[Any]()\n        var list28 = new ListBuffer[Any]()\n        var list29 = new ListBuffer[Any]()\n        var list30 = new ListBuffer[Any]()\n        var list31 = new ListBuffer[Any]()\n        var list32 = new ListBuffer[Any]()\n        var list33 = new ListBuffer[Any]()\n        var list34 = new ListBuffer[Any]()\n        var list35 = new ListBuffer[Any]()\n        var list36 = new ListBuffer[Any]()\n        var list37 = new ListBuffer[Any]()\n        var list38 = new ListBuffer[Any]()\n        var list39 = new ListBuffer[Any]()\n        var list40 = new ListBuffer[Any]()\n        var list41\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfy8_sw5_.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfy8_sw5_.scala:48:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfy8_sw5_.scala:48:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var result = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (result.contains(tuple)) result(tuple) += 1\n            else result(tuple) = 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpi6cygy56.scala:9:75 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toSet.toList.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi6cygy56.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi6cygy56.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => x.toList.sorted)\n        var list5 = list4.map(x => (x, list4.count(y => y == x)))\n        var list6 = list5.distinct\n        return list6\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfdht4qrd.scala:8:50 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.toList.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfdht4qrd.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfdht4qrd.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet.toList.toString\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122497,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpipn1u34c.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpipn1u34c.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73z_dawm.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73z_dawm.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvepfqgj.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvepfqgj.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122499,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list1_ = list1.asInstanceOf[List[Any]]\n        var list1_unique = list1_.distinct\n        var list1_unique_count = list1_unique.map(x => (x, list1_.count(y => y == x)))\n        return list1_unique_count\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfw_h7k1u.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfw_h7k1u.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toList)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.sorted)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toSet)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.toSet)\n        var list30 = list29.map(x => x.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq9ypc3kd.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq9ypc3kd.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq9ypc3kd.scala:15:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist11\u001b[0m = list10.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq9ypc3kd.scala:19:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist15\u001b[0m = list14.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dictionary = new HashMap[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dictionary.contains(x)) {\n                dictionary(x) += 1\n            } else {\n                dictionary(x) = 1\n            }\n        }\n        dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri7dkef6.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri7dkef6.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5w2vtz9d.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5w2vtz9d.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0sh2gk0k.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0sh2gk0k.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd80whq2c.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd80whq2c.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        var result = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp08gl76ct.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp08gl76ct.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiqdyegq5.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiqdyegq5.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.toString)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.toString)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.toString)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpfaub7r51.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfaub7r51.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfaub7r51.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfaub7r51.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].sorted)\n        var list4 = list3.map(x => x.toString)\n        var list5 = list4.groupBy(x => x).map(x => (x._1, x._2.length))\n        return list5\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpayye8kds.scala:7:67 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist3\u001b[0m = list2.map(\u001b[36mx\u001b[0m => x.asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpayye8kds.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpayye8kds.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp79tkw1jh.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp79tkw1jh.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toList\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphrx3w7yp.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphrx3w7yp.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbenjb6_6.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbenjb6_6.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dictionary = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            } else {\n                dictionary += (list1(i) -> 1)\n            }\n        }\n        return dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps2oovgv2.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmps2oovgv2.scala:8:36 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (dictionary.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmps2oovgv2.scala:9:27 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dictionary(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmps2oovgv2.scala:11:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                dictionary += (list1(i) -> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2oovgv2.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]].toTuple\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0eeuroy8.scala:8:87 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list1.asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].apply(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toTuple\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        value toTuple is not a member of List[Any]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0eeuroy8.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0eeuroy8.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp79tkw1jh.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp79tkw1jh.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79tkw1jh.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp855uxno7.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp855uxno7.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (dict.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                dict.update(list1.asInstanceOf[List[Any]].apply(i), dict.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1)\n            } else {\n                dict.put(list1.asInstanceOf[List[Any]].apply(i), 1)\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydxioz78.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydxioz78.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.length) {\n            if (dict.contains(list1(i))) {\n                dict(list1(i)) += 1\n            } else {\n                dict += (list1(i) -> 1)\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvgm8j__g.scala:7:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvgm8j__g.scala:8:30 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (dict.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvgm8j__g.scala:9:21 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                dict(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvgm8j__g.scala:11:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                dict += (list1(i) -> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvgm8j__g.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dic = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dic.contains(i)) {\n                dic(i) += 1\n            } else {\n                dic(i) = 1\n            }\n        }\n        return dic\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1rn8158r.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1rn8158r.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmnog79i5.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmnog79i5.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijpt9akd.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijpt9akd.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = new HashMap[Any, Int]\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzwqez9l2.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzwqez9l2.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf0g7977n.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf0g7977n.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122499,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toString)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toString)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toString)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toString)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toString)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpheglfq2x.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpheglfq2x.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpheglfq2x.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpheglfq2x.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.sorted)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.sorted)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.sorted)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpnu7psmre.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sortWith(_ < _))\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sortWith(_ < _))\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sortWith(_ < _))\n        var list17 = list16.map(x => x.toString)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sortWith(_ < _))\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.toSet)\n        var list27 = list26.map(x => x.toList)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb46m5mov.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb46m5mov.scala:8:48 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sortWith(_ < _))\n\u001b[31m\u001b[31m  |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue < is not a member of Any, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb46m5mov.scala:36:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb46m5mov.scala:36:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) += 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122517,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8p7vc4l.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8p7vc4l.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict += (i -> 1)\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xtn2j6n.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3xtn2j6n.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        for (i <- list2) {\n            if (list3.contains(i)) {\n                var index = list3.indexOf(i)\n                var value = list3(index).asInstanceOf[(Any, Int)]\n                list3(index) = (value._1, value._2 + 1)\n            } else {\n                list3 += (i, 1)\n            }\n        }\n        list3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvmp6w7q.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvmp6w7q.scala:20:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_h6gqcko.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (dict.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                dict(list1.asInstanceOf[List[Any]].apply(i)) += 1\n            } else {\n                dict += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplydp2s5_.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplydp2s5_.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9lajehk.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9lajehk.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgs2wt2m.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgs2wt2m.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.distinct\n        var list7 = list6.map(x => x.toList)\n        var list8 = list7.map(x => x.tail)\n        var list9 = list8.map(x => x.init)\n        var list10 = list9.map(x => x.map(y => y.toInt - 48))\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.tail)\n        var list16 = list15.map(x => x.init)\n        var list17 = list16.map(x => x.map(y => y.toInt - 48))\n        var list18 = list17.map(x => x.map(y => y.toString))\n        var list19 = list18.map(x => x.map(y => y.toInt))\n        var list20 = list19.map(x => x.toString)\n        var list21 = list20.map(x => x.toList)\n        var list22 = list21.map(x => x.tail)\n        var list23 = list22.map(x => x.init)\n        var list24 = list23.map(x => x.map(y => y.toInt - 48))\n        var list25 = list24.map(x => x.map(y => y.toString))\n        var list26 = list25.map(x => x.map(y => y.toInt))\n        var list27 = list26.map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmwkmszv9.scala:8:43 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwkmszv9.scala:34:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwkmszv9.scala:34:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list1_ = list1.asInstanceOf[List[Any]]\n        val list1_uniq = list1_.distinct\n        val list1_uniq_tuples = list1_uniq.map(x => (x, list1_.count(y => y == x)))\n        list1_uniq_tuples\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122526,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyvjrspxd.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyvjrspxd.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        var list5 = list4.toSet\n        return list5\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122526,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkotabxmv.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkotabxmv.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbpy1wn0n.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpn9pzpuad.scala:9:75 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toSet.toList.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn9pzpuad.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn9pzpuad.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var result = new HashMap[Any, Int]\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbapkre93.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbapkre93.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.toSet\n        var list12 = list11.toList\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toString)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.sorted)\n        var list18 = list17.map(x => x.toString)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toString)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.sorted)\n        var list30 = list29.map(x => x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpja4znwas.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpja4znwas.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpja4znwas.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpja4znwas.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7ozmhc2.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7ozmhc2.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122529,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg0iglnkl.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg0iglnkl.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toSet)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toSet)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toSet)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toSet)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9tzyv0t6.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:15:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist11\u001b[0m = list10.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tzyv0t6.scala:20:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist16\u001b[0m = list15.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpug5eozdv.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpug5eozdv.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.sortWith(_ < _))\n        val list5 = list4.map(x => x.toSet)\n        val list6 = list5.map(x => x.toList)\n        val list7 = list6.map(x => x.toString)\n        val list8 = list7.map(x => (x, list7.count(_ == x)))\n        val list9 = list8.distinct\n        val list10 = list9.map(x => (x._1.replace(\"List(\", \"\").replace(\")\", \"\"), x._2))\n        val list11 = list10.map(x => (x._1.split(\",\").toList.map(y => y.toInt), x._2))\n        val list12 = list11.toMap\n        return list12\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc8vx5sp9.scala:8:48 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sortWith(_ < _))\n\u001b[31m\u001b[31m  |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue < is not a member of Any, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8vx5sp9.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8vx5sp9.scala:20:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(x)) dict(x) += 1\n            else dict += (x -> 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122531,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvl2psyj.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvl2psyj.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnj2p_nih.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dictionary = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                var tuple = list2(i).asInstanceOf[List[Any]].toSet\n                if (dictionary.contains(tuple)) dictionary(tuple) += 1\n                else dictionary(tuple) = 1\n            }\n        }\n        return dictionary\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfrkun7_g.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfrkun7_g.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwvuzmbz.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwvuzmbz.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.replace(\"List(\", \"(\"))\n        var list9 = list8.map(x => x.replace(\")\", \"\"))\n        var list10 = list9.map(x => x.replace(\" \", \"\"))\n        var list11 = list10.map(x => x.replace(\",\", \" \"))\n        var list12 = list11.map(x => x.replace(\"(\", \"(\"))\n        var list13 = list12.map(x => x.replace(\")\", \")\"))\n        var list14 = list13.map(x => x.replace(\" \", \",\"))\n        var list15 = list14.map(x => x.replace(\"(\", \"(\"))\n        var list16 = list15.map(x => x.replace(\")\", \")\"))\n        var list17 = list16.map(x => x.replace(\" \", \",\"))\n        var list18 = list17.map(x => x.replace(\"(\", \"(\"))\n        var list19 = list18.map(x => x.replace(\")\", \")\"))\n        var list20 = list19.map(x => x.replace(\" \", \",\"))\n        var list21 = list20.map(x => x.replace(\"(\", \"(\"))\n        var list22 = list21.map(x => x.replace(\")\", \")\"))\n        var list23 = list22.map(x => x.replace(\" \", \",\"))\n        var list24 = list23.map(x => x.replace(\"(\", \"(\"))\n        var list25 = list24.map(x => x.replace(\")\", \")\"))\n        var list26 = list25.\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprrmns5pi.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmprrmns5pi.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprrmns5pi.scala:33:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprrmns5pi.scala:33:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122487,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdhyet904.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdhyet904.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = new ListBuffer[Any]\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i).asInstanceOf[List[Any]]\n            }\n        }\n        var list4 = new ListBuffer[Any]\n        for (i <- 0 until list3.length) {\n            list4 += list3(i).asInstanceOf[List[Any]].sorted\n        }\n        var list5 = list4.toList.distinct\n        var list6 = new ListBuffer[Any]\n        for (i <- 0 until list5.length) {\n            var count = 0\n            for (j <- 0 until list4.length) {\n                if (list5(i).asInstanceOf[List[Any]] == list4(j).asInstanceOf[List[Any]]) {\n                    count += 1\n                }\n            }\n            list6 += (list5(i), count)\n        }\n        list6.toList\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpq68imu19.scala:15:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            list4 += list3(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq68imu19.scala:31:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq68imu19.scala:31:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) = dict(i) + 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2n5ejxb.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl2n5ejxb.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxp5g8xdh.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxp5g8xdh.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122499,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (item <- list) {\n            if (dict.contains(item)) {\n                dict(item) += 1\n            } else {\n                dict(item) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprs7ck37m.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprs7ck37m.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0lzyrwem.scala:9:76 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list2(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toSet.toList.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                                                            ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0lzyrwem.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0lzyrwem.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 until list3.length) {\n            var count = 0\n            for (j <- 0 until list3.length) {\n                if (list3(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list3(i) -> count)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprj00ffy3.scala:26:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprj00ffy3.scala:26:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.partition(_ == x)\n                (first, rest) match {\n                    case (Nil, Nil) => Nil\n                    case (Nil, _) => uniqueSublists(rest)\n                    case (_, Nil) => (first, 1) :: Nil\n                    case (_, _) => (first, 1) :: uniqueSublists(rest)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122543,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpncvn_4_4.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.partition(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value partition is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpncvn_4_4.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.partition(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpncvn_4_4.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.partition(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpncvn_4_4.scala:14:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    \u001b[33mcase\u001b[0m (_, _) => (first, \u001b[31m1\u001b[0m) :: uniqueSublists(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncvn_4_4.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (item <- list) {\n            if (dict.contains(item)) {\n                dict(item) += 1\n            } else {\n                dict(item) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuoiqdvp8.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuoiqdvp8.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2kyiuj9f.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2kyiuj9f.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sortWith(_ < _))\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.toSet\n        var list7 = list6.toList\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.drop(1))\n        var list10 = list9.map(x => x.dropRight(1))\n        var list11 = list10.map(x => x.map(y => y.toString.toInt))\n        var list12 = list11.map(x => x.toString)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.drop(1))\n        var list15 = list14.map(x => x.dropRight(1))\n        var list16 = list15.map(x => x.map(y => y.toString.toInt))\n        var list17 = list16.map(x => x.toString)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.drop(1))\n        var list20 = list19.map(x => x.dropRight(1))\n        var list21 = list20.map(x => x.map(y => y.toString.toInt))\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.drop(1))\n        var list25 = list24.map(x => x.dropRight(1))\n        var list26 = list25.map(x => x.map(y => y.toString.toInt))\n        var list27 = list26.map(x => x.toString)\n       \n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoc3ozd1x.scala:8:48 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sortWith(_ < _))\n\u001b[31m\u001b[31m  |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue < is not a member of Any, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoc3ozd1x.scala:35:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoc3ozd1x.scala:35:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toString)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.toString)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.toString)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.toString)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpc9tpc44m.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc9tpc44m.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc9tpc44m.scala:37:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc9tpc44m.scala:37:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        var list4 = list3.toList\n        var list5 = ListBuffer[Any]()\n        for (i <- 0 until list4.length) {\n            list5 += list4(i).asInstanceOf[List[Any]].sorted\n        }\n        var list6 = list5.toList\n        var list7 = list6.distinct\n        var list8 = ListBuffer[Any]()\n        for (i <- 0 until list7.length) {\n            var count = 0\n            for (j <- 0 until list6.length) {\n                if (list7(i) == list6(j)) {\n                    count += 1\n                }\n            }\n            list8 += (list7(i), count)\n        }\n        var list9 = list8.toList\n        return list9\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpphts7l2y.scala:16:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            list5 += list4(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphts7l2y.scala:34:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphts7l2y.scala:34:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 to list2.length - 1) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toList\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122543,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt76a1w8q.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt76a1w8q.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toSet)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.sorted)\n        var list18 = list17.map(x => x.toSet)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toSet)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toSet)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toSet)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.sorted)\n        var list30 = list29.map(x => x.toSet\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi3jwq2na.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi3jwq2na.scala:8:43 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi3jwq2na.scala:15:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist11\u001b[0m = list10.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi3jwq2na.scala:18:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist14\u001b[0m = list13.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xvv26e2.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xvv26e2.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.map(y => y.toString))\n        var list10 = list9.map(x => x.mkString)\n        var list11 = list10.map(x => x.toInt)\n        var list12 = list11.map(x => x.toString)\n        var list13 = list12.map(x => x.map(y => y.toInt))\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toSet)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.map(y => y.toString))\n        var list18 = list17.map(x => x.mkString)\n        var list19 = list18.map(x => x.toInt)\n        var list20 = list19.map(x => x.toString)\n        var list21 = list20.map(x => x.map(y => y.toInt))\n        var list22 = list21.map(x => x.sorted)\n        var list23 = list22.map(x => x.toSet)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.map(y => y.toString))\n        var list26 = list25.map(x => x.mkString)\n        var list27 = list26.map(x => x.toInt)\n        var list28 = list27.\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp07v9ayd8.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp07v9ayd8.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp07v9ayd8.scala:35:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp07v9ayd8.scala:35:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg02aqkp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplg02aqkp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            val sublist = list(i)\n            if (map.contains(sublist)) {\n                map(sublist) += 1\n            } else {\n                map(sublist) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_eu67c2x.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_eu67c2x.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.map(y => y.toString))\n        var list17 = list16.map(x => x.map(y => y.toInt))\n        var list18 = list17.map(x => x.toSet)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.map(y => y.toString))\n        var list24 = list23.map(x => x.map(y => y.toInt))\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxapje60k.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxapje60k.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxapje60k.scala:35:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxapje60k.scala:35:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toL",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Your code here\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpum2djuqt.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpum2djuqt.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj228hbf7.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj228hbf7.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val tuple = list(i)\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri7k50li.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri7k50li.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.sorted)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.sorted)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.sorted)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpnu7psmre.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:13:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist9\u001b[0m = list8.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnu7psmre.scala:16:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist12\u001b[0m = list11.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit value",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        if (list1.isInstanceOf[List[_]]) {\n            val list = list1.asInstanceOf[List[_]]\n            val sublists = list.map(x => uniqueSublists(x)).toSet\n            val sublistsCount = sublists.map(x => (x, list.count(y => y == x)))\n            sublistsCount\n        } else {\n            list1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqrp7gmkt.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqrp7gmkt.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val key = list(i)\n            if (dict.contains(key)) dict(key) += 1\n            else dict(key) = 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeop0n9o4.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeop0n9o4.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_sol87p.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qrbxjw.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7uj434pe.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7uj434pe.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfj08mem6.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfj08mem6.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp39yfaiki.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp39yfaiki.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        var list5 = list4.toSet\n        list5\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy53lbsai.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy53lbsai.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var dict = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(x)) {\n                dict(x) += 1\n            } else {\n                dict(x) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ru1onia.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ru1onia.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmhhuqe4.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmhhuqe4.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5bdkb664.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5bdkb664.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt86t1r_a.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgas9xomg.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgas9xomg.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmau22z1.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmau22z1.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) map(tuple) += 1\n            else map += tuple -> 1\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplqbv_38.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplqbv_38.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509995,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcwxaqcrh.scala:48:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwxaqcrh.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122499,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2212b2p.scala:54:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) += 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4okey49j.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4okey49j.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeo9mr9wb.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeo9mr9wb.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.toSet)\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.toSet)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sorted)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.toSet)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toSet)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.toSet)\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122559,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdvddjyup.scala:34:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdvddjyup.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdvddjyup.scala:15:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist11\u001b[0m = list10.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdvddjyup.scala:20:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist16\u001b[0m = list15.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy47fk0dg.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy47fk0dg.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kcaqkq8.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kcaqkq8.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpct6rd5x1.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpct6rd5x1.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}