{
  "name": "mbpp_638_wind_chill",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    def windChill(v : Long, t : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(windChill((120l), (35l)) == (40l));\n    assert(windChill((40l), (20l)) == (19l));\n    assert(windChill((10l), (8l)) == (6l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val w = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val w = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n        round(w).toLong",
    "        val result = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n        round(result).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong",
    "        val v1 = v.toDouble\n        val t1 = t.toDouble\n        val w = 13.12 + 0.6215 * t1 - 11.37 * pow(v1, 0.16) + 0.3965 * t1 * pow(v1, 0.16)\n        round(w).toLong"
  ]
}