{
  "name": "mbpp_750_add_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add the given tuple to the given list.\n    def addTuple(test_list : List[Long], test_tup : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addTuple((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), (9l, 10l)).equals((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(addTuple((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), (10l, 11l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 11l.toLong))));\n    assert(addTuple((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), (11l, 12l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = test_list\n        result_list = test_tup :: result_list\n        return result_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            result_list = result_list :+ (test_list(i) + test_tup)\n        }\n        return result_list",
    "        var new_list = test_list\n        new_list = test_tup :: new_list\n        return new_list",
    "        var list = test_list\n        list = list :+ test_tup\n        list",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = test_list\n        result_list = test_tup :: result_list\n        return result_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = test_list\n        result_list = result_list :+ test_tup\n        return result_list",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var list_size = test_list.size\n        var new_list = test_list\n        if (list_size == 0) {\n            new_list = test_tup :: new_list\n        }\n        else {\n            var i = 0\n            while (i < list_size) {\n                if (test_tup < test_list(i)) {\n                    new_list = new_list.updated(i, test_tup)\n                    i = list_size\n                }\n                i += 1\n            }\n            if (i == list_size) {\n                new_list = test_tup :: new_list\n            }\n        }\n        new_list",
    "        test_list :+ test_tup",
    "        var result = test_list\n        result = result :+ test_tup\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = (i + test_tup) :: result\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        // Write your code here\n        var list = test_list\n        list = list :+ test_tup\n        return list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = (i + test_tup) :: result\n        }\n        return result",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = result ::: List(i + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = test_tup :: new_list\n        return new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = result :+ (i + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = test_tup :: new_list\n        return new_list",
    "        return test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = test_list\n        result_list = result_list :+ test_tup\n        return result_list",
    "        var new_list = test_list :+ test_tup\n        return new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        // Write your code here\n        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result_list = result_list :+ (test_list(i) + test_tup)\n        }\n        return result_list",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        var result = test_list\n        result = result :+ test_tup\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        var test_list_new = test_list\n        test_list_new = test_tup :: test_list_new\n        test_list_new",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = (i + test_tup) :: result\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        result = test_tup :: test_list\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        var result = test_list\n        result = result :+ test_tup\n        return result",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        val new_list = test_list.to[ListBuffer]\n        new_list += test_tup\n        new_list.toList",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = test_list\n        result = test_tup :: result\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        // Write your code here\n        test_list :+ test_tup",
    "        var result = test_list\n        result = test_tup :: result\n        return result",
    "        var new_list = test_list\n        new_list = test_tup :: new_list\n        new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = test_list\n        result = result :+ test_tup\n        return result",
    "        test_list :+ test_tup",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            result = result :+ (i + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            result = result :+ (i + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var new_list = test_list\n        new_list = new_list :+ test_tup\n        return new_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        return test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        return test_list :+ test_tup",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        var test_list_new = test_list\n        test_list_new = test_list_new :+ test_tup\n        return test_list_new",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result_list = test_list\n        result_list = test_tup :: result_list\n        return result_list",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            result = result :+ (test_list(i) + test_tup)\n        }\n        return result",
    "        test_list :+ test_tup",
    "        test_list :+ test_tup"
  ]
}