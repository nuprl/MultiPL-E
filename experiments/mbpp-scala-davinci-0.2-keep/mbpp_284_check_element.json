{
  "name": "mbpp_284_check_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    def checkElement(list : Any, element : Any) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkElement((Any(\"green\", \"orange\", \"black\", \"white\")), (Any(\"blue\"))) == (false));\n    assert(checkElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (Any(7l))) == (false));\n    assert(checkElement((Any(\"green\", \"green\", \"green\", \"green\")), (Any(\"green\"))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        if (list.isInstanceOf[List[Any]]) {\n            if (list.asInstanceOf[List[Any]].length == 0) return true\n            else if (list.asInstanceOf[List[Any]].head == element) return checkElement(list.asInstanceOf[List[Any]].tail, element)\n            else return false\n        }\n        else return false",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        for (i <- list.asInstanceOf[List[Any]]) {\n            if (i != element) return false\n        }\n        true",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        var result = true\n        for (i <- list.asInstanceOf[List[Any]]) {\n            if (i != element) {\n                result = false\n            }\n        }\n        return result",
    "        if (list == Nil) {\n            return true\n        }\n        if (list.head == element) {\n            return checkElement(list.tail, element)\n        }\n        return false",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        for (i <- list.asInstanceOf[List[Any]]) {\n            if (i != element) return false\n        }\n        return true",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case head :: tail => if (head == element) checkElement(tail, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        var result = true\n        for (i <- list.asInstanceOf[List[Any]]) {\n            if (i != element) {\n                result = false\n            }\n        }\n        return result",
    "        list match {\n            case Nil => true\n            case head :: tail => if (head == element) checkElement(tail, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }",
    "        list match {\n            case Nil => true\n            case x :: xs => if (x == element) checkElement(xs, element) else false\n        }"
  ]
}