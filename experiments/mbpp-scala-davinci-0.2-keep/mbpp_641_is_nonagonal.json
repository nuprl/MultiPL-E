{
  "name": "mbpp_641_is_nonagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth nonagonal number.\n    def isNonagonal(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val a = (sqrt(1 + 8 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val k = (sqrt(8 * n + 1) - 1) / 2\n        if (k == floor(k)) n else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == round(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val m = floor((sqrt(8 * n + 1) - 1) / 2).toLong\n        val k = n - m * (m + 1) / 2\n        if (k == 0) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var x = 1\n        while (true) {\n            val y = x * (3 * x - 1) / 2\n            if (y == n) return x\n            if (y > n) return -1\n            x += 1\n        }\n        -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m))\n            m\n        else\n            -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 2\n        if (x == floor(x)) n else 0",
    "        val sqrt = sqrt(1 + 8 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt - 1) / 2\n            if (x == x.toInt) x.toLong\n            else -1\n        }\n        else -1",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1"
  ]
}