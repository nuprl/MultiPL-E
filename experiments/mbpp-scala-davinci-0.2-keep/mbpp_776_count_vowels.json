{
  "name": "mbpp_776_count_vowels",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count those characters which have vowels as their neighbors in the given string.\n    def countVowels(test_str : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countVowels((\"bestinstareels\")) == (7l));\n    assert(countVowels((\"partofthejourneyistheend\")) == (12l));\n    assert(countVowels((\"amazonprime\")) == (5l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n            else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1))) count += 1\n            }\n            else {\n                if (vowels.contains(test_str_arr(i)) && (vowels.contains(test_str_arr(i - 1)) || vowels.contains(test_str_arr(i + 1)))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (vowels.contains(test_str_arr(i))) {\n                if (i > 0 && vowels.contains(test_str_arr(i - 1))) count += 1\n                if (i < test_str_arr.length - 1 && vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0 && vowels.contains(test_str(i + 1))) count += 1\n            else if (i == test_str.length - 1 && vowels.contains(test_str(i - 1))) count += 1\n            else if (vowels.contains(test_str(i - 1)) && vowels.contains(test_str(i + 1))) count += 1\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = test_str.toLowerCase\n        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (vowels.contains(str(i))) {\n                if (i > 0 && vowels.contains(str(i - 1))) count += 1\n                if (i < n - 1 && vowels.contains(str(i + 1))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i + 1))) count += 1\n            } else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1))) count += 1\n            } else {\n                if (vowels.contains(test_str_arr(i)) && (vowels.contains(test_str_arr(i - 1)) || vowels.contains(test_str_arr(i + 1)))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = test_str.toLowerCase\n        var count = 0\n        for (i <- 0 until str.length) {\n            if (i > 0 && vowels.contains(str(i)) && vowels.contains(str(i - 1))) count += 1\n            if (i < str.length - 1 && vowels.contains(str(i)) && vowels.contains(str(i + 1))) count += 1\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = test_str.toLowerCase\n        var count = 0\n        for (i <- 0 until str.length) {\n            if (i == 0) {\n                if (vowels.contains(str(i)) && vowels.contains(str(i + 1))) count += 1\n            } else if (i == str.length - 1) {\n                if (vowels.contains(str(i)) && vowels.contains(str(i - 1))) count += 1\n            } else {\n                if (vowels.contains(str(i)) && (vowels.contains(str(i - 1)) || vowels.contains(str(i + 1)))) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0) {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i + 1) == 'a' || test_str(i + 1) == 'e' || test_str(i + 1) == 'i' || test_str(i + 1) == 'o' || test_str(i + 1) == 'u') {\n                        count += 1\n                    }\n                }\n            } else if (i == test_str.length - 1) {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i - 1) == 'a' || test_str(i - 1) == 'e' || test_str(i - 1) == 'i' || test_str(i - 1) == 'o' || test_str(i - 1) == 'u') {\n                        count += 1\n                    }\n                }\n            } else {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i + 1) == 'a' || test_str(i + 1) == 'e' || test_str(i + 1) == 'i' || test_str(i + 1) == 'o' || test_str(i + 1) == 'u') {\n                        count += 1\n                    }\n                    if (test_str(i - 1) == 'a' || test_str(i - 1) == 'e' || test_str(i - 1) == 'i' || test_str",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0 && vowels.contains(test_str(i + 1))) count += 1\n            else if (i == test_str.length - 1 && vowels.contains(test_str(i - 1))) count += 1\n            else if (vowels.contains(test_str(i - 1)) || vowels.contains(test_str(i + 1))) count += 1\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i + 1))) count += 1\n            } else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i - 1))) count += 1\n            } else {\n                if (vowels.contains(test_str_arr(i - 1)) || vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n        }\n        return count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str(i)) && vowels.contains(test_str(i + 1))) count += 1\n            }\n            else if (i == test_str.length - 1) {\n                if (vowels.contains(test_str(i)) && vowels.contains(test_str(i - 1))) count += 1\n            }\n            else {\n                if (vowels.contains(test_str(i)) && (vowels.contains(test_str(i + 1)) || vowels.contains(test_str(i - 1)))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n            else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1))) count += 1\n            }\n            else {\n                if (vowels.contains(test_str_arr(i)) && (vowels.contains(test_str_arr(i + 1)) || vowels.contains(test_str_arr(i - 1)))) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0) {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i + 1) == 'a' || test_str(i + 1) == 'e' || test_str(i + 1) == 'i' || test_str(i + 1) == 'o' || test_str(i + 1) == 'u') {\n                        count += 1\n                    }\n                }\n            }\n            else if (i == test_str.length - 1) {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i - 1) == 'a' || test_str(i - 1) == 'e' || test_str(i - 1) == 'i' || test_str(i - 1) == 'o' || test_str(i - 1) == 'u') {\n                        count += 1\n                    }\n                }\n            }\n            else {\n                if (test_str(i) == 'a' || test_str(i) == 'e' || test_str(i) == 'i' || test_str(i) == 'o' || test_str(i) == 'u') {\n                    if (test_str(i - 1) == 'a' || test_str(i - 1) == 'e' || test_str(i - 1) == 'i' || test_str(i - 1) == 'o' || test_str(i - 1) == 'u') {\n                        count += 1\n                    }\n                    if (test_str(i + 1) == 'a' || test_str(i + 1) == 'e' || test_str(i + 1) == 'i'",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 1 until test_str_arr.length - 1) {\n            if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1)) && vowels.contains(test_str_arr(i + 1))) count += 1\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0 && vowels.contains(test_str(i + 1))) count += 1\n            else if (i == test_str.length - 1 && vowels.contains(test_str(i - 1))) count += 1\n            else if (vowels.contains(test_str(i - 1)) && vowels.contains(test_str(i + 1))) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (i == 0) {\n                if (isVowel(test_str(i)) && isVowel(test_str(i + 1))) count += 1\n            } else if (i == test_str.length - 1) {\n                if (isVowel(test_str(i)) && isVowel(test_str(i - 1))) count += 1\n            } else {\n                if (isVowel(test_str(i)) && (isVowel(test_str(i + 1)) || isVowel(test_str(i - 1)))) count += 1\n            }\n        }\n        return count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n            else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1))) count += 1\n            }\n            else {\n                if (vowels.contains(test_str_arr(i)) && (vowels.contains(test_str_arr(i + 1)) || vowels.contains(test_str_arr(i - 1)))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (vowels.contains(test_str(i))) {\n                if (i > 0 && vowels.contains(test_str(i - 1))) count += 1\n                if (i < test_str.length - 1 && vowels.contains(test_str(i + 1))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i + 1))) count += 1\n            }\n            else if (i == test_str_arr.length - 1) {\n                if (vowels.contains(test_str_arr(i)) && vowels.contains(test_str_arr(i - 1))) count += 1\n            }\n            else {\n                if (vowels.contains(test_str_arr(i)) && (vowels.contains(test_str_arr(i - 1)) || vowels.contains(test_str_arr(i + 1)))) count += 1\n            }\n        }\n        count",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val test_str_arr = test_str.toCharArray\n        var count = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (i == 0 && vowels.contains(test_str_arr(i + 1))) count += 1\n            else if (i == test_str_arr.length - 1 && vowels.contains(test_str_arr(i - 1))) count += 1\n            else if (vowels.contains(test_str_arr(i - 1)) && vowels.contains(test_str_arr(i + 1))) count += 1\n        }\n        count"
  ]
}