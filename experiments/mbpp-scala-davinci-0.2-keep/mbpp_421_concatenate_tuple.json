{
  "name": "mbpp_421_concatenate_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Either[String, Long]) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple((\"ID\", \"is\", 4l, \"UTS\")).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((\"QWE\", \"is\", 4l, \"RTY\")).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((\"ZEN\", \"is\", 4l, \"OP\")).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(i) => i.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(lng) => lng.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        }",
    "        test_tup match {\n            case Left(str) => str\n            case Right(num) => num.toString\n        }",
    "        test_tup match {\n            case Left(s) => s\n            case Right(n) => n.toString\n        }"
  ]
}