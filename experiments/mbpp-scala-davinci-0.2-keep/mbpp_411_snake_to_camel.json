{
  "name": "mbpp_411_snake_to_camel",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.foldLeft(firstWord)((acc, word) => acc + word.capitalize)\n        camelCase",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.capitalize).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            } else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString",
    "        var ans = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                ans += word(i + 1).toUpper\n                i += 1\n            } else ans += word(i)\n        }\n        ans",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var capital = false\n        for (char <- word) {\n            if (char == '_') capital = true\n            else {\n                if (capital) {\n                    result += char.toUpper\n                    capital = false\n                }\n                else result += char\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') {\n                flag = true\n            } else {\n                if (flag) {\n                    result += c.toUpper\n                    flag = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(x => x.capitalize).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) {\n                sb.append(words(i))\n            } else {\n                sb.append(words(i).capitalize)\n            }\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            } else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var camelCase = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camelCase += word(i + 1).toUpper\n                i += 1\n            } else {\n                camelCase += word(i)\n            }\n        }\n        camelCase",
    "        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString(\"\")",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) result += c.toUpper\n                else result += c\n                flag = false\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var res = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                res += word(i + 1).toUpper\n                i += 2\n            } else {\n                res += word(i)\n                i += 1\n            }\n        }\n        res",
    "        var camel = new StringBuilder\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i+1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            val w = words(i)\n            if (i == 0) sb.append(w)\n            else sb.append(w.capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var capitalize = false\n        for (c <- word) {\n            if (c == '_') {\n                capitalize = true\n            } else {\n                if (capitalize) {\n                    result += c.toUpper\n                    capitalize = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var camel = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    camel += c.toUpper\n                    isUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        var isNextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += c.toUpper\n                    isNextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.reduceLeft((a, b) => a + b.capitalize)",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var flag = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') flag = true\n            else if (flag) {\n                camel += word(i).toUpper\n                flag = false\n            }\n            else camel += word(i)\n        }\n        camel",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        camel.append(words(0))\n        for (i <- 1 until words.length) {\n            camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        var result = \"\"\n        var upper = false\n        for (c <- word) {\n            if (c == '_') {\n                upper = true\n            } else {\n                if (upper) {\n                    result += c.toUpper\n                    upper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) result += c.toUpper\n                else result += c\n                flag = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) result += c.toUpper\n                else result += c\n                isFirst = false\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) result += c.toUpper\n                else result += c\n                isFirst = false\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(word => word.head.toUpper + word.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = new StringBuilder\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        word.split(\"_\").map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            }\n            else camel += word(i)\n            i += 1\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var camel = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    camel += c.toUpper\n                    isUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n            i += 1\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (w <- words) {\n            sb.append(w.capitalize)\n        }\n        sb.toString.head.toLower + sb.toString.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        val words = word.split(\"_\")\n        var camel = \"\"\n        for (i <- 0 until words.length) {\n            if (i == 0) camel += words(i)\n            else camel += words(i).capitalize\n        }\n        camel",
    "        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var camelCase = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camelCase += word(i + 1).toUpper\n                i += 1\n            } else {\n                camelCase += word(i)\n            }\n        }\n        camelCase",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result"
  ]
}