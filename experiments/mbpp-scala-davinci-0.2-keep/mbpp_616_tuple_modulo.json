{
  "name": "mbpp_616_tuple_modulo",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes two tuples of the same length and performs the element wise modulo.\n    def tupleModulo(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleModulo((10l, 4l, 5l, 6l), (5l, 6l, 7l, 5l)) == (0l, 4l, 5l, 1l));\n    assert(tupleModulo((11l, 5l, 6l, 7l), (6l, 7l, 8l, 6l)) == (5l, 5l, 6l, 1l));\n    assert(tupleModulo((12l, 6l, 7l, 8l), (7l, 8l, 9l, 7l)) == (5l, 6l, 7l, 1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        val modulo = test_tup1 % test_tup2\n        return modulo",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        val tup1 = test_tup1\n        val tup2 = test_tup2\n        tup1 % tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        val test_tup1_list = test_tup1.toString.toList.map(x => x.asDigit)\n        val test_tup2_list = test_tup2.toString.toList.map(x => x.asDigit)\n        val test_tup_list = test_tup1_list.zip(test_tup2_list).map(x => x._1 % x._2)\n        test_tup_list.foldLeft(0L)((x, y) => x * 10 + y)",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        // Write your code here\n        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2",
    "        return test_tup1 % test_tup2"
  ]
}