{
  "name": "mbpp_630_get_coordinates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Long) : List[List[Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates((3l, 4l)).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates((4l, 5l)).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates((5l, 6l)).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x != List(x, y))",
    "        var x = test_tup / 100\n        var y = test_tup % 100\n        var result = List(List(x-1, y-1), List(x-1, y), List(x-1, y+1), List(x, y-1), List(x, y+1), List(x+1, y-1), List(x+1, y), List(x+1, y+1))\n        return result",
    "        val x = test_tup / 100000\n        val y = test_tup % 100000\n        List(List(x, y + 1), List(x, y - 1), List(x + 1, y), List(x - 1, y))",
    "        var tup = test_tup\n        var x = 0L\n        var y = 0L\n        var list = List[List[Long]]()\n        while (tup > 0) {\n            x += tup % 10\n            tup /= 10\n            y += tup % 10\n            tup /= 10\n        }\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    list = List(List(x + i, y + j)) ::: list\n                }\n            }\n        }\n        list",
    "        var coordinates = List[List[Long]]()\n        for (i <- -1 to 1) {\n            for (j <- -1 to 1) {\n                if (i != 0 || j != 0) {\n                    coordinates = List(List(test_tup._1 + i, test_tup._2 + j)) ::: coordinates\n                }\n            }\n        }\n        return coordinates",
    "        val x = test_tup % 100\n        val y = test_tup / 100\n        val coords = List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))\n        return coords",
    "        val test_tup_list = List(test_tup)\n        val test_tup_list_list = List(test_tup_list)\n        val test_tup_list_list_list = List(test_tup_list_list)\n        val test_tup_list_list_list_list = List(test_tup_list_list_list)\n        val test_tup_list_list_list_list_list = List(test_tup_list_list_list_list)\n        val test_tup_list_list_list_list_list_list = List(test_tup_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list_list_list_list_list_list_list_list_list_list)\n        val test_tup_list_list_list_list_list_list_list_list_list_list_list_list_list = List(test_tup_list_list",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val up = (x - 1) * 100 + y\n        val down = (x + 1) * 100 + y\n        val left = x * 100 + (y - 1)\n        val right = x * 100 + (y + 1)\n        val up_left = (x - 1) * 100 + (y - 1)\n        val up_right = (x - 1) * 100 + (y + 1)\n        val down_left = (x + 1) * 100 + (y - 1)\n        val down_right = (x + 1) * 100 + (y + 1)\n        List(List(up, down, left, right, up_left, up_right, down_left, down_right))",
    "        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        return coord_list.filter(x => x(0) >= 0 && x(1) >= 0)",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val adj = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return adj",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_len = test_tup_list.length\n        val test_tup_list_len_minus_1 = test_tup_list_len - 1\n        val test_tup_list_len_minus_2 = test_tup_list_len - 2\n        val test_tup_list_len_minus_3 = test_tup_list_len - 3\n        val test_tup_list_len_minus_4 = test_tup_list_len - 4\n        val test_tup_list_len_minus_5 = test_tup_list_len - 5\n        val test_tup_list_len_minus_6 = test_tup_list_len - 6\n        val test_tup_list_len_minus_7 = test_tup_list_len - 7\n        val test_tup_list_len_minus_8 = test_tup_list_len - 8\n        val test_tup_list_len_minus_9 = test_tup_list_len - 9\n        val test_tup_list_len_minus_10 = test_tup_list_len - 10\n        val test_tup_list_len_minus_11 = test_tup_list_len - 11\n        val test_tup_list_len_minus_12 = test_tup_list_len - 12\n        val test_tup_list_len_minus_13 = test_tup_list_len - 13\n        val test_tup_list_len_minus_14 = test_tup_list_len - 14\n        val test_tup_list_len_minus_15 = test_tup_list_len - 15\n        val test_tup_list_len_minus_16 = test_tup_list_len - 16\n        val test_tup_list_len_minus_17 = test_tup_list_len - 17\n        val test_tup_list_len_minus_18 = test_t",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val coordinates = List(List(x - 1, y), List(x + 1, y), List(x, y - 1), List(x, y + 1))\n        return coordinates",
    "        val x = test_tup._1\n        val y = test_tup._2\n        List(List(x-1, y-1), List(x, y-1), List(x+1, y-1), List(x-1, y), List(x+1, y), List(x-1, y+1), List(x, y+1), List(x+1, y+1))",
    "        val x = test_tup % 100\n        val y = test_tup / 100\n        val x_list = List(x-1, x, x+1)\n        val y_list = List(y-1, y, y+1)\n        val coord_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        coord_list.filter(x => x != List(x, y))",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))",
    "        val x = test_tup / 1000000\n        val y = test_tup % 1000000\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x != List(x, y))",
    "        val x = test_tup._1\n        val y = test_tup._2\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = List(x_list, y_list)\n        val x_y_list_perm = x_y_list.permutations.toList\n        val x_y_list_perm_comb = x_y_list_perm.map(x => x.head.zip(x.last))\n        val x_y_list_perm_comb_filter = x_y_list_perm_comb.filter(x => x.head != x.last)\n        val x_y_list_perm_comb_filter_filter = x_y_list_perm_comb_filter.filter(x => x.head != x.last)\n        x_y_list_perm_comb_filter_filter",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val x_list = List(x - 1, x, x + 1)\n        val y_list = List(y - 1, y, y + 1)\n        val x_y_list = for (i <- x_list; j <- y_list) yield List(i, j)\n        x_y_list.filter(x => x.head >= 0 && x.last >= 0).filter(x => x.head < 100 && x.last < 100).filter(x => x.head != x.last).filter(x => x.head != x.last)",
    "        val x = test_tup / 100\n        val y = test_tup % 100\n        val coords = List(List(x - 1, y - 1), List(x - 1, y), List(x - 1, y + 1), List(x, y - 1), List(x, y + 1), List(x + 1, y - 1), List(x + 1, y), List(x + 1, y + 1))\n        return coords"
  ]
}