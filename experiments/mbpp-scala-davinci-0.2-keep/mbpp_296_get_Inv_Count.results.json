{
  "name": "mbpp_296_get_Inv_Count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt9w3i8hq.scala:41)\n\tat Problem.main(tmpt9w3i8hq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ::: left.slice(leftIndex, left.length)\n            else merged = merged ::: right.slice(rightIndex, right.length)\n            (merged, count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var result = List[Long]()\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ++ left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ++ right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6qerpefv.scala:38)\n\tat Problem.main(tmp6qerpefv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (sorted, count) = merge(leftSorted, rightSorted)\n            (sorted, count + leftCount + rightCount)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var sorted = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    sorted = sorted :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    sorted = sorted :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) sorted = sorted ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) sorted = sorted ::: right.slice(rightIndex, right.length)\n            (sorted, count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += (left.length - i)\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergedCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergedCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftCount = countInversions(left)\n            val rightCount = countInversions(right)\n            val splitCount = countSplitInversions(left, right)\n            leftCount + rightCount + splitCount\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn3uo8d7a.scala:43)\n\tat Problem.main(tmpn3uo8d7a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var result = List[Long]()\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInvCount) = merge(left, right)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val (leftHead, leftTail) = (left.head, left.tail)\n                val (rightHead, rightTail) = (right.head, right.tail)\n                if (leftHead <= rightHead) {\n                    val (merged, mergeCount) = merge(leftTail, right)\n                    (leftHead :: merged, mergeCount)\n                }\n                else {\n                    val (merged, mergeCount) = merge(left, rightTail)\n                    (rightHead :: merged, mergeCount + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) {\n                result = result ::: left.slice(leftIndex, left.length)\n            } else if (rightIndex < right.length) {\n                result = result ::: right.slice(rightIndex, right.length)\n            }\n            return (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            return (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var result = List[Long]()\n            var count = 0L\n            while (l.length > 0 && r.length > 0) {\n                if (l.head <= r.head) {\n                    result = result :+ l.head\n                    l = l.tail\n                } else {\n                    result = result :+ r.head\n                    r = r.tail\n                    count += left.length\n                }\n            }\n            if (l.length > 0) result = result ::: l\n            if (r.length > 0) result = result ::: r\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7ppjuoad.scala:38)\n\tat Problem.main(tmp7ppjuoad.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = sort(left)\n            val (rightSorted, rightCount) = sort(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, count) = merge(left, right)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr1 : List[Long], arr2 : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < arr1.length && j < arr2.length) {\n                if (arr1(i) <= arr2(j)) {\n                    result += arr1(i)\n                    i += 1\n                } else {\n                    result += arr2(j)\n                    j += 1\n                    count += arr1.length - i\n                }\n            }\n            while (i < arr1.length) {\n                result += arr1(i)\n                i += 1\n            }\n            while (j < arr2.length) {\n                result += arr2(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.take(mid))\n                val (right, rightCount) = mergeSort(arr.drop(mid))\n                val (result, mergeCount) = merge(left, right)\n                (result, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while(i < left.length && j < right.length) {\n                if (left(i) > right(j)) {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                } else {\n                    result = result :+ left(i)\n                    i += 1\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc15wkc5f.scala:43)\n\tat Problem.main(tmpc15wkc5f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (sorted, splitInv) = merge(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                val (left1, left2) = left.splitAt(1)\n                val (right1, right2) = right.splitAt(1)\n                if (head <= right1.head) {\n                    val (sorted, inv) = merge(left2, right)\n                    (left1 ::: sorted, inv)\n                }\n                else {\n                    val (sorted, inv) = merge(left, right2)\n                    (right1 ::: sorted, inv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (sorted, splitInv) = merge(leftSorted, rightSorted)\n            (sorted, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            val (leftHead, leftTail) = (left.head, left.tail)\n            val (rightHead, rightTail) = (right.head, right.tail)\n            if (leftHead <= rightHead) {\n                val (sorted, inv) = merge(leftTail, right)\n                (leftHead :: sorted, inv)\n            } else {\n                val (sorted, inv) = merge(left, rightTail)\n                (rightHead :: sorted, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            val n = arr.length\n            if (n == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(n / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var (leftIndex, rightIndex, splitInv) = (0, 0, 0)\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ++ left.slice(leftIndex, left.length)\n            else merged = merged ++ right.slice(rightIndex, right.length)\n            (merged, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, mergeInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + mergeInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                if (head <= right.head) {\n                    val (merged, splitInv) = merge(tail, right)\n                    (head :: merged, splitInv)\n                } else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j, count) = (0, 0, 0L)\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            count\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqjn9d061.scala:34:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            count\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (count : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqjn9d061.scala:36:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else if (left.head <= right.head) {\n                val (merged, splitInv) = merge(left.tail, right)\n                (left.head :: merged, splitInv)\n            }\n            else {\n                val (merged, splitInv) = merge(left, right.tail)\n                (right.head :: merged, splitInv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                if (left.head < right.head) {\n                    val (l, count) = merge(left.tail, right)\n                    (left.head :: l, count)\n                } else {\n                    val (l, count) = merge(left, right.tail)\n                    (right.head :: l, count + left.length)\n                }\n            }\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (l, count1) = sort(left)\n                val (r, count2) = sort(right)\n                val (res, count3) = merge(l, r)\n                (res, count1 + count2 + count3)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7rzjyt9d.scala:33)\n\tat Problem.main(tmp7rzjyt9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while(i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkpjuyo5i.scala:41)\n\tat Problem.main(tmpkpjuyo5i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var k = 0; var count = 0L\n            val nL = left.length; val nR = right.length\n            while (i < nL && j < nR) {\n                if (left(i) <= right(j)) {\n                    arr(k) = left(i); i += 1\n                } else {\n                    arr(k) = right(j); j += 1; count += nL - i\n                }\n                k += 1\n            }\n            while (i < nL) {\n                arr(k) = left(i); i += 1; k += 1\n            }\n            while (j < nR) {\n                arr(k) = right(j); j += 1; k += 1\n            }\n            (arr, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            val n = arr.length\n            if (n < 2) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(n / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(arr, leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppt4hcbj0.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    arr(k) = left(i); i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppt4hcbj0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    arr(k) = right(j); j += \u001b[31m1\u001b[0m; count += nL - i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppt4hcbj0.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                arr(k) = left(i); i += \u001b[31m1\u001b[0m; k += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppt4hcbj0.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                arr(k) = right(j); j += \u001b[31m1\u001b[0m; k += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value update is not a member of List[Long] - did you mean arr.updated?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0; var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (result, splitInvCount) = merge(leftSorted, rightSorted)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var invCount = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sort(left)\n                val (rightSorted, rightCount) = sort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversions = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) merged = merged ::: right.slice(rightIndex, right.length)\n            (merged, inversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long], invCount : Long) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, invCount)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left, invCount)\n                val (rightSorted, rightInvCount) = mergeSort(right, invCount)\n                val (merged, mergedInvCount) = merge(leftSorted, rightSorted, invCount)\n                (merged, leftInvCount + rightInvCount + mergedInvCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n            if (left.isEmpty) (right, invCount)\n            else if (right.isEmpty) (left, invCount)\n            else if (left.head <= right.head) {\n                val (merged, mergedInvCount) = merge(left.tail, right, invCount)\n                (left.head :: merged, mergedInvCount)\n            }\n            else {\n                val (merged, mergedInvCount) = merge(left, right.tail, invCount)\n                (right.head :: merged, mergedInvCount + left.length)\n            }\n        }\n        mergeSort(arr, 0)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, count) = merge(left, right)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            }\n            if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqy37rhpw.scala:41)\n\tat Problem.main(tmpqy37rhpw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left, right)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            result\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_n2devy3.scala:42)\n\tat Problem.main(tmp_n2devy3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left, right)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var l = 0\n            var r = 0\n            var result = List[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result = result :+ left(l)\n                    l += 1\n                } else {\n                    result = result :+ right(r)\n                    r += 1\n                }\n            }\n            if (l < left.length) result = result ++ left.slice(l, left.length)\n            if (r < right.length) result = result ++ right.slice(r, right.length)\n            result\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfntci12a.scala:34)\n\tat Problem.main(tmpfntci12a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var (i, j, inv) = (0, 0, 0)\n            var merged = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    merged += left(i)\n                    i += 1\n                } else {\n                    merged += right(j)\n                    j += 1\n                    inv += left.length - i\n                }\n            }\n            while (i < left.length) {\n                merged += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                merged += right(j)\n                j += 1\n            }\n            (merged.toList, inv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, splitCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (sorted, splitInv) = merge(leftSorted, rightSorted)\n            (sorted, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var inv = 0L\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    inv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) result = result ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) result = result ::: right.slice(rightIndex, right.length)\n            (result, inv)\n        }\n        val (sorted, inv) = mergeSort(arr)\n        inv\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0\n            var invCount = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, splitCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInvCount) = merge(left, right)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInv) = mergeSort(arr.slice(0, mid))\n            val (right, rightInv) = mergeSort(arr.slice(mid, arr.length))\n            val (merged, splitInv) = merge(left, right)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var inv = 0L\n            var merged = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    merged += left(i)\n                    i += 1\n                } else {\n                    merged += right(j)\n                    j += 1\n                    inv += left.length - i\n                }\n            }\n            while (i < left.length) {\n                merged += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                merged += right(j)\n                j += 1\n            }\n            (merged.toList, inv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length\n            if (n <= 1) return arr\n            val (left, right) = arr.splitAt(n / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j, count) = (0, 0, 0L)\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            count\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq_hy_2g.scala:35:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            count\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (count : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq_hy_2g.scala:37:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) result ++= left.slice(i, left.length)\n            else if (j < right.length) result ++= right.slice(j, right.length)\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0L)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.filter(x => x._1 != arr(x._2)).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpur0o2ejy.scala:22)\n\tat Problem.main(tmpur0o2ejy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (sorted, invCount) = merge(left.tail, right)\n                (left.head :: sorted, invCount)\n            } else {\n                val (sorted, invCount) = merge(left, right.tail)\n                (right.head :: sorted, invCount + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            merged = merged ::: left.slice(leftIndex, left.length) ::: right.slice(rightIndex, right.length)\n            (merged, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left, right)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            result\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb8ualj6t.scala:42)\n\tat Problem.main(tmpb8ualj6t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                val leftCount = countInv(left)\n                val rightCount = countInv(right)\n                val splitCount = countSplitInv(leftSorted, rightSorted)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInv(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInv(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            val result = new ListBuffer[Long]\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = sortAndCount(left)\n            val (rightSorted, rightCount) = sortAndCount(right)\n            val (result, splitCount) = mergeAndCount(leftSorted, rightSorted)\n            (result, leftCount + rightCount + splitCount)\n        }\n        sortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (sorted, splitInv) = merge(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                if (left.head <= right.head) {\n                    val (sorted, inv) = merge(left.tail, right)\n                    (left.head :: sorted, inv)\n                }\n                else {\n                    val (sorted, inv) = merge(left, right.tail)\n                    (right.head :: sorted, inv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val headLeft :: tailLeft = left\n                val headRight :: tailRight = right\n                if (headLeft <= headRight) {\n                    val (merged, splitInv) = merge(tailLeft, right)\n                    (headLeft :: merged, splitInv)\n                }\n                else {\n                    val (merged, splitInv) = merge(left, tailRight)\n                    (headRight :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversions = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ++ left.drop(leftIndex)\n            if (rightIndex < right.length) merged = merged ++ right.drop(rightIndex)\n            (merged, inversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                val h :: t = right\n                if (head <= h) {\n                    val (merged, count) = merge(tail, right)\n                    (head :: merged, count)\n                }\n                else {\n                    val (merged, count) = merge(left, t)\n                    (h :: merged, count + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.size <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.size / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countSplitInv(left : List[Long], right : List[Long]) : Long = {\n            var (i, j, count) = (0, 0, 0)\n            while (i < left.size && j < right.size) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    count += left.size - i\n                    j += 1\n                }\n            }\n            count\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.size <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.size / 2)\n                countInv(left) + countInv(right) + countSplitInv(left, right)\n            }\n        }\n        countInv(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnh0ghm9b.scala:40)\n\tat Problem.main(tmpnh0ghm9b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                val (merged, splitInv) = merge(tail, right)\n                if (head <= merged.head) (head :: merged, splitInv)\n                else (merged.head :: head :: merged.tail, splitInv + merged.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzst6934i.scala:31)\n\tat Problem.main(tmpzst6934i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, splitCount) = merge(arr, leftSorted, rightSorted)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            return (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            return merge(leftSorted, rightSorted)\n        }\n        val (sorted, count) = mergeSort(arr)\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu6paqq7_.scala:42)\n\tat Problem.main(tmpu6paqq7_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInv) = mergeSort(arr.slice(0, mid))\n            val (right, rightInv) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInv) = merge(left, right)\n            (result, leftInv + rightInv + splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return 0\n        val (left, right) = arr.splitAt(n / 2)\n        val leftCount = getInvCount(left)\n        val rightCount = getInvCount(right)\n        val mergeCount = mergeAndCount(left, right)\n        return leftCount + rightCount + mergeCount\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp38n4a6nq.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmergeCount\u001b[0m = mergeAndCount(left, right)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mergeAndCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else {\n                if (left.head <= right.head) left.head :: merge(left.tail, right)\n                else right.head :: merge(left, right.tail)\n            }\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                val leftCount = countInv(left)\n                val rightCount = countInv(right)\n                val splitCount = countSplitInv(leftSorted, rightSorted)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInv(left : List[Long], right : List[Long]) : Long = {\n            var count = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInv(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftCount = countInversions(left)\n                val rightCount = countInversions(right)\n                val splitCount = countSplitInversions(left, right)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjzy7loc.scala:45)\n\tat Problem.main(tmpcjzy7loc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.size == 0) right\n            else if (right.size == 0) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.size <= 1) arr\n            else {\n                val mid = arr.size / 2\n                val left = mergeSort(arr.slice(0, mid))\n                val right = mergeSort(arr.slice(mid, arr.size))\n                merge(left, right)\n            }\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.size == 0) (right, 0)\n            else if (right.size == 0) (left, 0)\n            else if (left.head < right.head) {\n                val (l, c) = mergeCount(left.tail, right)\n                (left.head :: l, c)\n            }\n            else {\n                val (l, c) = mergeCount(left, right.tail)\n                (right.head :: l, c + left.size)\n            }\n        }\n        def mergeSortCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.size <= 1) (arr, 0)\n            else {\n                val mid = arr.size / 2\n                val (left, c1) = mergeSortCount(arr.slice(0, mid))\n                val (right, c2) = mergeSortCount(arr.slice(mid, arr.size))\n                mergeCount(left, right)\n            }\n        }\n        mergeSortCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvw3i41_2.scala:45)\n\tat Problem.main(tmpvw3i41_2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length\n            if (n <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(n / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                }\n            }\n            if (leftIndex < left.length) result = result ++ left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) result = result ++ right.slice(rightIndex, right.length)\n            result\n        }\n        mergeSort(arr).foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2xxnmz6u.scala:36)\n\tat Problem.main(tmp2xxnmz6u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqcssi9_y.scala:43)\n\tat Problem.main(tmpqcssi9_y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.map(x => (x._1, x._2 + 1)).map(x => x._1 * x._2).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3v6eov1s.scala:22)\n\tat Problem.main(tmp3v6eov1s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSortAndCount(arr.slice(0, mid))\n            val (right, rightCount) = mergeSortAndCount(arr.slice(mid, arr.length))\n            val (result, splitCount) = mergeAndCount(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInversions) = mergeSort(left)\n            val (rightSorted, rightInversions) = mergeSort(right)\n            val (sorted, splitInversions) = merge(leftSorted, rightSorted)\n            (sorted, leftInversions + rightInversions + splitInversions)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var inversions = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            var sorted = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    sorted = sorted :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    sorted = sorted :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) sorted = sorted ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) sorted = sorted ::: right.slice(rightIndex, right.length)\n            (sorted, inversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = 0\n            var r = 0\n            var result = ListBuffer[Long]()\n            var inv = 0L\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result += left(l)\n                    l += 1\n                } else {\n                    result += right(r)\n                    r += 1\n                    inv += left.length - l\n                }\n            }\n            while (l < left.length) {\n                result += left(l)\n                l += 1\n            }\n            while (r < right.length) {\n                result += right(r)\n                r += 1\n            }\n            (result.toList, inv)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitInvCount) = merge(left, right)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length\n            if (n == 1) arr\n            else {\n                val (left, right) = arr.splitAt(n / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j) = (0, 0)\n            var result = List[Long]()\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            count\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hef4pxi.scala:36:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            count\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (count : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hef4pxi.scala:38:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0L)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSortAndCount(left)\n            val (rightSorted, rightCount) = mergeSortAndCount(right)\n            val (sorted, splitCount) = mergeAndCount(leftSorted, rightSorted)\n            (sorted, leftCount + rightCount + splitCount)\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            }\n            if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) {\n                (arr, 0)\n            } else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, mergeCount) = merge(left, right)\n                (result, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftCount = countInversions(left)\n                val rightCount = countInversions(right)\n                val splitCount = countSplitInversions(left, right)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var i = 0\n            var j = 0\n            var count = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) < right(j)) i += 1\n                else {\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjidlo6oe.scala:45)\n\tat Problem.main(tmpjidlo6oe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                if (head <= right.head) {\n                    val (merged, splitInv) = merge(tail, right)\n                    (head :: merged, splitInv)\n                } else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        val (sorted, inv) = mergeSort(arr)\n        inv\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            val sortedLeft = mergeSort(left)\n            val sortedRight = mergeSort(right)\n            merge(sortedLeft, sortedRight)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            count\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zx2vf7x.scala:38:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            count\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (count : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zx2vf7x.scala:40:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    invCount += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                if (head <= right.head) {\n                    val (merged, splitInv) = merge(tail, right)\n                    (head :: merged, splitInv)\n                }\n                else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j, count) = (0, 0, 0L)\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i == left.length) result = result ++ right.slice(j, right.length)\n            else result = result ++ left.slice(i, left.length)\n            count\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124188,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjllqqh27.scala:28:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            count\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (count : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjllqqh27.scala:30:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (tail, inv) = merge(left.tail, right)\n                (left.head :: tail, inv)\n            } else {\n                val (tail, inv) = merge(left, right.tail)\n                (right.head :: tail, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = sortAndCount(left)\n            val (rightSorted, rightCount) = sortAndCount(right)\n            val (merged, splitCount) = mergeAndCount(arr, leftSorted, rightSorted)\n            (merged, leftCount + rightCount + splitCount)\n        }\n        sortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var l = 0\n            var r = 0\n            var result = List[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result = result :+ left(l)\n                    l += 1\n                } else {\n                    result = result :+ right(r)\n                    r += 1\n                    count += left.length - l\n                }\n            }\n            if (l < left.length) result = result ::: left.slice(l, left.length)\n            if (r < right.length) result = result ::: right.slice(r, right.length)\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, count) = merge(left, right)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        val n = arr.length\n        var inv_count = 0\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) > arr(j)) {\n                    inv_count += 1\n                }\n            }\n        }\n        inv_count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var inv_count = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    inv_count += 1\n                }\n            }\n        }\n        inv_count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left._1, right._1)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjrsds6em.scala:41)\n\tat Problem.main(tmpjrsds6em.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val left = arr.slice(0, mid)\n                val right = arr.slice(mid, arr.length)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, mergedInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + mergedInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0L)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8y2pzdgt.scala:43)\n\tat Problem.main(tmp8y2pzdgt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        val n = arr.length\n        var invCount = 0\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                if (arr(i) > arr(j)) {\n                    invCount += 1\n                }\n            }\n        }\n        invCount\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0L)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def getInvCount(arr : List[Long], count : Long) : Long = {\n            if (arr.length <= 1) count\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                getInvCount(mergeSort(left), getInvCount(mergeSort(right), count))\n            }\n        }\n        getInvCount(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp44ezp45f.scala:29)\n\tat Problem.main(tmp44ezp45f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergedCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergedCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) < right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, mergeCount) = merge(left, right)\n            (result, leftCount + rightCount + mergeCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124190,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw_2td8f4.scala:43)\n\tat Problem.main(tmpw_2td8f4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.foldLeft(0L)((count, x) => count + (x._2 - arr.indexOf(x._1)))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124190,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv10vx8_l.scala:22)\n\tat Problem.main(tmpv10vx8_l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversionCount = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    inversionCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, inversionCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (result, splitInvCount) = merge(leftSorted, rightSorted)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        val (_, invCount) = mergeSort(arr)\n        invCount\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (l, c) = merge(left.tail, right)\n                return (left.head :: l, c)\n            } else {\n                val (l, c) = merge(left, right.tail)\n                return (right.head :: l, c + left.length)\n            }\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (l, c1) = mergeSort(left)\n            val (r, c2) = mergeSort(right)\n            val (m, c3) = merge(l, r)\n            return (m, c1 + c2 + c3)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val left = arr.slice(0, mid)\n                val right = arr.slice(mid, arr.length)\n                val (sortedLeft, leftCount) = mergeSort(left)\n                val (sortedRight, rightCount) = mergeSort(right)\n                val (sorted, count) = merge(sortedLeft, sortedRight)\n                (sorted, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                merged = merged :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                merged = merged :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (merged, count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(arr, left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sort(left)\n                val (rightSorted, rightCount) = sort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (sorted, splitInv) = merge(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                if (left.head <= right.head) {\n                    val (sorted, inv) = merge(left.tail, right)\n                    (left.head :: sorted, inv)\n                } else {\n                    val (sorted, inv) = merge(left, right.tail)\n                    (right.head :: sorted, inv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = ListBuffer[Long]()\n            var splitInv = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result += left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result += right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) result ++= left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) result ++= right.slice(rightIndex, right.length)\n            (result.toList, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        val (sorted, count) = mergeSort(arr)\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp37sww0sn.scala:44)\n\tat Problem.main(tmp37sww0sn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.map(x => (x._1, x._2 + 1)).map(x => x._1 * x._2).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3v6eov1s.scala:22)\n\tat Problem.main(tmp3v6eov1s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var (leftIndex, rightIndex, splitInv) = (0, 0, 0)\n            var merged = ListBuffer[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged += left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged += right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            merged ++= left.slice(leftIndex, left.length)\n            merged ++= right.slice(rightIndex, right.length)\n            (merged.toList, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (sorted, splitInv) = merge(leftSorted, rightSorted)\n            (sorted, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            var sorted = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    sorted = sorted :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    sorted = sorted :+ right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) sorted = sorted ++ left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) sorted = sorted ++ right.slice(rightIndex, right.length)\n            (sorted, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0L)\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left._1, right._1)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpujxmzd6k.scala:38)\n\tat Problem.main(tmpujxmzd6k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            }\n            if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSortAndCount(arr.slice(0, mid))\n            val (right, rightCount) = mergeSortAndCount(arr.slice(mid, arr.length))\n            val (result, splitCount) = mergeAndCount(arr, left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                if (head <= right.head) {\n                    val (merged, count) = merge(tail, right)\n                    (head :: merged, count)\n                } else {\n                    val (merged, count) = merge(left, right.tail)\n                    (right.head :: merged, count + left.length)\n                }\n            }\n        }\n        val (sorted, count) = mergeSort(arr)\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            val result = new ListBuffer[Long]\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                }\n                else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSortAndCount(left)\n            val (rightSorted, rightCount) = mergeSortAndCount(right)\n            val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + splitCount)\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.size <= 1) return arr\n            val (left, right) = arr.splitAt(arr.size / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.size <= 1) return 0\n            val (left, right) = arr.splitAt(arr.size / 2)\n            countInv(left) + countInv(right) + mergeCount(left, right)\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : Long = {\n            if (left.isEmpty) return 0\n            if (right.isEmpty) return 0\n            if (left.head <= right.head) mergeCount(left.tail, right)\n            else mergeCount(left, right.tail) + left.size\n        }\n        countInv(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmss9hnp1.scala:31)\n\tat Problem.main(tmpmss9hnp1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, mergeInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + mergeInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (sorted, count) = merge(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (sorted, count) = merge(leftSorted, rightSorted)\n            (sorted, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (merged, inv) = merge(left.tail, right)\n                (left.head :: merged, inv)\n            } else {\n                val (merged, inv) = merge(left, right.tail)\n                (right.head :: merged, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            merged = merged ++ left.slice(leftIndex, left.length)\n            merged = merged ++ right.slice(rightIndex, right.length)\n            (merged, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            val sortedLeft = mergeSort(left)\n            val sortedRight = mergeSort(right)\n            merge(sortedLeft, sortedRight)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var i = 0\n            var j = 0\n            var result = List[Long]()\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            result\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124202,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnas2vhsz.scala:44)\n\tat Problem.main(tmpnas2vhsz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = left\n                if (head <= right.head) {\n                    val (merged, splitInv) = merge(tail, right)\n                    (head :: merged, splitInv)\n                }\n                else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = 0; var r = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result += left(l)\n                    l += 1\n                } else {\n                    result += right(r)\n                    r += 1\n                    count += left.length - l\n                }\n            }\n            if (l < left.length) {\n                result ++= left.slice(l, left.length)\n            } else if (r < right.length) {\n                result ++= right.slice(r, right.length)\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (sorted, splitInv) = merge(leftSorted, rightSorted)\n            (sorted, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (sorted, inv) = merge(left.tail, right)\n                (left.head :: sorted, inv)\n            } else {\n                val (sorted, inv) = merge(left, right.tail)\n                (right.head :: sorted, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510602,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124203,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwzm1mkop.scala:43)\n\tat Problem.main(tmpwzm1mkop.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count inversions in an array.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}