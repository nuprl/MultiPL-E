{
  "name": "mbpp_766_pair_wise",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 1 until l1.length) {\n            l2 = l2 :+ l1(i) * l1(i - 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        if (l1.length < 2) return List()\n        return List(l1(0) * l1(1)) ::: pairWise(l1.tail)",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        l1.zip(l1.tail).map(x => x._1 * x._2)",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        l1.sliding(2).map(x => x.reduce(_ * _)).toList",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        val l2 = l1.sliding(2).toList\n        l2.map(x => x.reduce(_ * _))",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        l1.sliding(2).map(x => x.reduce(_ * _)).toList",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.size - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        if (l1.length == 1) {\n            List(l1(0))\n        } else {\n            l1.head :: l1.tail.head :: pairWise(l1.tail.tail)\n        }",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        return l2",
    "        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 * x._2)",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = new ListBuffer[Long]\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        l2.toList",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 * x._2)",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 1 to l1.length - 1) {\n            l2 = l2 :+ l1(i - 1) * l1(i)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            result = (l1(i) * l1(i + 1)) :: result\n        }\n        result",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        val l2 = l1.sliding(2).toList\n        l2.map(x => x.reduce(_*_))",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            result = result :+ l1(i) * l1(i + 1)\n        }\n        result",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = new ListBuffer[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        return l2.toList",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        l1.sliding(2).toList.map(x => x(0) * x(1))",
    "        l1.zip(l1.tail).map(x => x._1 * x._2)",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        if (l1.length == 0) return List[Long]()\n        if (l1.length == 1) return List[Long]()\n        return List(l1(0) * l1(1)) ++ pairWise(l1.tail)",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        val l2 = l1.sliding(2).toList\n        l2.map(x => x(0) * x(1))",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        l1.zip(l1.tail).map(x => x._1 * x._2)",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        l1.sliding(2).map(x => x.reduceLeft(_ * _)).toList",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        val l2 = l1.sliding(2).toList\n        l2.map(x => x.reduceLeft(_ * _))",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        if (l1.length == 1) l1\n        else {\n            val l2 = l1.tail\n            val l3 = l1.head + l2.head\n            l3 :: pairWise(l2)\n        }",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        l1.zip(l1.tail).map(x => x._1 * x._2)",
    "        l1.zip(l1.tail).map(x => x._1 * x._2)",
    "        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 1 until l1.length) {\n            l2 = l2 :+ l1(i - 1) * l1(i)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2",
    "        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2"
  ]
}