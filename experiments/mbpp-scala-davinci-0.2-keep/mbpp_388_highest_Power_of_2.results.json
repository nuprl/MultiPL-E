{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28dcwdbo.scala:9:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = pow(\u001b[31m2\u001b[0m, i).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1L\n        while (result <= n) {\n            i += 1\n            result = pow(2, i).toLong\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        while (pow(2, power) <= n) power += 1\n        power - 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp53_mfh9z.scala:11)\n\tat Problem.main(tmp53_mfh9z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var y = 0\n        while(x > 0) {\n            x = x >> 1\n            y += 1\n        }\n        return 1 << (y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        while (x % 2 == 0) x /= 2\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72l6vzul.scala:11)\n\tat Problem.main(tmp72l6vzul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        while (x % 2 == 0) x /= 2\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72l6vzul.scala:11)\n\tat Problem.main(tmp72l6vzul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) i *= 2\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while(i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p = p << 1\n        }\n        p >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while(x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpockn9f64.scala:15)\n\tat Problem.main(tmpockn9f64.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        while(x % 2 == 0) x /= 2\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgt8503h7.scala:11)\n\tat Problem.main(tmpgt8503h7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) x *= 2\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var i = 0\n        while (x > 1) {\n            x /= 2\n            i += 1\n        }\n        pow(2, i).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) i *= 2\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 1L\n        while (power * 2 <= n) {\n            power *= 2\n        }\n        return power\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L;\n        while (i < n) {\n            i *= 2;\n        }\n        i / 2;\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwei44dxm.scala:15)\n\tat Problem.main(tmpwei44dxm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var p = 1\n        while (p <= n) {\n            i += 1\n            p *= 2\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) x *= 2\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        while (x % 2 == 0) x /= 2\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp72l6vzul.scala:11)\n\tat Problem.main(tmp72l6vzul.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while(i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) x *= 2\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var res = 1L\n        while (res <= n) {\n            res *= 2\n        }\n        res / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L;\n        while (i <= n) {\n            i *= 2;\n        }\n        return i / 2;\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0L\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result < n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp02486n87.scala:15)\n\tat Problem.main(tmp02486n87.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var i = 0\n        while (x > 0) {\n            x >>= 1\n            i += 1\n        }\n        1L << (i - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) x <<= 1\n        x >>= 1\n        return x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        return i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaaltr8g.scala:15)\n\tat Problem.main(tmpuaaltr8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) i += 1\n        pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result * 2 <= n) result *= 2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        return x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = n\n        while (i % 2 == 0) i /= 2\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr_qwfmld.scala:11)\n\tat Problem.main(tmpr_qwfmld.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 1L\n        while (power <= n) {\n            power *= 2\n        }\n        power / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            i += 1\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        return i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var i = 0\n        while (x > 0) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << (i - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var y = 0\n        while (x % 2 == 0) {\n            x /= 2\n            y += 1\n        }\n        pow(2, y).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzllw53x5.scala:15)\n\tat Problem.main(tmpzllw53x5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x <<= 1\n        }\n        x >>= 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpndp1_6ft.scala:10:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        x >>= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i < n) i *= 2\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbo3fae6y.scala:13)\n\tat Problem.main(tmpbo3fae6y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        while (pow(2, power) <= n) {\n            power += 1\n        }\n        power - 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp3p12bhu.scala:13)\n\tat Problem.main(tmpp3p12bhu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        i - 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl3ps29w8.scala:13)\n\tat Problem.main(tmpl3ps29w8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        return x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        return i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuaaltr8g.scala:15)\n\tat Problem.main(tmpuaaltr8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result = result << 1\n            i += 1\n        }\n        result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) x *= 2\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        return i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) result *= 2\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 0L\n        while (i <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyilw9zsu.scala:15)\n\tat Problem.main(tmpyilw9zsu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var i = 0\n        while (x > 1) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28dcwdbo.scala:9:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = pow(\u001b[31m2\u001b[0m, i).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var res = 0L\n        while (res <= n) {\n            res = pow(2, i).toLong\n            i += 1\n        }\n        res / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var res = 1L\n        while (res <= n) {\n            res *= 2\n        }\n        res / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i < n) i *= 2\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbo3fae6y.scala:13)\n\tat Problem.main(tmpbo3fae6y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i * 2 <= n) i *= 2\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var y = 0\n        while (x > 0) {\n            x >>= 1\n            y += 1\n        }\n        return 1 << (y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while(x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result : Long = 1\n        while (result <= n) result *= 2\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result = result << 1\n            i += 1\n        }\n        result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var p = 0\n        while (x > 0) {\n            x >>= 1\n            p += 1\n        }\n        return 1 << (p - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var i = 0\n        while (x > 0) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << (i - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) p *= 2\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 1L\n        while (power <= n) {\n            power *= 2\n        }\n        power / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        return i\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var y = 0\n        while (x > 0) {\n            x = x >> 1\n            y = y + 1\n        }\n        return 1 << (y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 1\n        while (result <= n) {\n            result <<= 1\n            i += 1\n        }\n        result >>= 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28dcwdbo.scala:9:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = pow(\u001b[31m2\u001b[0m, i).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    Long\n\u001b[31m  |\u001b[0m                     Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = n\n        var count = 0\n        while (x % 2 == 0) {\n            count += 1\n            x /= 2\n        }\n        pow(2, count).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1w32b88d.scala:15)\n\tat Problem.main(tmp1w32b88d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var x = 1L\n        while (x * 2 <= n) x *= 2\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var power = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) i *= 2\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2\n    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665517546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}