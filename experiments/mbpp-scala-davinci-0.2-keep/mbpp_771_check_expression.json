{
  "name": "mbpp_771_check_expression",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    def checkExpression(exp : String) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            if (exp(i) == '(' || exp(i) == '{' || exp(i) == '[') stack.push(exp(i))\n            else if (exp(i) == ')' || exp(i) == '}' || exp(i) == ']') {\n                if (stack.isEmpty) return false\n                val c = stack.pop\n                if (c == '(' && exp(i) != ')') return false\n                if (c == '{' && exp(i) != '}') return false\n                if (c == '[' && exp(i) != ']') return false\n            }\n        }\n        if (stack.isEmpty) true else false",
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            exp(i) match {\n                case '(' => stack.push(exp(i))\n                case ')' => if (stack.isEmpty || stack.pop != '(') return false\n                case '[' => stack.push(exp(i))\n                case ']' => if (stack.isEmpty || stack.pop != '[') return false\n                case '{' => stack.push(exp(i))\n                case '}' => if (stack.isEmpty || stack.pop != '{') return false\n                case _ =>\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        var stack = new Stack[Char]()\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            if (exp(i) == '(' || exp(i) == '[' || exp(i) == '{') stack.push(exp(i))\n            else if (exp(i) == ')' || exp(i) == ']' || exp(i) == '}') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (exp(i) == ')' && top != '(') return false\n                if (exp(i) == ']' && top != '[') return false\n                if (exp(i) == '}' && top != '{') return false\n            }\n        }\n        if (stack.isEmpty) true else false",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = Stack[Char]()\n        for (i <- 0 until exp.length) {\n            val c = exp(i)\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == ']' && top != '[') return false\n                if (c == '}' && top != '{') return false\n            }\n        }\n        stack.isEmpty",
    "        var stack = Stack[Char]()\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                if (stack.pop != c) return false\n            }\n        }\n        return stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            val c = exp(i)\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                else if (c == ']' && top != '[') return false\n                else if (c == '}' && top != '{') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            val c = exp(i)\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        if (stack.isEmpty) true else false",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty || stack.pop() != '(') return false\n            }\n            else if (c == ']') {\n                if (stack.isEmpty || stack.pop() != '[') return false\n            }\n            else if (c == '}') {\n                if (stack.isEmpty || stack.pop() != '{') return false\n            }\n        }\n        stack.isEmpty",
    "        var stack = new Stack[Char]()\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                if (c == ')' && stack.pop() != '(') return false\n                if (c == '}' && stack.pop() != '{') return false\n                if (c == ']' && stack.pop() != '[') return false\n            }\n        }\n        if (stack.isEmpty) true else false",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else if (c == ')' && stack.pop() != '(') return false\n            else if (c == ']' && stack.pop() != '[') return false\n            else if (c == '}' && stack.pop() != '{') return false\n        }\n        true",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                else if (c == ']' && top != '[') return false\n                else if (c == '}' && top != '{') return false\n            }\n        }\n        return stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '{' || c == '[') stack.push(c)\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty) return false\n                val top = stack.pop\n                if (c == ')' && top != '(') return false\n                if (c == '}' && top != '{') return false\n                if (c == ']' && top != '[') return false\n            }\n        }\n        if (stack.isEmpty) true else false",
    "        val stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            exp(i) match {\n                case '(' | '{' | '[' => stack.push(exp(i))\n                case ')' => if (stack.isEmpty || stack.pop != '(') return false\n                case '}' => if (stack.isEmpty || stack.pop != '{') return false\n                case ']' => if (stack.isEmpty || stack.pop != '[') return false\n            }\n        }\n        stack.isEmpty",
    "        val stack = new Stack[Char]\n        for (c <- exp) {\n            if (c == '(' || c == '[' || c == '{') stack.push(c)\n            else {\n                if (stack.isEmpty) return false\n                if (c == ')' && stack.pop != '(') return false\n                if (c == ']' && stack.pop != '[') return false\n                if (c == '}' && stack.pop != '{') return false\n            }\n        }\n        stack.isEmpty",
    "        var stack = new Stack[Char]\n        for (i <- 0 until exp.length) {\n            if (exp(i) == '(' || exp(i) == '{' || exp(i) == '[') stack.push(exp(i))\n            else if (exp(i) == ')' || exp(i) == '}' || exp(i) == ']') {\n                if (stack.isEmpty) return false\n                if (exp(i) == ')' && stack.pop != '(') return false\n                if (exp(i) == '}' && stack.pop != '{') return false\n                if (exp(i) == ']' && stack.pop != '[') return false\n            }\n        }\n        if (stack.isEmpty) true else false"
  ]
}