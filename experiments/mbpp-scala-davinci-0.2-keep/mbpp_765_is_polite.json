{
  "name": "mbpp_765_is_polite",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    def isPolite(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPolite((7l)) == (11l));\n    assert(isPolite((4l)) == (7l));\n    assert(isPolite((9l)) == (13l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1L\n        while (i * i <= n) {\n            if (n % i == 0) {\n                val j = n / i\n                if (i % 2 == 1 && j % 2 == 1) return i\n                if (i % 2 == 0 && j % 2 == 0) return j\n            }\n            i += 1\n        }\n        return -1",
    "        var x = n\n        var i = 2\n        while (i * i <= x) {\n            if (x % i == 0) {\n                x /= i\n                i -= 1\n            }\n            i += 1\n        }\n        x",
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1\n        var sum = 0L\n        while (i <= n) {\n            if (n % i == 0) {\n                sum += i\n            }\n            i += 1\n        }\n        return sum",
    "        var i = 1\n        while(i <= n) {\n            if(n % i == 0) return i\n            i += 1\n        }\n        return 0",
    "        var x = n\n        var count = 0\n        while (x % 2 == 0) {\n            x /= 2\n            count += 1\n        }\n        while (x % 3 == 0) {\n            x /= 3\n            count += 1\n        }\n        while (x % 5 == 0) {\n            x /= 5\n            count += 1\n        }\n        if (x == 1) count else -1",
    "        var i = 1\n        var count = 0\n        while (count < n) {\n            i += 1\n            if (isPrime(i)) count += 1\n        }\n        return i",
    "        var i = 1\n        var count = 0\n        while (count < n) {\n            if (isPrime(i)) {\n                count += 1\n            }\n            i += 1\n        }\n        i - 1",
    "        var i = 2L\n        var result = 1L\n        while (i * i <= n) {\n            if (n % i == 0) {\n                result = result * i\n                while (n % i == 0) {\n                    n /= i\n                }\n            }\n            i += 1\n        }\n        if (n > 1) result = result * n\n        result",
    "        var i = 1\n        while(i <= n) {\n            if(n % i == 0) return i\n            i += 1\n        }\n        return -1",
    "        var result = 0L\n        for (i <- 1 to n.toInt) {\n            if (n % i == 0) result += i\n        }\n        result",
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1\n        while (i * i <= n) {\n            if (n % i == 0) {\n                val j = n / i\n                if (j != i) return i + j\n                else return i\n            }\n            i += 1\n        }\n        return 0",
    "        var sum = 0L\n        var i = 1L\n        while (i * i <= n) {\n            if (n % i == 0) {\n                sum += i\n                if (i * i != n) sum += n / i\n            }\n            i += 1\n        }\n        return sum",
    "        var i = 1\n        var sum = 0L\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        val factors = new ArrayBuffer[Long]\n        var i = 2L\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors += i\n                factors += n / i\n            }\n            i += 1\n        }\n        factors.toSet.size",
    "        var i = 1;\n        var sum = 0;\n        while (sum < n) {\n            if (n % i == 0) sum += i;\n            i += 1;\n        }\n        if (sum == n) return n;\n        else return -1;"
  ]
}