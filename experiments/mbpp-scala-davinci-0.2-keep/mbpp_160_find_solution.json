{
  "name": "mbpp_160_find_solution",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    def findSolution(a : Long, b : Long, n : Long) : Option[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSolution((2l), (3l), (7l)).equals((2l, 1l)));\n    assert(findSolution((4l), (2l), (7l)).equals(None));\n    assert(findSolution((1l), (13l), (17l)).equals((4l, 1l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclid(a, b)\n        Some(x * (n / gcd(a, b)))",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = solve(a, b)\n        Some(x * (n / gcd(a, b)))",
    "        val m = n % a\n        if (m == 0) Some(n / a)\n        else if (m % b == 0) Some(m / b)\n        else None",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclid(a, b)\n        val d = gcd(a, b)\n        Some(x * (n / d))",
    "        if (n % gcd(a, b) != 0) None else Some(n / b)",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclid(a, b)\n        Some(x * (n / gcd(a, b)))",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclid(a, b)\n        val d = gcd(a, b)\n        Some(x * (n / d))",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclid(a, b)\n        val d = gcd(a, b)\n        Some(x * (n / d))",
    "        if (n % gcd(a, b) == 0) {\n            val (x, y) = extendedEuclid(a, b)\n            Some(x * (n / gcd(a, b)))\n        } else None",
    "        val x = n / a\n        val y = n / b\n        val xy = x * y\n        val xy1 = (x + 1) * (y + 1)\n        if (xy < n && n < xy1) Some(n - xy)\n        else if (n == xy) Some(0)\n        else None",
    "        if (n % gcd(a, b) != 0) None\n        else {\n            val (x, y) = extendedEuclidean(a, b)\n            val d = gcd(a, b)\n            Some(x * (n / d))\n        }",
    "        val gcd = BigInt(a).gcd(BigInt(b)).toLong\n        if (n % gcd != 0) return None\n        val x = (n / gcd) * (b / gcd)\n        val y = (n / gcd) * (a / gcd)\n        Some(x)",
    "        if (n % gcd(a, b) != 0) None\n        else {\n            val (x, y) = extendedEuclidean(a, b)\n            Some(x * (n / gcd(a, b)))\n        }",
    "        if (n % gcd(a, b) != 0) None else Some(n / a)",
    "        def findSolution(x : Long, y : Long) : Option[Long] = {\n            if (a * x + b * y == n) Some(x)\n            else if (x > n) None\n            else findSolution(x + 1, y)\n        }\n        findSolution(0, 0)",
    "        var x = 0\n        var y = 0\n        var found = false\n        while (x <= n) {\n            y = (n - a * x) / b\n            if (a * x + b * y == n) {\n                found = true\n                return Some(x)\n            }\n            x += 1\n        }\n        if (!found) None",
    "        if (n % gcd(a, b) != 0) return None\n        val (x, y) = extendedEuclidean(a, b)\n        val d = gcd(a, b)\n        Some(x * (n / d))",
    "        val x = n / a\n        val y = n / b\n        val xy = x * y\n        val xy1 = (x + 1) * (y + 1)\n        val xy2 = (x + 1) * y\n        val xy3 = x * (y + 1)\n        if (xy == n) Some(x)\n        else if (xy1 == n) Some(x + 1)\n        else if (xy2 == n) Some(x + 1)\n        else if (xy3 == n) Some(x)\n        else None",
    "        if (n % gcd(a, b) != 0) None\n        else {\n            val (x, y) = extendedEuclid(a, b)\n            Some(x * (n / gcd(a, b)))\n        }",
    "        if (n % gcd(a, b) != 0) None\n        else {\n            val (x, y) = extendedEuclidean(a, b)\n            val d = gcd(a, b)\n            Some(x * (n / d))\n        }"
  ]
}