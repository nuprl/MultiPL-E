{
  "name": "mbpp_442_positive_count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.size.toFloat / nums.size.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzlnpli35.scala:10)\n\tat Problem.main(tmpzlnpli35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(_ > 0).size.toFloat / nums.size\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp9ho70qc.scala:9)\n\tat Problem.main(tmpp9ho70qc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var positive = 0\n        for (num <- nums) {\n            if (num > 0) positive += 1\n        }\n        return positive.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy2k88o1z.scala:13)\n\tat Problem.main(tmpy2k88o1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyz3jhnz.scala:13)\n\tat Problem.main(tmpbyz3jhnz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprmdu6vrx.scala:10)\n\tat Problem.main(tmprmdu6vrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(x => x > 0).length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_kfpeoqj.scala:9)\n\tat Problem.main(tmp_kfpeoqj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.size.toFloat / nums.size.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzlnpli35.scala:10)\n\tat Problem.main(tmpzlnpli35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf5kxsee0.scala:10)\n\tat Problem.main(tmpf5kxsee0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val (pos, neg) = nums.partition(_ > 0)\n        pos.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8fvlw4bq.scala:10)\n\tat Problem.main(tmp8fvlw4bq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptdrp3j5b.scala:10)\n\tat Problem.main(tmptdrp3j5b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmyflxkv6.scala:13)\n\tat Problem.main(tmpmyflxkv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyz3jhnz.scala:13)\n\tat Problem.main(tmpbyz3jhnz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positiveCount = nums.filter(x => x > 0).length\n        return positiveCount.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp73gy8vgl.scala:10)\n\tat Problem.main(tmp73gy8vgl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp330y0r8b.scala:10)\n\tat Problem.main(tmp330y0r8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (n <- nums) {\n            if (n > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwyuv4bzv.scala:13)\n\tat Problem.main(tmpwyuv4bzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val (pos, neg) = nums.partition(_ > 0)\n        pos.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyhq8vs54.scala:10)\n\tat Problem.main(tmpyhq8vs54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjs6yl9k1.scala:10)\n\tat Problem.main(tmpjs6yl9k1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(_ > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp12wicd2c.scala:10)\n\tat Problem.main(tmp12wicd2c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprmdu6vrx.scala:10)\n\tat Problem.main(tmprmdu6vrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(_ > 0).length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdhb4bgsu.scala:9)\n\tat Problem.main(tmpdhb4bgsu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var pos = 0\n        for (i <- nums) {\n            if (i > 0) pos += 1\n        }\n        return pos.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiqnzxjhh.scala:13)\n\tat Problem.main(tmpiqnzxjhh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp330y0r8b.scala:10)\n\tat Problem.main(tmp330y0r8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(_ > 0).length\n        val negatives = nums.filter(_ < 0).length\n        val zeros = nums.filter(_ == 0).length\n        val total = positives + negatives + zeros\n        return positives.toFloat / total\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplccb2hfw.scala:13)\n\tat Problem.main(tmplccb2hfw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positiveNums = nums.filter(num => num > 0)\n        return positiveNums.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq7rgmq6f.scala:10)\n\tat Problem.main(tmpq7rgmq6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjs6yl9k1.scala:10)\n\tat Problem.main(tmpjs6yl9k1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positiveNums = nums.filter(x => x > 0)\n        return positiveNums.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbd3m7tdi.scala:10)\n\tat Problem.main(tmpbd3m7tdi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val n = nums.length\n        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / n\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvovcr6sl.scala:11)\n\tat Problem.main(tmpvovcr6sl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positiveNums = nums.filter(x => x > 0)\n        positiveNums.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfyms_miq.scala:10)\n\tat Problem.main(tmpfyms_miq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val count = nums.count(x => x > 0)\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk0pje81e.scala:10)\n\tat Problem.main(tmpk0pje81e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4zh83h15.scala:10)\n\tat Problem.main(tmp4zh83h15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (n <- nums) {\n            if (n > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwyuv4bzv.scala:13)\n\tat Problem.main(tmpwyuv4bzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmyflxkv6.scala:13)\n\tat Problem.main(tmpmyflxkv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.size.toFloat / nums.size.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9cj_gnjb.scala:10)\n\tat Problem.main(tmp9cj_gnjb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp330y0r8b.scala:10)\n\tat Problem.main(tmp330y0r8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmyflxkv6.scala:13)\n\tat Problem.main(tmpmyflxkv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val pos = nums.filter(x => x > 0)\n        pos.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_ln_qwh1.scala:10)\n\tat Problem.main(tmp_ln_qwh1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(_ > 0).length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuqxmc_fv.scala:9)\n\tat Problem.main(tmpuqxmc_fv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter((x : Long) => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5oktq814.scala:10)\n\tat Problem.main(tmp5oktq814.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count : Long = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5g52rguu.scala:13)\n\tat Problem.main(tmp5g52rguu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptdrp3j5b.scala:10)\n\tat Problem.main(tmptdrp3j5b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) {\n                count += 1\n            }\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgqzpxdma.scala:15)\n\tat Problem.main(tmpgqzpxdma.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 0) count += 1\n        }\n        return (count.toFloat / nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm138qbej.scala:13)\n\tat Problem.main(tmpm138qbej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positiveNums = nums.filter(x => x > 0)\n        return positiveNums.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp087a3ke8.scala:10)\n\tat Problem.main(tmp087a3ke8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmyflxkv6.scala:13)\n\tat Problem.main(tmpmyflxkv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var posCount = 0\n        for (num <- nums) {\n            if (num > 0) posCount += 1\n        }\n        return posCount.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvbxmqt9m.scala:13)\n\tat Problem.main(tmpvbxmqt9m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp330y0r8b.scala:10)\n\tat Problem.main(tmp330y0r8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) {\n                count += 1\n            }\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgqzpxdma.scala:15)\n\tat Problem.main(tmpgqzpxdma.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1n9n6586.scala:13)\n\tat Problem.main(tmp1n9n6586.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(x => x > 0).length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_kfpeoqj.scala:9)\n\tat Problem.main(tmp_kfpeoqj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6_sc_5x.scala:10)\n\tat Problem.main(tmpc6_sc_5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(_ > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp12wicd2c.scala:10)\n\tat Problem.main(tmp12wicd2c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyn0q9ptr.scala:13)\n\tat Problem.main(tmpyn0q9ptr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(x => x > 0).length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq0wd3zv6.scala:9)\n\tat Problem.main(tmpq0wd3zv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf5kxsee0.scala:10)\n\tat Problem.main(tmpf5kxsee0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        nums.filter(x => x > 0).length.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_kfpeoqj.scala:9)\n\tat Problem.main(tmp_kfpeoqj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjs6yl9k1.scala:10)\n\tat Problem.main(tmpjs6yl9k1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp330y0r8b.scala:10)\n\tat Problem.main(tmp330y0r8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprmdu6vrx.scala:10)\n\tat Problem.main(tmprmdu6vrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn2oryh7z.scala:10)\n\tat Problem.main(tmpn2oryh7z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length\n    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
      "timestamp": 1665509681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdecol9jt.scala:13)\n\tat Problem.main(tmpdecol9jt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}