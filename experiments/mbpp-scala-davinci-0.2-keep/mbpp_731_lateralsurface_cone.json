{
  "name": "mbpp_731_lateralsurface_cone",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the lateral surface area of a cone given radius r and the height h.\n    def lateralsurfaceCone(r : Long, h : Long) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));\n    assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));\n    assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        return (pi * r * sqrt(r * r + h * h)).toFloat",
    "        val pi = 3.14\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface.toFloat",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface.toFloat",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        lateralSurface.toFloat",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi : Float = 3.14f\n        val lateralSurface : Float = pi * r * sqrt(r * r + h * h).toFloat\n        return lateralSurface",
    "        val pi = 3.14\n        return (pi * r * sqrt(r * r + h * h)).toFloat",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h)\n        return lateralSurface",
    "        val area = (2 * Pi * r * h).toFloat\n        area",
    "        return (2 * Pi * r * h).toFloat",
    "        val pi = 3.14f\n        val lateralSurface = pi * r * sqrt(r * r + h * h).toFloat\n        lateralSurface",
    "        val pi = 3.14f\n        val lateralSurfaceArea = pi * r * sqrt(r * r + h * h)\n        return lateralSurfaceArea"
  ]
}