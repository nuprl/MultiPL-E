{
  "name": "mbpp_281_all_unique",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check if the elements of a given list are unique or not.\n    def allUnique(test_list : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val test_set = test_list.toSet\n        return test_set.size == test_list.size",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true"
  ]
}