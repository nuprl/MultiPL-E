{
  "name": "mbpp_281_all_unique",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check if the elements of a given list are unique or not.\n    def allUnique(test_list : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val test_set = test_list.toSet\n        return test_set.size == test_list.size",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set.add(x)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var unique = true\n        var i = 0\n        while (i < test_list.length - 1 && unique) {\n            var j = i + 1\n            while (j < test_list.length && unique) {\n                if (test_list(i) == test_list(j)) unique = false\n                j += 1\n            }\n            i += 1\n        }\n        unique",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val unique_set = Set[Long]()\n        for (i <- test_list) {\n            if (unique_set.contains(i)) return false\n            else unique_set.add(i)\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val test_set = Set[Long]()\n        for (i <- test_list) {\n            if (test_set.contains(i)) return false\n            test_set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (element <- test_list) {\n            if (set.contains(element)) return false\n            set.add(element)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set.add(x)\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = test_list.toSet\n        return set.size == test_list.size",
    "        val unique_list = test_list.toSet\n        return unique_list.size == test_list.size",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val unique_list = test_list.distinct\n        return unique_list.length == test_list.length",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = test_list.toSet\n        return set.size == test_list.size",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val unique_set = new HashSet[Long]\n        for (i <- test_list) {\n            if (unique_set.contains(i)) return false\n            unique_set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val test_set = test_list.toSet\n        return test_list.length == test_set.size",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        test_list.distinct.length == test_list.length",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = test_list.toSet\n        if (set.size == test_list.size) true\n        else false",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set.add(x)\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        test_list.foreach(x => set.add(x))\n        set.size == test_list.size",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- 0 until test_list.length) {\n            if (set.contains(test_list(i))) return false\n            set.add(test_list(i))\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val unique_set = new HashSet[Long]\n        for (item <- test_list) {\n            if (unique_set.contains(item)) return false\n            unique_set += item\n        }\n        return true",
    "        var set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val unique_set = new HashSet[Long]\n        for (i <- test_list) {\n            if (unique_set.contains(i)) return false\n            unique_set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set.add(x)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val unique_list = test_list.distinct\n        return unique_list.length == test_list.length",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set.add(x)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        // Use a hashset to store the elements of the list.\n        val hashset = HashSet[Long]()\n        for (element <- test_list) {\n            // If the element is already in the hashset, then it is not unique.\n            if (hashset.contains(element)) return false\n            // Otherwise, add the element to the hashset.\n            hashset += element\n        }\n        // If all elements are unique, then return true.\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- 0 until test_list.length) {\n            if (set.contains(test_list(i))) {\n                return false\n            }\n            set += test_list(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set.add(i)\n        }\n        return true",
    "        val unique_list = test_list.distinct\n        if (unique_list.length == test_list.length) true else false",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        var unique = true\n        var i = 0\n        while (i < test_list.length && unique) {\n            var j = i + 1\n            while (j < test_list.length && unique) {\n                if (test_list(i) == test_list(j)) unique = false\n                j += 1\n            }\n            i += 1\n        }\n        unique",
    "        var unique = true\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    unique = false\n                }\n            }\n        }\n        return unique",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set.add(i)\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val unique_list = test_list.distinct\n        return unique_list.length == test_list.length",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var unique = true\n        val unique_set = Set[Long]()\n        for (i <- test_list) {\n            if (unique_set.contains(i)) {\n                unique = false\n                return unique\n            }\n            unique_set += i\n        }\n        return unique",
    "        val set = test_list.toSet\n        set.size == test_list.size",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            else set.add(x)\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true"
  ]
}