{
  "name": "mbpp_413_extract_nth_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the nth element from a given list of tuples.\n    def extractNthElement(list1 : List[Either[String, Long]], n : Long) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractNthElement((List[Either[String, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (0l)).equals((Any(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"))));\n    assert(extractNthElement((List[Either[String, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (2l)).equals((Any(99l.toLong, 96l.toLong, 94l.toLong, 98l.toLong))));\n    assert(extractNthElement((List[Either[String, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (1l)).equals((Any(98l.toLong, 97l.toLong, 91l.toLong, 94l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1(n.toInt).fold(identity, identity)",
    "        val list2 = list1.map(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        list2(n.toInt)",
    "        list1(n.toInt) match {\n            case Left(value) => value\n            case Right(value) => value\n        }",
    "        list1(n.toInt) match {\n            case Left(s) => s\n            case Right(l) => l\n        }",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(y) => y\n        }",
    "        list1(n.toInt) match {\n            case Left(s) => s\n            case Right(l) => l\n        }",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt)",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt) match {\n            case Left(s) => s\n            case Right(l) => l\n        }",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        def extractNthElementHelper(list1 : List[Either[String, Long]], n : Long, acc : Long) : Any = {\n            if (n == acc) {\n                list1.head match {\n                    case Left(x) => x\n                    case Right(x) => x\n                }\n            }\n            else extractNthElementHelper(list1.tail, n, acc + 1)\n        }\n        extractNthElementHelper(list1, n, 0)",
    "        list1.map(x => x.right.getOrElse(0)).toArray.apply(n.toInt)",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt) match {\n            case Left(s) => s\n            case Right(l) => l\n        }",
    "        val list2 = list1.map(x => x.right.getOrElse(0))\n        list2(n.toInt)",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt) match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        list1(n.toInt) match {\n            case Left(s) => s\n            case Right(l) => l\n        }"
  ]
}