{
  "name": "mbpp_446_count_Occurrence",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    def countOccurrence(tup : Any, lst : Any) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (Any(\"a\", \"b\"))) == (3l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (Any(1l.toLong, 4l.toLong, 7l.toLong))) == (6l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (Any(1l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tup_lst = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst_lst = lst.asInstanceOf[List[Any]]\n        val tup_lst_lst = List(tup_lst._1, tup_lst._2)\n        val count = lst_lst.count(x => tup_lst_lst.contains(x))\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            if (tupList(i) == lstList(0)) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = tup2.productIterator.toList.map(x => x.asInstanceOf[Int])\n        val lst4 = lst3.filter(x => tup3.contains(x))\n        lst4.length",
    "        lst match {\n            case l : List[Any] => {\n                tup match {\n                    case t : Tuple2[Any, Any] => {\n                        l.map(x => if (x == t._1) 1 else 0).sum\n                    }\n                    case _ => 0\n                }\n            }\n            case _ => 0\n        }",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val lst2 = lst.asInstanceOf[List[Any]]\n                for (i <- 0 until lst2.length) {\n                    if (lst2(i) == tup2._1 || lst2(i) == tup2._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Int]]\n        val tup1 = tup.asInstanceOf[Tuple2[Int, Int]]\n        val lst2 = lst1.filter(x => x >= tup1._1 && x <= tup1._2)\n        return lst2.length.toLong",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstList.length) {\n            if (tupList.contains(lstList(i))) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        tup match {\n            case tup : Tuple1[Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple2[Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3 || i == tup._4) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3 || i == tup._4 || i == tup._5) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 ||",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        val tupLen = tup.asInstanceOf[Tuple2[Any, Any]].productArity\n        val lstLen = lst.asInstanceOf[List[Any]].length\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Tuple2[Any, Any]].productElement(i) == lst.asInstanceOf[List[Any]].apply(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        val count = lstList.map(x => tupList.count(_ == x)).sum\n        return count",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- lstList) {\n            if (i == tupList._1) count += 1\n            if (i == tupList._2) count += 1\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        lst2.count(x => x == tup2._1) + lst2.count(x => x == tup2._2)",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count"
  ]
}