{
  "name": "mbpp_446_count_Occurrence",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    def countOccurrence(tup : Any, lst : Any) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (Any(\"a\", \"b\"))) == (3l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (Any(1l.toLong, 4l.toLong, 7l.toLong))) == (6l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (Any(1l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tup_lst = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst_lst = lst.asInstanceOf[List[Any]]\n        val tup_lst_lst = List(tup_lst._1, tup_lst._2)\n        val count = lst_lst.count(x => tup_lst_lst.contains(x))\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            if (tupList(i) == lstList(0)) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = tup2.productIterator.toList.map(x => x.asInstanceOf[Int])\n        val lst4 = lst3.filter(x => tup3.contains(x))\n        lst4.length",
    "        lst match {\n            case l : List[Any] => {\n                tup match {\n                    case t : Tuple2[Any, Any] => {\n                        l.map(x => if (x == t._1) 1 else 0).sum\n                    }\n                    case _ => 0\n                }\n            }\n            case _ => 0\n        }",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val lst2 = lst.asInstanceOf[List[Any]]\n                for (i <- 0 until lst2.length) {\n                    if (lst2(i) == tup2._1 || lst2(i) == tup2._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Int]]\n        val tup1 = tup.asInstanceOf[Tuple2[Int, Int]]\n        val lst2 = lst1.filter(x => x >= tup1._1 && x <= tup1._2)\n        return lst2.length.toLong",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstList.length) {\n            if (tupList.contains(lstList(i))) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        tup match {\n            case tup : Tuple1[Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple2[Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3 || i == tup._4) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3 || i == tup._4 || i == tup._5) count += 1\n                        }\n                    }\n                }\n            }\n            case tup : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 ||",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        val tupLen = tup.asInstanceOf[Tuple2[Any, Any]].productArity\n        val lstLen = lst.asInstanceOf[List[Any]].length\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Tuple2[Any, Any]].productElement(i) == lst.asInstanceOf[List[Any]].apply(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        val count = lstList.map(x => tupList.count(_ == x)).sum\n        return count",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- lstList) {\n            if (i == tupList._1) count += 1\n            if (i == tupList._2) count += 1\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        lst2.count(x => x == tup2._1) + lst2.count(x => x == tup2._2)",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup3 = tup2.asInstanceOf[Tuple2[Any, Any]]\n        val lst4 = lst3.map(x => x._1)\n        val tup4 = tup3._1\n        val lst5 = lst4.map(x => x.asInstanceOf[String])\n        val tup5 = tup4.asInstanceOf[String]\n        val lst6 = lst5.map(x => x.toLowerCase)\n        val tup6 = tup5.toLowerCase\n        val lst7 = lst6.map(x => x.replaceAll(\"[^a-zA-Z0-9]\", \"\"))\n        val tup7 = tup6.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val lst8 = lst7.map(x => x.replaceAll(\"[0-9]\", \"\"))\n        val tup8 = tup7.replaceAll(\"[0-9]\", \"\")\n        val lst9 = lst8.map(x => x.replaceAll(\" \", \"\"))\n        val tup9 = tup8.replaceAll(\" \", \"\")\n        val lst10 = lst9.map(x => x.replaceAll(\"[^a-zA-Z]\", \"\"))\n        val tup10 = tup9.replaceAll(\"[^a-zA-Z]\", \"\")\n        val lst11 = lst10.map(x => x.replaceAll(\"[^a-z]\", \"\"))\n        val tup11 = tup10.replaceAll(\"[^a-z]\", \"\")\n        val lst12 = lst11.map(x => x.replaceAll(\"[^a-zA-Z]\", \"\"))\n        val tup12 = tup11.replaceAll(\"[^a",
    "        var count : Long = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val lst2 = lst.asInstanceOf[List[Any]]\n                for (i <- lst2) {\n                    if (i == tup2._1) count += 1\n                    if (i == tup2._2) count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Product].productIterator.toList\n        val lstList = lst.asInstanceOf[Product].productIterator.toList\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val commonSet = tupSet.intersect(lstSet)\n        val countMap = Map[Any, Long]()\n        for (i <- commonSet) {\n            countMap += (i -> (tupList.count(_ == i) + lstList.count(_ == i)))\n        }\n        countMap.values.sum",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstList.length) {\n            if (tupList._1 == lstList(i)) count += 1\n            if (tupList._2 == lstList(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val tupLst = tup.asInstanceOf[List[Any]]\n        val lstLst = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupLst.length) {\n            if (lstLst.contains(tupLst(i))) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) count += 1\n            }\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = tup2.productIterator.toList.map(x => x.asInstanceOf[Int])\n        val lst4 = lst3.map(x => tup3.count(y => y == x))\n        lst4.sum",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => tup2._1.equals(x))\n        lst3.count(x => x)",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1 || x == tup1._2)\n        lst2.length",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = tup2.productIterator.toList.map(x => x.asInstanceOf[Int])\n        val lst4 = lst3.map(x => tup3.count(_ == x))\n        lst4.sum",
    "        val tupList = tup.asInstanceOf[Product].productIterator.toList\n        val lstList = lst.asInstanceOf[Product].productIterator.toList\n        lstList.foldLeft(0L)((acc, x) => if (tupList.contains(x)) acc + 1 else acc)",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]](i)) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupList1 = tupList._1.asInstanceOf[List[Any]]\n        val tupList2 = tupList._2.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList1.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList1(i) == lstList(j)) {\n                    count += tupList2(i)\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        tupList.map(x => lstList.count(_ == x)).sum",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupList1 = tupList._1.asInstanceOf[List[Any]]\n        val tupList2 = tupList._2.asInstanceOf[List[Any]]\n        val tupList3 = tupList1 ::: tupList2\n        val tupList4 = tupList3.toSet\n        val tupList5 = tupList4.toList\n        val tupList6 = tupList5.map(x => (x, lstList.count(_ == x)))\n        val tupList7 = tupList6.toMap\n        val tupList8 = tupList7.values.sum\n        tupList8",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        var count = 0\n        for (i <- lstList) {\n            if (tupSet.contains(i)) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        tupList.map(x => lstList.count(y => y == x)).sum",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = tup2.productIterator.toList.map(x => x.asInstanceOf[Int])\n        val lst4 = lst3.map(x => tup3.count(y => y == x))\n        lst4.sum",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        val lst4 = lst3.filter(x => x == tup3._1 || x == tup3._2)\n        return lst4.length.toLong",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        tupList.map(x => lstList.count(y => y == x)).sum",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[List[Any]]\n        val tup3 = tup1._2.asInstanceOf[List[Any]]\n        val tup4 = tup2 ++ tup3\n        val tup5 = tup4.toSet.toList\n        var count = 0\n        for (i <- 0 until tup5.length) {\n            for (j <- 0 until lst1.length) {\n                if (tup5(i) == lst1(j)) count += 1\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Int])\n        val tup2 = (tup1._1.asInstanceOf[Int], tup1._2.asInstanceOf[Int])\n        val lst3 = lst2.filter(x => x == tup2._1 || x == tup2._2)\n        lst3.length.toLong",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => if (x == tup2._1) 1 else 0)\n        lst3.sum",
    "        var count = 0\n        lst match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    if (i == tup) count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]](i)) count += 1\n        }\n        return count",
    "        var count : Long = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        return count",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val intersection = tupSet.intersect(lstSet)\n        intersection.map(x => tupList.count(_ == x)).sum",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return 0\n            }\n        }\n        return count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0L\n        tup match {\n            case t : Tuple1[Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: List expected\")\n                        return -1\n                    }\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: List expected\")\n                        return -1\n                    }\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: List expected\")\n                        return -1\n                    }\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: List expected\")\n                        return -1\n                    }\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5) count += 1\n                        }\n                    }\n                    case _ => {\n                       ",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst.asInstanceOf[List[Any]]\n        lst2.count(x => x == tup2._1) + lst2.count(x => x == tup2._2)",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst2) {\n            if (i == tup2._1) count += 1\n            if (i == tup2._2) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.filter(x => x == tup3._1).length",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        lst1.count(x => x == tup1._1) + lst1.count(x => x == tup1._2)",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => if (x == tup2._1) 1 else 0)\n        lst3.foldLeft(0)((x, y) => x + y)",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        tupList.map(x => lstList.count(_ == x)).sum",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) {\n                count += 1\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst1) {\n            if (i == tup1._1) count += 1\n            if (i == tup1._2) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        lst1.count(x => x == tup1._1)",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.productElement(i) == lst.productElement(j)) count += 1\n            }\n        }\n        return count",
    "        val list = lst.asInstanceOf[List[Any]]\n        val tuple = tup.asInstanceOf[Tuple2[Any, Any]]\n        val first = tuple._1\n        val second = tuple._2\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == first || list(i) == second) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => tup1._1.equals(x))\n        lst2.count(x => x == true) + lst2.count(x => x == false)",
    "        var count = 0\n        tup match {\n            case t : Tuple1[Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5 || i == t._6) count += 1\n                       ",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        val count = tupList.count(x => lstList.contains(x))\n        count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- 0 until l.length) {\n                    if (l(i) == t._1 || l(i) == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) count += 1\n            }\n        }\n        count",
    "        val tupArr = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toArray\n        val lstArr = lst.asInstanceOf[List[Any]].toArray\n        var count = 0L\n        for (i <- 0 until tupArr.length) {\n            for (j <- 0 until lstArr.length) {\n                if (tupArr(i) == lstArr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for(i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if(tup == lst.asInstanceOf[List[Any]].apply(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (elem <- lst) {\n                    if (elem == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        lstList.count(x => tupList.contains(x))",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (x <- lst) {\n                    if (x == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Error: Invalid input.\")\n            }\n        }\n        return count",
    "        val list = lst.asInstanceOf[List[Any]]\n        val tuple = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == tuple._1) count += 1\n            else if (list(i) == tuple._2) count += 1\n        }\n        count",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst2) {\n            if (i == tup2._1) count += 1\n            if (i == tup2._2) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst1) {\n            if (i == tup1._1) count += 1\n            if (i == tup1._2) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            if (lstList.contains(tupList(i))) count += 1\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.filter(x => x == tup2._1)\n        return lst3.length.toLong",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1 || x == tup3._2)",
    "        tup match {\n            case t : Tuple1[Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1)\n            }\n            case t : Tuple2[Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2)\n            }\n            case t : Tuple3[Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2) + l.count(_ == t._3)\n            }\n            case t : Tuple4[Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2) + l.count(_ == t._3) + l.count(_ == t._4)\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2) + l.count(_ == t._3) + l.count(_ == t._4) + l.count(_ == t._5)\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2) + l.count(_ == t._3) + l.count(_ == t._4) + l.count(_ == t._5) + l.count(_ == t._6)\n            }\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(_ == t._1) + l.count(_ == t._2) + l.count(_ == t._3) + l.count(_ == t._4) + l.count(_ == t._5) + l.count(_ == t._6) +",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        tupList.map(x => lstList.count(_ == x)).sum",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            if (lstList.contains(tupList(i))) count += 1\n        }\n        count",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val lst2 = lst.asInstanceOf[List[Any]]\n                for (i <- lst2) {\n                    if (i == tup2._1) count += 1\n                    if (i == tup2._2) count += 1\n                }\n            }\n        }\n        count",
    "        val tupArr = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstArr = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstArr.length) {\n            if (tupArr._1 == lstArr(i)) count += 1\n            if (tupArr._2 == lstArr(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (x <- lst) {\n                    if (x == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) count += 1\n            }\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup2 = (tup1._1, tup1._2)\n        val lst2 = lst1.map(x => (x, 1))\n        val lst3 = lst2.groupBy(x => x._1)\n        val lst4 = lst3.map(x => (x._1, x._2.map(x => x._2).sum))\n        val lst5 = lst4.filter(x => x._1 == tup2._1)\n        val lst6 = lst5.map(x => x._2)\n        val lst7 = lst6.toList\n        if (lst7.length == 0) 0\n        else lst7(0)",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => if (x == tup1._1) 1 else 0)\n        lst2.foldLeft(0L)((x, y) => x + y)",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.toString)\n        val tup2 = tup1.productIterator.toList.map(x => x.toString)\n        val lst3 = lst2.map(x => tup2.count(y => y == x))\n        lst3.sum",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => if (x == tup1._1) 1 else 0)\n        lst2.sum",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        var count = 0\n        for (i <- lstList) {\n            if (tupSet.contains(i)) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            if (lstList.contains(tupList(i))) count += 1\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1 || x == tup3._2)",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (t._1 == lst) count += 1\n            if (t._2 == lst) count += 1\n            count += countOccurrence(t._1, lst)\n            count += countOccurrence(t._2, lst)\n        }\n        count",
    "        lst match {\n            case lst : List[Any] => {\n                tup match {\n                    case tup : Tuple2[Any, Any] => {\n                        val (a, b) = tup\n                        lst.count(x => x == a) + countOccurrence(b, lst)\n                    }\n                    case _ => 0\n                }\n            }\n            case _ => 0\n        }",
    "        var count = 0L\n        tup match {\n            case t : Tuple1[Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5 || i == t._6) count += 1\n",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup10._1.asInstanceOf[Tuple2[Any",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val tupArr = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstArr = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstArr.length) {\n            if (tupArr._1 == lstArr(i)) count += 1\n            if (tupArr._2 == lstArr(i)) count += 1\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst2) {\n            if (i == tup2._1) count += 1\n            if (i == tup2._2) count += 1\n        }\n        count",
    "        var count = 0\n        lst match {\n            case l : List[Any] => {\n                for (elem <- l) {\n                    if (elem == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Error: List expected\")\n            }\n        }\n        count",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1) count += 1\n                    if (i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (e <- lst) {\n                    if (e == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val common = tupSet.intersect(lstSet)\n        val count = common.map(x => tupList.count(y => y == x)).sum\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) count += 1\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._2 == lst.asInstanceOf[List[Any]].apply(i)) count += 1\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.filter(x => x == tup2._1)\n        lst3.length.toLong",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- lst1) {\n            if (i == tup1._1) count += 1\n            if (i == tup1._2) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until lstList.length) {\n            if (tupList._1 == lstList(i)) count += 1\n            if (tupList._2 == lstList(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (x <- lst.asInstanceOf[List[Any]]) {\n            if (x == tup) count += 1\n        }\n        count",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        if (lst.isInstanceOf[List[Any]]) {\n            for (e <- lst.asInstanceOf[List[Any]]) {\n                if (e == tup) count += 1\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val countMap = new HashMap[Any, Long]()\n        for (i <- 0 until lstList.length) {\n            val elem = lstList(i)\n            if (countMap.contains(elem)) countMap(elem) += 1\n            else countMap(elem) = 1\n        }\n        var count = 0L\n        for (i <- 0 until tupList.length) {\n            val elem = tupList(i)\n            if (countMap.contains(elem)) count += countMap(elem)\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1 || i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        return count",
    "        var count = 0\n        tup match {\n            case t : Tuple2[Any, Any] => {\n                if (t._1 == lst) count += 1\n                if (t._2 == lst) count += 1\n                count += countOccurrence(t._1, lst)\n                count += countOccurrence(t._2, lst)\n            }\n            case _ => count\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => if (x == tup1._1) 1 else 0)\n        lst2.sum",
    "        val l = lst.asInstanceOf[List[Any]]\n        val t = tup.asInstanceOf[Tuple2[Any, Any]]\n        val count = l.filter(x => x == t._1 || x == t._2).length\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1.count(x => x == tup1._1) + lst1.count(x => x == tup1._2)",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => if (x == tup2._1) 1 else 0)\n        lst3.foldLeft(0L)(_ + _)",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup2 = tup1.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x._1)\n        val tup3 = tup2._1\n        val lst4 = lst3.map(x => x.asInstanceOf[String])\n        val tup4 = tup3.asInstanceOf[String]\n        val lst5 = lst4.map(x => x.toLowerCase)\n        val tup5 = tup4.toLowerCase\n        val lst6 = lst5.map(x => x.replaceAll(\"[^a-zA-Z0-9]\", \"\"))\n        val tup6 = tup5.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n        val lst7 = lst6.map(x => x.replaceAll(\"\\\\s\", \"\"))\n        val tup7 = tup6.replaceAll(\"\\\\s\", \"\")\n        val lst8 = lst7.map(x => x.replaceAll(\"\\\\d\", \"\"))\n        val tup8 = tup7.replaceAll(\"\\\\d\", \"\")\n        val lst9 = lst8.map(x => x.replaceAll(\"\\\\W\", \"\"))\n        val tup9 = tup8.replaceAll(\"\\\\W\", \"\")\n        val lst10 = lst9.map(x => x.replaceAll(\"\\\\D\", \"\"))\n        val tup10 = tup9.replaceAll(\"\\\\D\", \"\")\n        val lst11 = lst10.map(x => x.replaceAll(\"\\\\S\", \"\"))\n        val tup11 = tup10.replaceAll(\"\\\\S\", \"\")\n        val lst12 = lst11.map(x => x.replaceAll(\"\\\\B\", \"\"))\n        val t",
    "        var count = 0L\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1 || i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        lst1.count(x => x == tup1._1) + lst1.count(x => x == tup1._2)",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.filter(x => x == tup3._1).length",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]].productIterator.toList\n        val lstList = lst.asInstanceOf[List[Any]]\n        lstList.map(x => tupList.count(_ == x)).sum",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0L\n        for (i <- 0 until tupList.length) {\n            if (lstList.contains(tupList(i))) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val l = lst.asInstanceOf[List[Any]]\n        val t = tup.asInstanceOf[Tuple2[Any, Any]]\n        val l1 = l.filter(x => x == t._1)\n        val l2 = l.filter(x => x == t._2)\n        l1.length + l2.length",
    "        var count = 0\n        lst.asInstanceOf[List[Any]].foreach(x => if (x == tup) count += 1)\n        count",
    "        var count = 0\n        tup match {\n            case t : Tuple2[Any, Any] => {\n                if (lst.isInstanceOf[List[Any]]) {\n                    for (i <- lst.asInstanceOf[List[Any]]) {\n                        if (i == t._1) count += 1\n                        if (i == t._2) count += 1\n                    }\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                if (lst.isInstanceOf[List[Any]]) {\n                    for (i <- lst.asInstanceOf[List[Any]]) {\n                        if (i == t._1) count += 1\n                        if (i == t._2) count += 1\n                        if (i == t._3) count += 1\n                    }\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                if (lst.isInstanceOf[List[Any]]) {\n                    for (i <- lst.asInstanceOf[List[Any]]) {\n                        if (i == t._1) count += 1\n                        if (i == t._2) count += 1\n                        if (i == t._3) count += 1\n                        if (i == t._4) count += 1\n                    }\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                if (lst.isInstanceOf[List[Any]]) {\n                    for (i <- lst.asInstanceOf[List[Any]]) {\n                        if (i == t._1) count += 1\n                        if (i == t._2) count += 1\n                        if (i == t._3) count += 1\n                        if (i == t._4) count += 1\n                        if (i == t._5) count += 1\n                    }\n                }\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                if (lst.isInstanceOf[List[Any]]) {\n                    for (i <- lst.asInstanceOf[List[Any]]) {\n                        if (i == t",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Not a list\")\n            }\n        }\n        count",
    "        tup match {\n            case t : Tuple1[Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1)\n            }\n            case t : Tuple2[Any, Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1) + l.count(x => x == t._2)\n            }\n            case t : Tuple3[Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1) + l.count(x => x == t._2) + l.count(x => x == t._3)\n            }\n            case t : Tuple4[Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1) + l.count(x => x == t._2) + l.count(x => x == t._3) + l.count(x => x == t._4)\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1) + l.count(x => x == t._2) + l.count(x => x == t._3) + l.count(x => x == t._4) + l.count(x => x == t._5)\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => lst match {\n                case l : List[Any] => l.count(x => x == t._1) + l.count(x => x == t._2) + l.count(x => x == t._3) + l.count(x => x == t._4) + l.count(x => x == t._5) + l.count(x => x == t._6)\n            }\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => lst match {\n                case l : List[",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    i match {\n                        case i : List[Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple2[Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple3[Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple4[Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple5[Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple10[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple11[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => {\n                            count += countOccurrence(tup, i)\n                        }\n                        case i : Tuple12[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => {",
    "        var count = 0\n        tup match {\n            case tup : Tuple1[Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: Second argument must be a list.\")\n                        return -1\n                    }\n                }\n            }\n            case tup : Tuple2[Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: Second argument must be a list.\")\n                        return -1\n                    }\n                }\n            }\n            case tup : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: Second argument must be a list.\")\n                        return -1\n                    }\n                }\n            }\n            case tup : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 || i == tup._2 || i == tup._3 || i == tup._4) count += 1\n                        }\n                    }\n                    case _ => {\n                        println(\"Error: Second argument must be a list.\")\n                        return -1\n                    }\n                }\n            }\n            case tup : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        for (i <- lst) {\n                            if (i == tup._1 ||",
    "        lst match {\n            case lst : List[Any] => lst.count(x => x == tup)\n            case _ => 0\n        }",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i) == tup) {\n                count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        tup match {\n            case t : Tuple1[Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5) count += 1\n                        }\n                    }\n                }\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5 || i == t._6) count += 1",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        val t = tup.asInstanceOf[Tuple2[Any, Any]]\n        val l = lst.asInstanceOf[List[Any]]\n        l.count(x => x == t._1) + l.count(x => x == t._2)",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val commonSet = tupSet.intersect(lstSet)\n        val commonList = commonSet.toList\n        val count = commonList.map(x => lstList.count(_ == x)).sum\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => tup1._1.equals(x))\n        lst2.count(x => x == true) + lst2.count(x => x == false)",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- 0 until lst1.length) {\n            if (lst1(i) == tup1._1) count += 1\n            if (lst1(i) == tup1._2) count += 1\n        }\n        count",
    "        lst match {\n            case l : List[Any] => {\n                tup match {\n                    case t : Tuple2[Any, Any] => {\n                        l.filter(x => x == t._1).length\n                    }\n                    case t : Tuple3[Any, Any, Any] => {\n                        l.filter(x => x == t._1).length + l.filter(x => x == t._2).length + l.filter(x => x == t._3).length\n                    }\n                    case t : Tuple4[Any, Any, Any, Any] => {\n                        l.filter(x => x == t._1).length + l.filter(x => x == t._2).length + l.filter(x => x == t._3).length + l.filter(x => x == t._4).length\n                    }\n                    case t : Tuple5[Any, Any, Any, Any, Any] => {\n                        l.filter(x => x == t._1).length + l.filter(x => x == t._2).length + l.filter(x => x == t._3).length + l.filter(x => x == t._4).length + l.filter(x => x == t._5).length\n                    }\n                    case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                        l.filter(x => x == t._1).length + l.filter(x => x == t._2).length + l.filter(x => x == t._3).length + l.filter(x => x == t._4).length + l.filter(x => x == t._5).length + l.filter(x => x == t._6).length\n                    }\n                    case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                        l.filter(x => x == t._1).length + l.filter(x => x == t._2).length + l.filter(x => x == t._3).length + l.filter(x => x == t._4).length + l.filter(x => x == t._5).length + l.filter(x => x == t._6",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }\n        count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Int])\n        val tup3 = (tup2._1.asInstanceOf[Int], tup2._2.asInstanceOf[Int])\n        lst3.count(x => x == tup3._1) * lst3.count(x => x == tup3._2)",
    "        var count : Long = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) count += 1\n        }\n        count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (elem <- lst) {\n                    if (elem == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Error: List expected\")\n                return -1\n            }\n        }\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[List[Any]]\n        val tup3 = tup1._2.asInstanceOf[List[Any]]\n        val tup4 = tup2.zip(tup3)\n        val tup5 = tup4.map(x => (x._1, x._2.asInstanceOf[Int]))\n        val tup6 = tup5.toMap\n        val lst2 = lst1.map(x => tup6.getOrElse(x, 0))\n        lst2.sum",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]](i)) count += 1\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i) == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => tup1._1.asInstanceOf[List[Any]].count(y => y == x))\n        lst2.foldLeft(0L)((x, y) => x + y)",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => if (x == tup2._1) 1 else 0)\n        lst3.sum"
  ]
}