{
  "name": "mbpp_755_second_smallest",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : Any) : Option[Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((Any(1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(-2l));\n    assert(secondSmallest((Any(1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(-0.5f));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: xs => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                for (n <- xs) {\n                    if (n.asInstanceOf[Float] < min1) {\n                        min2 = min1\n                        min1 = n.asInstanceOf[Float]\n                    } else if (n.asInstanceOf[Float] < min2) {\n                        min2 = n.asInstanceOf[Float]\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) {\n            return None\n        }\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) {\n            Some(sorted(1))\n        } else {\n            None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : Array[Float] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length >= 2) Some(sorted(1)) else None",
    "        val sorted = numbers match {\n            case xs : List[Int] => xs.sorted\n            case xs : List[Float] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case xs : List[Long] => xs.sorted\n            case xs : List[Short] => xs.sorted\n            case xs : List[Byte] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sortedNumbers = numbers.asInstanceOf[List[Float]].sorted\n        if (sortedNumbers.length < 2) None\n        else Some(sortedNumbers(1))",
    "        val list = numbers.asInstanceOf[List[Float]]\n        if (list.length < 2) {\n            None\n        } else {\n            val sorted = list.sorted\n            Some(sorted(1))\n        }",
    "        val sortedNumbers = numbers match {\n            case list : List[Float] => list.sorted\n            case array : Array[Float] => array.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        Some(sortedNumbers(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case xs: List[Int] => xs\n            case xs: List[Float] => xs\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case l : List[Float] => l\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = Float.MaxValue\n        var secondSmallest = Float.MaxValue\n        for (number <- list) {\n            if (number < smallest) {\n                secondSmallest = smallest\n                smallest = number\n            } else if (number < secondSmallest) {\n                secondSmallest = number\n            }\n        }\n        if (secondSmallest == Float.MaxValue) return None\n        return Some(secondSmallest)",
    "        val sortedNumbers = numbers.asInstanceOf[List[Float]].sorted\n        if (sortedNumbers.length > 1) Some(sortedNumbers(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val list = numbers match {\n            case xs : List[Int] => xs\n            case xs : List[Float] => xs\n            case xs : List[Double] => xs\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val tmp = min\n            min = secondMin\n            secondMin = tmp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val sortedNumbers = numbers match {\n            case list : List[Float] => list.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        Some(sortedNumbers(1))",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (number <- list) {\n            if (number < min) {\n                secondMin = min\n                min = number\n            }\n            else if (number < secondMin) {\n                secondMin = number\n            }\n        }\n        if (secondMin == Float.MaxValue) return None\n        return Some(secondMin)",
    "        val sorted = numbers match {\n            case x: List[Int] => x.sorted\n            case x: List[Float] => x.sorted\n            case x: List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        var sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        var smallest = Float.MaxValue\n        var secondSmallest = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < smallest) {\n                secondSmallest = smallest\n                smallest = number\n            } else if (number < secondSmallest) {\n                secondSmallest = number\n            }\n        }\n        if (secondSmallest == Float.MaxValue) None else Some(secondSmallest)",
    "        var min = Float.MaxValue\n        var min2 = Float.MaxValue\n        numbers match {\n            case Nil => None\n            case x :: xs => {\n                for (i <- xs) {\n                    if (i < min) {\n                        min2 = min\n                        min = i\n                    }\n                    else if (i < min2) {\n                        min2 = i\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val nums = numbers.asInstanceOf[List[Float]]\n        if (nums.length < 2) {\n            None\n        } else {\n            Some(nums.sortWith(_ < _)(1))\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                if (sorted.length < 2) None\n                else Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: xs => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                for (i <- xs) {\n                    if (i.asInstanceOf[Float] < min1) {\n                        min2 = min1\n                        min1 = i.asInstanceOf[Float]\n                    } else if (i.asInstanceOf[Float] < min2) {\n                        min2 = i.asInstanceOf[Float]\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2)\n            None\n        else\n            Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (n <- numbers.asInstanceOf[List[Float]]) {\n            if (n < min) {\n                secondMin = min\n                min = n\n            }\n            else if (n < secondMin) {\n                secondMin = n\n            }\n        }\n        if (secondMin == Float.MaxValue) None else Some(secondMin)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => throw new IllegalArgumentException(\"Input must be a list of numbers\")\n        }\n        if (list.length < 2) {\n            None\n        } else {\n            val sortedList = list.sorted\n            Some(sortedList(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sortedNumbers = numbers.asInstanceOf[List[Float]].sorted\n        if (sortedNumbers.length < 2) None\n        else Some(sortedNumbers(1))",
    "        val sorted = numbers match {\n            case x : List[Float] => x.sorted\n            case x : List[Int] => x.sorted\n            case x : List[Double] => x.sorted\n            case x : List[Long] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sortedNumbers = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val list = numbers match {\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        return Some(sorted(1))",
    "        val sortedNumbers = numbers match {\n            case list : List[Int] => list.sorted\n            case list : List[Float] => list.sorted\n            case list : List[Double] => list.sorted\n            case list : List[Long] => list.sorted\n            case list : List[Short] => list.sorted\n            case list : List[Byte] => list.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        else return Some(sortedNumbers(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                if (sorted.length < 2) None\n                else Some(sorted(1))\n            }\n        }",
    "        var smallest = Float.MaxValue\n        var secondSmallest = Float.MaxValue\n        numbers match {\n            case x : List[Int] => {\n                for (i <- x) {\n                    if (i < smallest) {\n                        secondSmallest = smallest\n                        smallest = i\n                    }\n                    else if (i < secondSmallest) {\n                        secondSmallest = i\n                    }\n                }\n                if (secondSmallest == Float.MaxValue) {\n                    None\n                }\n                else {\n                    Some(secondSmallest)\n                }\n            }\n            case _ => None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            }\n            else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var min2 = list(1)\n        if (min > min2) {\n            val temp = min\n            min = min2\n            min2 = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                min2 = min\n                min = list(i)\n            } else if (list(i) < min2) {\n                min2 = list(i)\n            }\n        }\n        Some(min2)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: xs => {\n                val min = x.asInstanceOf[Float]\n                val secondMin = secondSmallest(xs).getOrElse(min)\n                Some(min(min, secondMin))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val nums = numbers.asInstanceOf[List[Float]]\n        if (nums.length < 2) None\n        else {\n            val sorted = nums.sorted\n            Some(sorted(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        return Some(secondSmallest)",
    "        numbers match {\n            case Nil => None\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                Some(sorted(1))\n            }\n        }",
    "        if (numbers.isInstanceOf[List[Int]]) {\n            val list = numbers.asInstanceOf[List[Int]]\n            if (list.length < 2) None\n            else {\n                val sorted = list.sorted\n                Some(sorted(1))\n            }\n        }\n        else if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length < 2) None\n            else {\n                val sorted = list.sorted\n                Some(sorted(1))\n            }\n        }\n        else None",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (i <- numbers.asInstanceOf[List[Float]]) {\n            if (i < min) {\n                secondMin = min\n                min = i\n            }\n            else if (i < secondMin) {\n                secondMin = i\n            }\n        }\n        if (secondMin == Float.MaxValue) None else Some(secondMin)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sortedNumbers = numbers match {\n            case list : List[Float] => list.sorted\n            case list : List[Int] => list.sorted.map(_.toFloat)\n            case list : List[Double] => list.sorted.map(_.toFloat)\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case List(x) => None\n            case List(x, y) => Some(min(x, y))\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1).asInstanceOf[Float])\n            }\n        }",
    "        val sorted = numbers match {\n            case xs: List[Int] => xs.sorted\n            case xs: List[Float] => xs.sorted\n            case xs: List[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length >= 2) Some(sorted(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Float] => x.sorted\n            case x : List[Int] => x.sorted\n            case x : List[Double] => x.sorted\n            case x : List[Long] => x.sorted\n            case x : List[Short] => x.sorted\n            case x : List[Byte] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : List[Int] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length < 2) {\n                None\n            } else {\n                val sortedList = list.sorted\n                Some(sortedList(1))\n            }\n        } else {\n            None\n        }",
    "        val sorted = numbers match {\n            case list : List[Float] => list.sorted\n            case array : Array[Float] => array.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val sorted = numbers.asInstanceOf[List[Float]].sorted\n            if (sorted.length > 1) Some(sorted(1)) else None\n        } else None",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : List[Int] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case xs : Array[Float] => xs.sorted\n            case xs : Array[Int] => xs.sorted\n            case xs : Array[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case x : List[Long] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        var smallest = nums(0)\n        var secondSmallest = nums(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until nums.length) {\n            if (nums(i) < smallest) {\n                secondSmallest = smallest\n                smallest = nums(i)\n            }\n            else if (nums(i) < secondSmallest) {\n                secondSmallest = nums(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case list : List[Int] => list.map(_.toFloat)\n            case list : List[Double] => list.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1).asInstanceOf[Float])\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers.asInstanceOf[List[Float]]\n        if (list.size < 2) None\n        else {\n            val sorted = list.sorted\n            Some(sorted(1))\n        }",
    "        val list = numbers match {\n            case x: List[Float] => x\n            case x: List[Int] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case x: List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        return Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: xs => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                xs.foreach(x => {\n                    if (x.asInstanceOf[Float] < min1) {\n                        min2 = min1\n                        min1 = x.asInstanceOf[Float]\n                    }\n                    else if (x.asInstanceOf[Float] < min2) {\n                        min2 = x.asInstanceOf[Float]\n                    }\n                })\n                Some(min2)\n            }\n        }",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sortedList = list.sorted\n        return Some(sortedList(1))",
    "        var smallest = Float.MaxValue\n        var secondSmallest = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < smallest) {\n                secondSmallest = smallest\n                smallest = number\n            }\n            else if (number < secondSmallest) {\n                secondSmallest = number\n            }\n        }\n        if (secondSmallest == Float.MaxValue) None else Some(secondSmallest)",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case l : List[Float] => l\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val nums = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                sorted match {\n                    case y :: ys => Some(y)\n                    case _ => None\n                }\n            }\n        }",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sortWith(_ < _)\n            case x : List[Float] => x.sortWith(_ < _)\n            case x : List[Double] => x.sortWith(_ < _)\n            case x : List[Long] => x.sortWith(_ < _)\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            }\n            else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        numbers match {\n            case Nil => None\n            case List(x) => None\n            case List(x, y) => Some(min(x, y))\n            case x :: xs => {\n                val min = xs.min\n                val min2 = xs.filter(_ != min).min\n                Some(min2)\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length > 1) {\n                val sortedList = list.sorted\n                Some(sortedList(1))\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        numbers match {\n            case Nil => None\n            case x :: xs => {\n                for (i <- xs) {\n                    if (i < min) {\n                        secondMin = min\n                        min = i\n                    }\n                    else if (i < secondMin) {\n                        secondMin = i\n                    }\n                }\n                Some(secondMin)\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case xs : List[Float] => xs\n            case xs : List[Int] => xs.map(x => x.toFloat)\n            case xs : List[Double] => xs.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length > 1) {\n                var sortedList = list.sortWith(_ < _)\n                return Some(sortedList(1))\n            }\n        }\n        return None",
    "        numbers match {\n            case x : List[Int] => {\n                if (x.length < 2) None\n                else {\n                    val sorted = x.sorted\n                    Some(sorted(1))\n                }\n            }\n            case x : List[Float] => {\n                if (x.length < 2) None\n                else {\n                    val sorted = x.sorted\n                    Some(sorted(1))\n                }\n            }\n            case x : List[Double] => {\n                if (x.length < 2) None\n                else {\n                    val sorted = x.sorted\n                    Some(sorted(1).toFloat)\n                }\n            }\n            case _ => None\n        }",
    "        val sorted = numbers match {\n            case list : List[Float] => list.sorted\n            case list : List[Int] => list.sorted.map(_.toFloat)\n            case list : List[Double] => list.sorted.map(_.toFloat)\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case _ => return None\n        }\n        val sortedList = list.sorted\n        if (sortedList.length < 2) return None\n        return Some(sortedList(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers.asInstanceOf[List[Float]]\n        if (list.length < 2) None\n        else {\n            val sorted = list.sorted\n            Some(sorted(1))\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: tail => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                tail.foreach(n => {\n                    val nn = n.asInstanceOf[Float]\n                    if (nn < min1) {\n                        min2 = min1\n                        min1 = nn\n                    } else if (nn < min2) {\n                        min2 = nn\n                    }\n                })\n                Some(min2)\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers match {\n            case list : List[Float] => list.sorted\n            case list : List[Int] => list.map(_.toFloat).sorted\n            case list : List[Double] => list.map(_.toFloat).sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: xs => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                for (i <- xs) {\n                    if (i.asInstanceOf[Float] < min1) {\n                        min2 = min1\n                        min1 = i.asInstanceOf[Float]\n                    } else if (i.asInstanceOf[Float] < min2) {\n                        min2 = i.asInstanceOf[Float]\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = Float.MaxValue\n        var min2 = Float.MaxValue\n        for (i <- list) {\n            if (i < min) {\n                min2 = min\n                min = i\n            }\n            else if (i < min2) {\n                min2 = i\n            }\n        }\n        if (min2 == Float.MaxValue) return None\n        return Some(min2)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var first = list(0)\n        var second = list(1)\n        if (first > second) {\n            val temp = first\n            first = second\n            second = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < first) {\n                second = first\n                first = list(i)\n            }\n            else if (list(i) < second) {\n                second = list(i)\n            }\n        }\n        Some(second)"
  ]
}