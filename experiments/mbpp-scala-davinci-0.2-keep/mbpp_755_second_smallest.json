{
  "name": "mbpp_755_second_smallest",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : Any) : Option[Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((Any(1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(-2l));\n    assert(secondSmallest((Any(1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(-0.5f));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: y :: Nil => Some(min(x.asInstanceOf[Float], y.asInstanceOf[Float]))\n            case x :: y :: xs => {\n                val min1 = min(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                val min2 = max(x.asInstanceOf[Float], y.asInstanceOf[Float])\n                for (n <- xs) {\n                    if (n.asInstanceOf[Float] < min1) {\n                        min2 = min1\n                        min1 = n.asInstanceOf[Float]\n                    } else if (n.asInstanceOf[Float] < min2) {\n                        min2 = n.asInstanceOf[Float]\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val list = numbers match {\n            case list : List[Float] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) {\n            return None\n        }\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) {\n            Some(sorted(1))\n        } else {\n            None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : Array[Float] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        Some(sorted(1))"
  ]
}