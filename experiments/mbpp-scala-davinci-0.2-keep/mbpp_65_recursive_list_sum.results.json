{
  "name": "mbpp_65_recursive_list_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x, 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnua_kn5h.scala:13:95 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    \u001b[33mcase\u001b[0m Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x, \u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnua_kn5h.scala:20:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnua_kn5h.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                if (head.isLeft) recursiveListSumHelper(data_list.tail, sum + head.left.get)\n                else recursiveListSumHelper(data_list.tail ::: head.right.get, sum)\n            }\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4hvpo_cj.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m recursiveListSumHelper(data_list.tail ::: head.right.get, sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    List[Matchable]\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4hvpo_cj.scala:17:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4hvpo_cj.scala:17:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4hvpo_c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum = 0L\n        data_list.foreach(x => x match {\n            case Left(x) => sum += x\n            case Right(x) => sum += recursiveListSum(x)\n        })\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv4gfyv_l.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                  value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4gfyv_l.scala:9:53 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4gfyv_l.scala:14:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4gfyv_l.scala:14:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], acc : Long) : Long = {\n            if (data_list.isEmpty) acc\n            else {\n                val head = data_list.head\n                head match {\n                    case Left(x) => recursiveListSumHelper(data_list.tail, acc + x)\n                    case Right(x) => recursiveListSumHelper(data_list.tail, acc + recursiveListSum(x))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d1dmpdp.scala:12:99 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    \u001b[33mcase\u001b[0m Right(x) => recursiveListSumHelper(data_list.tail, acc + recursiveListSum(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d1dmpdp.scala:19:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d1dmpdp.scala:19:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(y => Left(y)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum = 0L\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpejuc5ned.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpejuc5ned.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpejuc5ned.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpejuc5ned.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x.map(Left(_)), 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x ::: tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dxamwqx.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x ::: tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dxamwqx.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dxamwqx.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dxamwqx.scala:15:78 --------------------\u001b[0m\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        if (data_list.isEmpty) 0\n        else data_list.head match {\n            case Left(x) => x + recursiveListSum(data_list.tail)\n            case Right(x) => recursiveListSum(x) + recursiveListSum(data_list.tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2_x5lo7g.scala:9:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(data_list.tail)\n\u001b[31m\u001b[31m  |\u001b[0m                                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2_x5lo7g.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2_x5lo7g.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2_x5lo7g.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:10:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (value : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def flatten(data_list : List[Either[Long, List[Long]]]) : List[Long] = {\n            data_list match {\n                case Nil => Nil\n                case Left(x) :: xs => x :: flatten(xs)\n                case Right(x) :: xs => flatten(x) ::: flatten(xs)\n            }\n        }\n        flatten(data_list).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7z2hy8a.scala:10:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) :: xs => flatten(x) ::: flatten(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7z2hy8a.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7z2hy8a.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7z2hy8a.scala:16:78 --------------------\u001b[0m\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def helper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => helper(tail, sum + x)\n                    case Right(x) => helper(tail, sum + recursiveListSum(x.map(Left(_))))\n                }\n            }\n        }\n        helper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnphnqo2u.scala:20:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnphnqo2u.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnphnqo2u.scala:20:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum : Long = 0\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupy3y446.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpupy3y446.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpupy3y446.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpupy3y446.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else if (data_list.head.isLeft) recursiveListSumHelper(data_list.tail, sum + data_list.head.left.get)\n            else recursiveListSumHelper(data_list.tail ::: data_list.head.right.get, sum)\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8p96_pw.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33melse\u001b[0m recursiveListSumHelper(data_list.tail ::: data_list.head.right.get, sum)\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    List[Matchable]\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8p96_pw.scala:14:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8p96_pw.scala:14:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: tail => x + recursiveListSum(tail)\n            case (Right(x)) :: tail => recursiveListSum(x) + recursiveListSum(tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx49ccnc9.scala:9:56 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: tail => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m  |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx49ccnc9.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx49ccnc9.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx49ccnc9.scala:13:78 -------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.foldLeft(0L)((sum, element) => sum + element.fold(identity, recursiveListSum))\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8r1u1iik.scala:6:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        data_list.foldLeft(\u001b[31m0L\u001b[0m)((\u001b[36msum\u001b[0m, \u001b[36melement\u001b[0m) => sum + element.fold(identity, recursiveListSum))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    List[\u001b[1m\u001b[31mEither\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m]\u001b[1m\u001b[31m]\u001b[0m\u001b[1m\u001b[31m]\u001b[0m => Long\n\u001b[31m  |\u001b[0m                          Required: List[Long] => Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8r1u1iik.scala:9:60 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m  |\u001b[0m                                        Required: Either[Long, List[Long]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8r1u1iik.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m  |\u001b[0m                                        Required: Either[Long, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(y => Left(y)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3b41a2v8.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:10:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (value : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrson607.scala:15:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum : Long = 0\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppttbiaa3.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppttbiaa3.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppttbiaa3.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppttbiaa3.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp98vp4sxf.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum : Long = 0\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_3tkw_c.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_3tkw_c.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_3tkw_c.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_3tkw_c.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkxoot3t.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum = 0L\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp54c1pklm.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdgqy1muj.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def helper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                data_list.head match {\n                    case Left(x) => helper(data_list.tail, sum + x)\n                    case Right(x) => helper(data_list.tail, sum + recursiveListSum(x))\n                }\n            }\n        }\n        helper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbk6z1jv.scala:11:83 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    \u001b[33mcase\u001b[0m Right(x) => helper(data_list.tail, sum + recursiveListSum(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbk6z1jv.scala:18:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbk6z1jv.scala:18:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list.foldLeft(0L)((acc, x) => acc + x.fold(identity, recursiveListSum))\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj734gcvw.scala:6:66 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        data_list.foldLeft(\u001b[31m0L\u001b[0m)((\u001b[36macc\u001b[0m, \u001b[36mx\u001b[0m) => acc + x.fold(identity, recursiveListSum))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    List[\u001b[1m\u001b[31mEither\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m]\u001b[1m\u001b[31m]\u001b[0m\u001b[1m\u001b[31m]\u001b[0m => Long\n\u001b[31m  |\u001b[0m                          Required: List[Long] => Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj734gcvw.scala:9:60 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m  |\u001b[0m                                        Required: Either[Long, List[Long]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj734gcvw.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m  |\u001b[0m                                        Required: Either[Long, List[Long]]\n\u001b[31m  |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(list) => recursiveListSum(list) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphknfztof.scala:10:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(list) => recursiveListSum(list) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (list : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphknfztof.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphknfztof.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphknfztof.scala:15:78 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x.map(Left(_)), 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffazw5zy.scala:20:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    List[Long]\n\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        def helper(data_list : List[Either[Long, List[Long]]], acc : Long) : Long = {\n            if (data_list.isEmpty) acc\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                if (head.isLeft) helper(tail, acc + head.left.get)\n                else helper(tail, acc + helper(head.right.get, 0))\n            }\n        }\n        helper(data_list, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpex_rug_i.scala:12:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33melse\u001b[0m helper(tail, acc + helper(head.right.get, \u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    List[Long]\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpex_rug_i.scala:18:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpex_rug_i.scala:18:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpex_rug_i.scala:18:78 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x))::xs => x + recursiveListSum(xs)\n            case (Right(x))::xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu3tsuzr.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x))::xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu3tsuzr.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu3tsuzr.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu3tsuzr.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:9:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrrliqqx.scala:13:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x : Left[Long, List[Long]]) :: xs => x.left.get + recursiveListSum(xs)\n            case (x : Right[Long, List[Long]]) :: xs => recursiveListSum(x.right.get) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2i3l6ret.scala:9:81 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (x : Right[Long, List[Long]]) :: xs => recursiveListSum(x.right.get) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    List[Long]\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2i3l6ret.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2i3l6ret.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        var sum = 0L\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp54c1pklm.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:10:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => sum += recursiveListSum(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:16:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54c1pklm.scala:16:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:9:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (x : List[Long])\n\u001b[31m  |\u001b[0m                                  Required: List[Either[Long, List[Long]]]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xzyf7_a.scala:13:78 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510511,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexibs4r.scala:15:78 -------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
      "timestamp": 1665510516,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (x : List[Long])\n\u001b[31m   |\u001b[0m                                Required: List[Either[Long, List[Long]]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:60 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(recursiveListSum((List[\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]]](\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong)))) == (\u001b[31m21l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (\u001b[31m2L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                      Required: Either[Long, List[Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6w_b_zi.scala:15:78 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}