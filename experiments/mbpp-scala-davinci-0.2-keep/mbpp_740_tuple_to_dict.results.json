{
  "name": "mbpp_740_tuple_to_dict",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxi0qpv7n.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxi0qpv7n.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxi0qpv7n.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47a197xh.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47a197xh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47a197xh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_tg18yn.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_tg18yn.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_tg18yn.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_final = List[Long]()\n        var test_list_final = List[Long]()\n        var test_list_final_rev = List[Long]()\n        var test_list_final_rev_final = List[Long]()\n        var test_list_final_final = List[Long]()\n        var test_list_final_final_rev = List[Long]()\n        var test_list_final_final_rev_final = List[Long]()\n        var test_list_final_final_final = List[Long]()\n        var test_list_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev_final\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpirh51gbi.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirh51gbi.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirh51gbi.scala:33:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirh51gbi.scala:34:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirh51gbi.scala:35:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1)))\n        val test_tup_list_pairs_map_dict = test_tup_list_pairs_map.toMap\n        test_tup_list_pairs_map_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp444_pgw4.scala:10:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        test_tup_list_pairs_map_dict\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (test_tup_list_pairs_map_dict : Map[Long, Long])\n\u001b[31m   |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp444_pgw4.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp444_pgw4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp444_pgw4.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7glnany2.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7glnany2.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7glnany2.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7glnany2.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_yci5dwy.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuq90uhjm.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuq90uhjm.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuq90uhjm.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val result = Map[Long,Long]()\n        val tup = test_tup.toString.map(_.asDigit).toList\n        for (i <- 0 until tup.length - 1) {\n            result(tup(i)) = tup(i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxeo30yc.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxeo30yc.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxeo30yc.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(x => x.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_str = test_tup.toString\n        for (i <- 0 until test_str.length) test_list = test_list :+ test_str(i).toString.toLong\n        for (i <- 0 until test_list.length - 1) test_dict += (test_list(i) -> test_list(i + 1))\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp29kxmks_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp29kxmks_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp29kxmks_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes9lktj3.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:41:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:42:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:43:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_arr = test_tup.toString.toCharArray.map(_.asDigit.toLong)\n        val test_tup_arr_pairs = test_tup_arr.sliding(2).toList\n        val test_tup_dict = test_tup_arr_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpui3w14i4.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpui3w14i4.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpui3w14i4.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpui3w14i4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            if (i % 2 == 0) {\n                dict += (tup % 10 -> 0)\n            } else {\n                dict(tup % 10) = dict(tup % 10) + 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwi58tww2.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwi58tww2.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwi58tww2.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var key = tup % 10\n            tup /= 10\n            var value = tup % 10\n            tup /= 10\n            result += (key -> value)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_aaxsof.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_aaxsof.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_aaxsof.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1)))\n        val test_list_pairs_map_dict = test_list_pairs_map.toMap\n        return test_list_pairs_map_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4ae5xok.scala:10:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_map_dict\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (test_list_pairs_map_dict : Map[Long, Long])\n\u001b[31m   |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4ae5xok.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4ae5xok.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4ae5xok.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length - 1) {\n            dict += (test_tup_str(i).asDigit.toLong -> test_tup_str(i + 1).asDigit.toLong)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2mrqy2gw.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2mrqy2gw.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2mrqy2gw.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuugr1zi.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuugr1zi.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuugr1zi.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0hvwjdk.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0hvwjdk.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0hvwjdk.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlzu9egr.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlzu9egr.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlzu9egr.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlzu9egr.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppauuw301.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppauuw301.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppauuw301.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            if (i % 2 == 0) {\n                test_list = test_tup_list(i) :: test_list\n            } else {\n                test_list = test_list :+ test_tup_list(i)\n                test_dict += (test_list(0) -> test_list(1))\n                test_list = List[Long]()\n            }\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbb35uz6i.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbb35uz6i.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbb35uz6i.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdl1aahd.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ga95856.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ga95856.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ga95856.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head, x.last)).toMap\n        test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgwws5ww.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgwws5ww.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgwws5ww.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgwws5ww.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_dict += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n9o1ojw.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n9o1ojw.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n9o1ojw.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_tup_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0g4abf1h.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0g4abf1h.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0g4abf1h.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr44556p3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_final = List[Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 to test_tup_list.length - 1) {\n            test_list = test_list :+ test_tup_list(i).asDigit.toLong\n        }\n        test_list_rev = test_list.reverse\n        for (i <- 0 to test_list_rev.length - 1) {\n            if (i % 2 == 0) {\n                test_list_final = test_list_final :+ test_list_rev(i)\n            }\n        }\n        test_list_final = test_list_final.reverse\n        for (i <- 0 to test_list_final.length - 1) {\n            if (i % 2 == 0) {\n                test_dict += (test_list_final(i) -> test_list_final(i + 1))\n            }\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_1bl21q.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_1bl21q.scala:30:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_1bl21q.scala:31:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpykwt5knc.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpykwt5knc.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpykwt5knc.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpykwt5knc.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb2dhbtf.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb2dhbtf.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb2dhbtf.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 to test_tup_list.length - 1) {\n            test_list = test_list :+ test_tup_list(i).toString.toLong\n        }\n        for (i <- 0 to test_list.length - 2 by 2) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmhbfl9a.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmhbfl9a.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmhbfl9a.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6salwqg.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6salwqg.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6salwqg.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (i < test_tup) {\n            test_list = test_list :+ i\n            i += 1\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuslmxajd.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuslmxajd.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuslmxajd.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_temp = List[Long]()\n        var test_list_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp18iv_92m.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp18iv_92m.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp18iv_92m.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp18iv_92m.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp18iv_92m.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ew_5_67.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ew_5_67.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ew_5_67.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz7xu8c52.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var list = List[Long]()\n        var n = test_tup\n        while (n > 0) {\n            list = (n % 10) :: list\n            n /= 10\n        }\n        for (i <- 0 until list.length - 1) {\n            dict += (list(i) -> list(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s91n5ap.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s91n5ap.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s91n5ap.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        var temp = test_tup\n        var i = 0\n        while (temp > 0) {\n            result += (i -> (temp % 10))\n            temp /= 10\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3zolq4he.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += (i -> (temp % \u001b[31m10\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (\u001b[1m\u001b[31mInt\u001b[0m, Long)\n\u001b[31m   |\u001b[0m                       Required: (\u001b[1m\u001b[32mLong\u001b[0m, Long)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3zolq4he.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3zolq4he.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3zolq4he.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.map(_.asDigit).toList\n        val test_list_pairs = test_list.grouped(2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1xr5_pf.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1xr5_pf.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1xr5_pf.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1xr5_pf.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95wt5wl5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95wt5wl5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95wt5wl5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r1l6rum.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlnohnl_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlnohnl_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzlnohnl_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq6b7zyp.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq6b7zyp.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq6b7zyp.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq6b7zyp.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuki8g5bf.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuki8g5bf.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuki8g5bf.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i-1).asDigit.toLong -> test_tup.toString.charAt(i).asDigit.toLong)\n            i += 2\n        }\n        test_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7etjhuhr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7etjhuhr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7etjhuhr.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wi75yn9.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wi75yn9.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wi75yn9.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var test_tup_list_rev = List[Long]()\n        var test_tup_list_rev_temp = List[Long]()\n        var test_tup_list_rev_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_t\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi27i9ko1.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi27i9ko1.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi27i9ko1.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi27i9ko1.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi27i9ko1.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ypy1uwq.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ypy1uwq.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ypy1uwq.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        var dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j1lzm6o.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j1lzm6o.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j1lzm6o.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63he47bu.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63he47bu.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63he47bu.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n        }\n        while (i < test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy61_h45t.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean test_tup.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy61_h45t.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy61_h45t.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy61_h45t.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuynlry0.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuynlry0.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuynlry0.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuynlry0.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += tup(i) -> tup(i + 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx88u1qgb.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx88u1qgb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx88u1qgb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_dict = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgetelix.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgetelix.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgetelix.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgetelix.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjry9ehwa.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjry9ehwa.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjry9ehwa.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjry9ehwa.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97bnz18v.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97bnz18v.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97bnz18v.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97bnz18v.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list2 = List[Long]()\n        var test_list3 = List[Long]()\n        var test_list4 = List[Long]()\n        var test_list5 = List[Long]()\n        var test_list6 = List[Long]()\n        var test_list7 = List[Long]()\n        var test_list8 = List[Long]()\n        var test_list9 = List[Long]()\n        var test_list10 = List[Long]()\n        var test_list11 = List[Long]()\n        var test_list12 = List[Long]()\n        var test_list13 = List[Long]()\n        var test_list14 = List[Long]()\n        var test_list15 = List[Long]()\n        var test_list16 = List[Long]()\n        var test_list17 = List[Long]()\n        var test_list18 = List[Long]()\n        var test_list19 = List[Long]()\n        var test_list20 = List[Long]()\n        var test_list21 = List[Long]()\n        var test_list22 = List[Long]()\n        var test_list23 = List[Long]()\n        var test_list24 = List[Long]()\n        var test_list25 = List[Long]()\n        var test_list26 = List[Long]()\n        var test_list27 = List[Long]()\n        var test_list28 = List[Long]()\n        var test_list29 = List[Long]()\n        var test_list30 = List[Long]()\n        var test_list31 = List[Long]()\n        var test_list32 = List[Long]()\n        var test_list33 = List[Long]()\n        var test_list34 = List[Long]()\n        var test_list35 = List[Long]()\n        var test_list36 = List[Long]()\n        var test_list37 = List[Long]()\n        var test_list38 = List[Long]()\n        var test_\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps05h14gu.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps05h14gu.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps05h14gu.scala:48:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps05h14gu.scala:49:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps05h14gu.scala:50:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5fxkgys.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5fxkgys.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5fxkgys.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli_3i25y.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            dict += (tup(i) -> tup(i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    (Int, Int)\n\u001b[31m  |\u001b[0m                     Required: (Long, Long)\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli_3i25y.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli_3i25y.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli_3i25y.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0wm_1ond.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0wm_1ond.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0wm_1ond.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_2 = List[Long]()\n        var test_list_3 = List[Long]()\n        var test_list_4 = List[Long]()\n        var test_list_5 = List[Long]()\n        var test_list_6 = List[Long]()\n        var test_list_7 = List[Long]()\n        var test_list_8 = List[Long]()\n        var test_list_9 = List[Long]()\n        var test_list_10 = List[Long]()\n        var test_list_11 = List[Long]()\n        var test_list_12 = List[Long]()\n        var test_list_13 = List[Long]()\n        var test_list_14 = List[Long]()\n        var test_list_15 = List[Long]()\n        var test_list_16 = List[Long]()\n        var test_list_17 = List[Long]()\n        var test_list_18 = List[Long]()\n        var test_list_19 = List[Long]()\n        var test_list_20 = List[Long]()\n        var test_list_21 = List[Long]()\n        var test_list_22 = List[Long]()\n        var test_list_23 = List[Long]()\n        var test_list_24 = List[Long]()\n        var test_list_25 = List[Long]()\n        var test_list_26 = List[Long]()\n        var test_list_27 = List[Long]()\n        var test_list_28 = List[Long]()\n        var test_list_29 = List[Long]()\n        var test_list_30 = List[Long]()\n        var test_list_31 = List[Long]()\n        var test_list_32 = List[Long]()\n        var test_list_33 = List[Long]()\n        var test_list_34 = List[Long]()\n        var test_list_35 = List[Long]()\n        var test_list_36 = List\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0671vgxg.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0671vgxg.scala:45:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0671vgxg.scala:46:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0671vgxg.scala:47:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j2wjh9t.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j2wjh9t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j2wjh9t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j2wjh9t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcc_ekvf1.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48 -> test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph1z5cgsh.scala:9:103 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            dict += (test_tup.toString.charAt(i).toLong - \u001b[31m48\u001b[0m -> test_tup.toString.charAt(i + \u001b[31m1\u001b[0m).toLong - \u001b[31m48\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue - is not a member of (Long, Long), but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m  |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m  |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1z5cgsh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph1z5cgsh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_list = List[Long]()\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup) {\n            test_list = test_list :+ i\n            i += 1\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw0166xaw.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw0166xaw.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw0166xaw.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_yci5dwy.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdjc7hnb.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdjc7hnb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdjc7hnb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7hy9krto.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7hy9krto.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7hy9krto.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var tup = test_tup\n        while(tup > 0) {\n            dict += (tup % 10 -> (tup / 10) % 10)\n            tup /= 100\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xud3950.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xud3950.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xud3950.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var temp = test_tup\n        var i = 0\n        while (temp > 0) {\n            var rem = temp % 10\n            temp = temp / 10\n            if (i % 2 == 0) {\n                dict += (rem -> 0)\n            } else {\n                dict(rem) = dict(rem) + 1\n            }\n            i += 1\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx6sqf6.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx6sqf6.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx6sqf6.scala:24:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.grouped(2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0), x(1))).toMap\n        test_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88b8529l.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88b8529l.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88b8529l.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88b8529l.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head, x.last)).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97w5o7_k.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97w5o7_k.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97w5o7_k.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp97w5o7_k.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_pairs = tup.grouped(2).toList\n        val tup_dict = tup_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6hmn7h02.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6hmn7h02.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6hmn7h02.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6hmn7h02.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 until test_list.length - 1) {\n            dict += (test_list(i) -> test_list(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagz1btz4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagz1btz4.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagz1btz4.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString().length - 1) {\n            test_dict += (test_tup.toString()(i).asDigit.toLong -> test_tup.toString()(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq7yntjo5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq7yntjo5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq7yntjo5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_pq6hm_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8sp6232.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while(tup > 0) {\n            var digit = tup % 10\n            tup = tup / 10\n            if(i % 2 == 0) {\n                dict += (digit -> dict.getOrElse(digit, 0))\n            } else {\n                dict += (digit -> (dict.getOrElse(digit, 0) + 1))\n            }\n            i += 1\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgeo55s3.scala:15:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                dict += (digit -> (dict.getOrElse(digit, \u001b[31m0\u001b[0m) + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphgeo55s3.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphgeo55s3.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphgeo55s3.scala:24:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.split(\"\").map(_.toLong).toList\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqcsgsy8.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqcsgsy8.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqcsgsy8.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqcsgsy8.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeykzys17.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeykzys17.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeykzys17.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeykzys17.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n        }\n        while (i < test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7mtwoudf.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean test_tup.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mtwoudf.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mtwoudf.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mtwoudf.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_dict = test_list_pairs.map(x => (x(0),x(1))).toMap\n        test_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsllncgbg.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsllncgbg.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsllncgbg.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsllncgbg.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 to test_list.length - 2) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1zgzfv_i.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1zgzfv_i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1zgzfv_i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 to test_list.length - 2) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppml3i6nc.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppml3i6nc.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppml3i6nc.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphldclw1c.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z12lmmb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z12lmmb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z12lmmb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6gyzhbwj.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6gyzhbwj.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6gyzhbwj.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6gyzhbwj.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__dp96c6.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__dp96c6.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__dp96c6.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg4ru3x9.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptia5v8oc.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31494kgl.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2).toList\n        val test_dict = test_list_pairs.map(x => (x(0), x(1))).toMap\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp193mz1w6.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp193mz1w6.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp193mz1w6.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp193mz1w6.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxxrqd7p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxxrqd7p.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvxxrqd7p.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdsc6g1o.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdsc6g1o.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdsc6g1o.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdsc6g1o.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var digit = tup % 10\n            if (i % 2 == 0) {\n                dict += (digit -> 0)\n            } else {\n                dict(digit) = dict(digit) + 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpss3i6ips.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpss3i6ips.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpss3i6ips.scala:24:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper6rarsa.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper6rarsa.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper6rarsa.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpadblyl4e.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpadblyl4e.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpadblyl4e.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head, x.last))\n        val test_tup_list_pairs_map_dict = test_tup_list_pairs_map.toMap\n        return test_tup_list_pairs_map_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5_uc37_.scala:10:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map_dict\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              Found:    (test_tup_list_pairs_map_dict : Map[Long, Long])\n\u001b[31m   |\u001b[0m              Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5_uc37_.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5_uc37_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5_uc37_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxjh9sn3.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxjh9sn3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxjh9sn3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuxjh9sn3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgup1u6f1.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        test_tup_list_pairs.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_bqwxs28.scala:8:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        test_tup_list_pairs.toMap\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    Map[Long, Long]\n\u001b[31m  |\u001b[0m        Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_bqwxs28.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_bqwxs28.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_bqwxs28.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(x => x.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ieme52.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnndp1z2a.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnndp1z2a.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnndp1z2a.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptngszzb0.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_ta93.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_list_len = test_list.length\n        val test_dict = Map[Long,Long]()\n        for (i <- 0 until test_list_len - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4tstlb1.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4tstlb1.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4tstlb1.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdft_23f.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9y83dhzr.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = new HashMap[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict.put(tup(i), tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1f9hdib.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1f9hdib.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm1f9hdib.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyqdw9po.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes9lktj3.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:41:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:42:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:43:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val res = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            res(tup(i)) = tup(i + 1)\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86_t0qks.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86_t0qks.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86_t0qks.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_yci5dwy.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yci5dwy.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz19jon.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvmtm1wbz.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvmtm1wbz.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvmtm1wbz.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqus9xpn.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            dict += (tup(i) -> tup(i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    (Int, Int)\n\u001b[31m  |\u001b[0m                     Required: (Long, Long)\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqus9xpn.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqus9xpn.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqus9xpn.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1)))\n        test_list_pairs_map.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsaxwl_5.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_list_pairs_map.toMap\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    Map[Long, Long]\n\u001b[31m  |\u001b[0m        Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsaxwl_5.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsaxwl_5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsaxwl_5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_string = test_tup.toString\n        for (i <- 0 until test_string.length) {\n            test_list = test_list :+ test_string(i).asDigit.toLong\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0_iol1t.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0_iol1t.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0_iol1t.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_dict += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiors7i2c.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiors7i2c.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiors7i2c.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var digit = tup % 10\n            if (i % 2 == 0) {\n                dict += (digit -> 0)\n            } else {\n                dict(digit) += 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu29rghso.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu29rghso.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu29rghso.scala:24:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_str = \"\"\n        var test_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqnh9jc_.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqnh9jc_.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqnh9jc_.scala:28:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqnh9jc_.scala:29:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvgw8tl2.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.grouped(2).map(_.toList).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm50z3vy3.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm50z3vy3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm50z3vy3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm50z3vy3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8q1xgd4.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_temp = List[Long]()\n        var test_list_temp_2 = List[Long]()\n        var test_list_temp_3 = List[Long]()\n        var test_list_temp_4 = List[Long]()\n        var test_list_temp_5 = List[Long]()\n        var test_list_temp_6 = List[Long]()\n        var test_list_temp_7 = List[Long]()\n        var test_list_temp_8 = List[Long]()\n        var test_list_temp_9 = List[Long]()\n        var test_list_temp_10 = List[Long]()\n        var test_list_temp_11 = List[Long]()\n        var test_list_temp_12 = List[Long]()\n        var test_list_temp_13 = List[Long]()\n        var test_list_temp_14 = List[Long]()\n        var test_list_temp_15 = List[Long]()\n        var test_list_temp_16 = List[Long]()\n        var test_list_temp_17 = List[Long]()\n        var test_list_temp_18 = List[Long]()\n        var test_list_temp_19 = List[Long]()\n        var test_list_temp_20 = List[Long]()\n        var test_list_temp_21 = List[Long]()\n        var test_list_temp_22 = List[Long]()\n        var test_list_temp_23 = List[Long]()\n        var test_list_temp_24 = List[Long]()\n        var test_list_temp_25 = List[Long]()\n        var test_list_temp_26 = List[Long]()\n        var test_list_temp_27 = List[Long]()\n        var test_list_temp_28 = List[Long]()\n        var test_list_temp_29 = List[Long]()\n        var test_list_temp_30 = List[Long]()\n        var test_list_temp\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpofcpbs5m.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpofcpbs5m.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpofcpbs5m.scala:41:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpofcpbs5m.scala:42:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpofcpbs5m.scala:43:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lcmqlt1.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lcmqlt1.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lcmqlt1.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            test_list = test_list :+ test_tup_list(i)\n            if (i % 2 == 1) {\n                test_map += (test_list(0) -> test_list(1))\n                test_list = List[Long]()\n            }\n        }\n        return test_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfu70wt7.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfu70wt7.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfu70wt7.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_size = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n            test_list_size += 1\n        }\n        for (i <- 0 until test_list_size - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp133y8dfe.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean test_tup.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp133y8dfe.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp133y8dfe.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp133y8dfe.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes9lktj3.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: collection.mutable.Map[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:41:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:42:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpes9lktj3.scala:43:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyqjhqdqx.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head.toLong, x.last.toLong)).toMap\n        test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpt_cc0l.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpt_cc0l.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpt_cc0l.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwpt_cc0l.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnn31tjcd.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_dict\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnn31tjcd.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnn31tjcd.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnn31tjcd.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.substring(i, i + 1).toLong -> test_tup.toString.substring(i + 1, i + 2).toLong)\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6t_fn4y.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6t_fn4y.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6t_fn4y.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe8p5vqk.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsr5b_rh.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsr5b_rh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsr5b_rh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpni0lp57g.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpni0lp57g.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpni0lp57g.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8da5ymi.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8da5ymi.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8da5ymi.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until tup.length - 1) {\n            map += (tup(i) -> tup(i + 1))\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ubd8hpm.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ubd8hpm.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ubd8hpm.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnax9f5yw.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnax9f5yw.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnax9f5yw.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = new HashMap[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pj49h5_.scala:9:21 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            dict += (tup(i) -> tup(i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Found:    (Int, Int)\n\u001b[31m  |\u001b[0m                     Required: (Long, Long)\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pj49h5_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pj49h5_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pj49h5_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vsn8jhp.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vsn8jhp.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vsn8jhp.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa302zc5w.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1665509884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:9:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mreturn\u001b[0m test_tup_list_pairs_map\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    (test_tup_list_pairs_map : Map[Long, Long])\n\u001b[31m  |\u001b[0m               Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkqirg8m.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        test_tup_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpneiiqv7k.scala:9:8 ----------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        test_tup_dict\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    (test_tup_dict : Map[Long, Long])\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[Long, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpneiiqv7k.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpneiiqv7k.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpneiiqv7k.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup_list.length - 2) {\n            dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8mn2ol_s.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8mn2ol_s.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8mn2ol_s.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict\n    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m, \u001b[31m5l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m13l\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(tupleToDict((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m -> \u001b[31m6l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwd1z58.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(tupleToDict((\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m, \u001b[31m12l\u001b[0m)).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m -> \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m -> \u001b[31m10l\u001b[0m, \u001b[31m11l\u001b[0m -> \u001b[31m12l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}