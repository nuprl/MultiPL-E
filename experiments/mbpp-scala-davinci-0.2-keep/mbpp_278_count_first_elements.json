{
  "name": "mbpp_278_count_first_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    def countFirstElements(test_tup : Either[Long, Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countFirstElements((1l, 5l, 7l, (4l, 6l), 10l)) == (3l));\n    assert(countFirstElements((2l, 9l, (5l, 7l), 11l)) == (2l));\n    assert(countFirstElements((11l, 15l, 5l, 8l, (2l, 3l), 8l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        if (test_tup.isLeft) {\n            return test_tup.left.get\n        }\n        else {\n            return test_tup.right.get\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }"
  ]
}