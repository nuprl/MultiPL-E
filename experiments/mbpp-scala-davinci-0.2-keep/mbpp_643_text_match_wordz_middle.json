{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    def textMatchWordzMiddle(text : String) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));\n    assert(textMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^z|z$\".r\n        val textWithoutZ = regex.replaceAllIn(text, \"\")\n        textWithoutZ.contains(\"z\")",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        if (matches.isEmpty) false else true",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\"\"(?<!^)z(?!$)\"\"\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        if (matches.isEmpty) false\n        else {\n            val first = matches.next\n            if (first.length > 1) true\n            else {\n                val last = matches.toList.last\n                if (last.length > 1) true\n                else false\n            }\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        if (text.length == 0) return false\n        if (text.length == 1) return false\n        if (text.length == 2) return false\n        if (text.charAt(0) == 'z') return false\n        if (text.charAt(text.length - 1) == 'z') return false\n        for (i <- 1 until text.length - 1) {\n            if (text.charAt(i) == 'z') return true\n        }\n        return false",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstMatchIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\\\\bz\\\\b\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]+z[^z]+$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]+z[^z]+$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        matches.hasNext",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (text(i) == 'z' && i != 0 && i != text.length - 1) {\n                result = true\n            }\n        }\n        result",
    "        val regex = \"\"\"(?<!^)z(?!$)\"\"\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val textArray = text.split(\" \")\n        for (word <- textArray) {\n            if (word.length > 2 && word.substring(1, word.length - 1).contains(\"z\")) {\n                return true\n            }\n        }\n        false",
    "        text.matches(\"^[^z].*z.*[^z]$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (i == 0 || i == text.length - 1) {\n                if (text(i) == 'z') {\n                    result = true\n                }\n            } else {\n                if (text(i) == 'z') {\n                    result = false\n                }\n            }\n        }\n        result",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        if (matches.isEmpty) false\n        else {\n            val firstMatch = matches.next\n            val lastMatch = matches.next\n            if (firstMatch == lastMatch) true\n            else false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"\"\".*z.*\"\"\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        text.matches(\".*[^z]z[^z].*\")",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        val zs = matches.toList\n        zs.length > 0",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"z\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\\\\bz\\\\b\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^z|z$\".r\n        val textWithoutZ = regex.replaceAllIn(text, \"\")\n        textWithoutZ.contains(\"z\")",
    "        val regex = \"z\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z].*z.*[^z]$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (text(i) == 'z' && i != 0 && i != text.length - 1) {\n                result = true\n            }\n        }\n        result",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"\"\"(?<!^)z(?!$)\"\"\".r\n        regex.findFirstIn(text).isDefined",
    "        if (text.length == 0) return false\n        if (text.length == 1) return false\n        if (text.length == 2) return false\n        if (text.length == 3) return text(1) == 'z'\n        if (text.length == 4) return text(1) == 'z' || text(2) == 'z'\n        if (text.length == 5) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z'\n        if (text.length == 6) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z'\n        if (text.length == 7) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z' || text(5) == 'z'\n        if (text.length == 8) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z' || text(5) == 'z' || text(6) == 'z'\n        if (text.length == 9) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z' || text(5) == 'z' || text(6) == 'z' || text(7) == 'z'\n        if (text.length == 10) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z' || text(5) == 'z' || text(6) == 'z' || text(7) == 'z' || text(8) == 'z'\n        if (text.length == 11) return text(1) == 'z' || text(2) == 'z' || text(3) == 'z' || text(4) == 'z' || text(5) == 'z' || text(6) == 'z' || text(7) == 'z",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"z\".r\n        val result = pattern.findFirstIn(text)\n        if (result != None) {\n            val index = result.get.indexOf('z')\n            if (index == 0 || index == text.length - 1) {\n                return false\n            }\n            return true\n        }\n        return false",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        //val text = \"zoo\"\n        val textArray = text.toCharArray\n        var result = false\n        for (i <- 1 until textArray.length - 1) {\n            if (textArray(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val regex = \"^[^z]+z[^z]+$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^z.*z$\".r\n        val pattern2 = \"^z.*z\".r\n        val pattern3 = \".*z$\".r\n        val pattern4 = \"^z.*\".r\n        val pattern5 = \".*z$\".r\n        val pattern6 = \"^z$\".r\n        val pattern7 = \"^z\".r\n        val pattern8 = \"z$\".r\n        val pattern9 = \".*z.*\".r\n        val pattern10 = \".*z\".r\n        val pattern11 = \"z.*\".r\n        val pattern12 = \"z\".r\n        val pattern13 = \"z.*z\".r\n        val pattern14 = \"z.*z$\".r\n        val pattern15 = \"^z.*z\".r\n        val pattern16 = \"^z.*z$\".r\n        val pattern17 = \"^z.*z$\".r\n        val pattern18 = \"^z.*z$\".r\n        val pattern19 = \"^z.*z$\".r\n        val pattern20 = \"^z.*z$\".r\n        val pattern21 = \"^z.*z$\".r\n        val pattern22 = \"^z.*z$\".r\n        val pattern23 = \"^z.*z$\".r\n        val pattern24 = \"^z.*z$\".r\n        val pattern25 = \"^z.*z$\".r\n        val pattern26 = \"^z.*z$\".r\n        val pattern27 = \"^z.*z$\".r\n        val pattern28 = \"^z.*z$\".r\n        val pattern29 = \"^z.*z$\".r\n        val pattern30 = \"^z.*z$\".r\n        val pattern31 = \"^z.*z$\".r\n        val pattern32 = \"^z.*z$\".r\n        val pattern33 = \"^z.*z$\".r\n        val pattern34 = \"^z.*z$\".r\n        val pattern35 = \"^z.*z$\".r\n        val pattern36 = \"^z.*z$\".r\n        val pattern37 = \"^z.*z$\".r\n        val pattern38 = \"^z.*z$\".r\n        val pattern39 = \"^z.*z$",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        val matchesList = matches.toList\n        if (matchesList.isEmpty) {\n            return false\n        } else {\n            return true\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        matches.hasNext",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]+z[^z]+$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (i == 0 || i == text.length - 1) {\n                if (text(i) == 'z') result = true\n            }\n            else {\n                if (text(i) == 'z') result = false\n            }\n        }\n        result",
    "        val pattern = \"(?<!^)z(?!$)\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (i == 0 || i == text.length - 1) {\n                if (text(i) == 'z') {\n                    result = false\n                    return result\n                }\n            } else {\n                if (text(i) == 'z') {\n                    result = true\n                    return result\n                }\n            }\n        }\n        result",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]+z[^z]+$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (text(i) == 'z' && i != 0 && i != text.length - 1) result = true\n        }\n        result",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]+z[^z]+$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(text) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        var flag = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                flag = true\n            }\n        }\n        flag",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\\\\bz\\\\b\".r\n        regex.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"z\".r\n        val matches = pattern.findAllIn(text)\n        matches.hasNext",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text).isDefined",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 0 until text.length) {\n            if (i > 0 && i < text.length - 1 && text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        var result = false\n        for (i <- 1 until text.length - 1) {\n            if (text(i) == 'z') {\n                result = true\n            }\n        }\n        result",
    "        text.matches(\"^[^z].*z.*[^z]$\")",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        text.matches(\".*z.*\") && !text.matches(\"^z.*\") && !text.matches(\".*z$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text).isDefined",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z].*z.*[^z]$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        text.matches(\"^[^z]*z[^z]*$\")",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[^z]*z[^z]*$\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[^z]*z[^z]*$\".r\n        regex.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"\"\"(?<!^)z(?!$)\"\"\".r\n        regex.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }"
  ]
}