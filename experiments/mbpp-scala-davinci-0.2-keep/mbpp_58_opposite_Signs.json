{
  "name": "mbpp_58_opposite_Signs",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given two integers have opposite sign or not.\n    def oppositeSigns(x : Long, y : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oppositeSigns((1l), (-2l)) == (true));\n    assert(oppositeSigns((3l), (2l)) == (false));\n    assert(oppositeSigns((-10l), (-10l)) == (false));\n    assert(oppositeSigns((-2l), (2l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return ((x ^ y) < 0)",
    "        return (x ^ y) < 0",
    "        if ((x ^ y) < 0) true else false",
    "        if ((x ^ y) < 0) true else false",
    "        return ((x ^ y) < 0)",
    "        if ((x ^ y) < 0) true else false",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        if ((x ^ y) < 0) true else false",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        if (x < 0 && y > 0) true\n        else if (x > 0 && y < 0) true\n        else false",
    "        return ((x ^ y) < 0)",
    "        return ((x ^ y) < 0)",
    "        return (x ^ y) < 0"
  ]
}