{
  "name": "mbpp_279_is_num_decagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth decagonal number.\n    def isNumDecagonal(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val d = (3 + sqrt(9 + 8 * n)) / 2\n        if (d == d.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val sqrtD = sqrt(d)\n        val x1 = (-b + sqrtD) / (2 * a)\n        val x2 = (-b - sqrtD) / (2 * a)\n        if (x1 == x1.toInt) x1.toInt\n        else if (x2 == x2.toInt) x2.toInt\n        else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val x = (sqrt(4 * n * n + 4 * n + 1) + 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val sqrt = sqrt(1 + 4 * 2 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt + 1) / 2\n            if (x == x.toInt) {\n                x.toLong\n            } else {\n                0\n            }\n        } else {\n            0\n        }",
    "        val a = (sqrt(1 + 4 * 2 * n) + 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return 0\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x2) return 0\n        if (x1 > 0 && x1 == x1.toInt) return x1.toInt\n        if (x2 > 0 && x2 == x2.toInt) return x2.toInt\n        return 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1"
  ]
}