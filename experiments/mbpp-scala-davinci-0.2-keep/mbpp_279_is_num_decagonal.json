{
  "name": "mbpp_279_is_num_decagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth decagonal number.\n    def isNumDecagonal(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val d = (3 + sqrt(9 + 8 * n)) / 2\n        if (d == d.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val sqrtD = sqrt(d)\n        val x1 = (-b + sqrtD) / (2 * a)\n        val x2 = (-b - sqrtD) / (2 * a)\n        if (x1 == x1.toInt) x1.toInt\n        else if (x2 == x2.toInt) x2.toInt\n        else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val x = (sqrt(4 * n * n + 4 * n + 1) + 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val sqrt = sqrt(1 + 4 * 2 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt + 1) / 2\n            if (x == x.toInt) {\n                x.toLong\n            } else {\n                0\n            }\n        } else {\n            0\n        }",
    "        val a = (sqrt(1 + 4 * 2 * n) + 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return 0\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x2) return 0\n        if (x1 > 0 && x1 == x1.toInt) return x1.toInt\n        if (x2 > 0 && x2 == x2.toInt) return x2.toInt\n        return 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        var x = 1\n        while (true) {\n            val y = (x * (3 * x - 1)) / 2\n            if (y == n) return x\n            if (y > n) return -1\n            x += 1\n        }\n        return -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        var i = 1\n        while (i * (3 * i - 1) / 2 < n) i += 1\n        if (i * (3 * i - 1) / 2 == n) i\n        else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toLong) x.toLong else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(4 * n + 1) + 1) / 2\n        if (d == d.toInt) n else 0",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        return -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return -1\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x1.toInt) return x1.toInt\n        if (x2 == x2.toInt) return x2.toInt\n        return -1",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toLong) x.toLong else -1",
    "        val r = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (r == r.toInt) r.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        else return -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        var x = 1\n        var num = 0\n        while (num < n) {\n            num = x * (3 * x - 1) / 2\n            x += 1\n        }\n        return num",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) {\n            return a.toInt\n        }\n        return -1",
    "        var x = 1.0\n        var y = 1.0\n        while (true) {\n            val z = x + y\n            if (z == n) return z.toLong\n            if (z > n) return -1\n            x = y\n            y = z\n        }\n        return -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 4 * 2 * n)) / 2\n        if (a == a.toInt) n else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        var x = 1\n        var num = 0\n        while (num < n) {\n            num = x * (3 * x - 1) / 2\n            x += 1\n        }\n        num",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x1.toInt) return x1.toInt\n        if (x2 == x2.toInt) return x2.toInt\n        return -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return 0\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1.isValidInt) return x1.toLong\n        if (x2.isValidInt) return x2.toLong\n        return 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toLong) {\n            x.toLong\n        } else {\n            -1\n        }",
    "        var x = 1\n        var y = 1\n        while (x * 10 + y * 10 < n) {\n            x += 1\n            y += 1\n        }\n        if (x * 10 + y * 10 == n) x\n        else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) return x.toInt\n        return -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toLong) x.toLong else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return -1\n        val sqrtD = sqrt(d)\n        val x1 = (-b + sqrtD) / (2 * a)\n        val x2 = (-b - sqrtD) / (2 * a)\n        if (x1.isWhole) return x1.toLong\n        if (x2.isWhole) return x2.toLong\n        return -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return 0\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x2) return x1.toLong\n        return 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var i = 1\n        while (true) {\n            val d = i * (3 * i - 1) / 2\n            if (d == n) return i\n            if (d > n) return -1\n            i += 1\n        }\n        return -1",
    "        var x = 1\n        while (true) {\n            val y = (x * (3 * x - 1)) / 2\n            if (y == n) return x\n            if (y > n) return -1\n            x += 1\n        }\n        -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val s = sqrt(d)\n        val x1 = (-b + s) / (2 * a)\n        val x2 = (-b - s) / (2 * a)\n        if (x1 == x1.toInt) x1.toInt\n        else if (x2 == x2.toInt) x2.toInt\n        else -1",
    "        val r = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (r == r.toInt) r.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val n1 = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (n1 == n1.toInt) n1.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) return nth.toInt\n        else return -1",
    "        var i = 1\n        var num = 0L\n        while (num < n) {\n            num = i * (3 * i - 1) / 2\n            i += 1\n        }\n        if (num == n) return i - 1\n        return -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        else return -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        val x = if (x1 > 0 && x1 == x1.toInt) x1 else x2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        else return 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return -1\n        val e = sqrt(d)\n        val x1 = (-b + e) / (2 * a)\n        val x2 = (-b - e) / (2 * a)\n        if (x1 == x1.toLong) return x1.toLong\n        if (x2 == x2.toLong) return x2.toLong\n        return -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) + 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        var x = 1\n        var decagonal = 0\n        while (decagonal < n) {\n            decagonal = x * (3 * x - 1) / 2\n            x += 1\n        }\n        if (decagonal == n) decagonal else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1.isWhole && x1 > 0) x1.toLong\n        else if (x2.isWhole && x2 > 0) x2.toLong\n        else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return 0",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else -1",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) return 0\n        val x1 = (-b + sqrt(d)) / (2 * a)\n        val x2 = (-b - sqrt(d)) / (2 * a)\n        if (x1 == x2) return 0\n        if (x1 % 1 == 0) return x1.toLong\n        if (x2 % 1 == 0) return x2.toLong\n        return 0",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d % 1 == 0) d else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val p = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (p == p.toInt) p.toInt else -1",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m % 1 == 0) m else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) {\n            val y = (sqrt(1 + 4 * 2 * (n - 1)) - 1) / 2\n            if (y != y.toInt) return x.toInt\n        }\n        return -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        var x = 1\n        var y = 1\n        while (x < n) {\n            x = y * (3 * y - 1) / 2\n            y += 1\n        }\n        if (x == n) return y - 1\n        return 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (r == r.toInt) r.toInt else -1",
    "        val a = (3 + sqrt(9 + 12 * (n - 1))) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        var i = 1\n        while (true) {\n            val num = i * (3 * i - 1) / 2\n            if (num == n) return i\n            if (num > n) return -1\n            i += 1\n        }\n        -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val n1 = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (n1 == n1.toInt) n1.toInt else -1",
    "        var x = 1\n        var num = 0\n        while (num < n) {\n            num = x * (3 * x - 1) / 2\n            x += 1\n        }\n        return num",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val nth = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val d = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (d == d.toInt) d.toInt else -1",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt\n        else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val d = (sqrt(4 * n * n + 4 * n + 1) + 1) / 2\n        if (d == d.toInt) n else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) return a.toInt\n        else return 0",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = 3\n        val b = -1\n        val c = -2 * n\n        val d = b * b - 4 * a * c\n        if (d < 0) 0\n        else {\n            val x1 = (-b + sqrt(d)) / (2 * a)\n            val x2 = (-b - sqrt(d)) / (2 * a)\n            if (x1 == x2) 0\n            else if (x1 < 0 && x2 < 0) 0\n            else if (x1 < 0) x2\n            else if (x2 < 0) x1\n            else if (x1 > x2) x1\n            else x2\n        }",
    "        val m = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        var i = 1\n        while (true) {\n            val num = i * (3 * i - 1) / 2\n            if (num == n) return i\n            else if (num > n) return -1\n            i += 1\n        }\n        -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt)\n            return a.toInt\n        return -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val s = sqrt(1 + 4 * 2 * n)\n        if (s == floor(s)) {\n            val x = (1 + s) / 2\n            if (x == floor(x)) {\n                return x\n            }\n        }\n        return -1",
    "        val a = (3 + sqrt(9 + 40 * n)) / 10\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 4 * 2 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1"
  ]
}