{
  "name": "mbpp_127_multiply_int",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        var result = 0L\n        if (a < 0) {\n            a = -a\n            if (b < 0) {\n                b = -b\n                while (a > 0) {\n                    result += b\n                    a -= 1\n                }\n            } else {\n                while (a > 0) {\n                    result -= b\n                    a -= 1\n                }\n            }\n        } else {\n            if (b < 0) {\n                b = -b\n                while (a > 0) {\n                    result -= b\n                    a -= 1\n                }\n            } else {\n                while (a > 0) {\n                    result += b\n                    a -= 1\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y + y + y + y + y + y\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y + y + y + y + y + y + y + y + y + y + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6bz_6tf.scala:32:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m12\u001b[0m) \u001b[33mreturn\u001b[0m y + y + y + y + y + y + y + y + y + y + y\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (y > x) multiplyInt(y, x)\n        else {\n            val z = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) z + z\n            else z + z + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half << 1\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y << 1 + y << 2\n        if (y == 6) return x << 1 + x << 2\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y << 2 + y << 2\n        if (y == 12) return x << 2 + x << 2\n        if (x == 13) return y + y + y + y + y + y + y + y + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe23370o7.scala:34:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m13\u001b[0m) \u001b[33mreturn\u001b[0m y + y + y + y + y + y + y + y + y\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y < 0) -(x + multiplyInt(x, -y - 1))\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val (x1, y1) = if (x < 0) (-x, y) else (x, y)\n        val (x2, y2) = if (y < 0) (x1, -y1) else (x1, y1)\n        val (x3, y3) = if (x2 < y2) (x2, y2) else (y2, x2)\n        val (x4, y4) = if (x3 == 1) (x3, y3) else (x3 >> 1, y4 << 1)\n        val (x5, y5) = if (x4 % 2 == 0) (x4, y5) else (x4 - 1, y5 + y4)\n        val (x6, y6) = if (x5 == 0) (x5, y6) else (x5, multiplyInt(x5, y5))\n        if (x < 0) -y6 else y6\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdxhxyaab.scala:10:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m (x4, y4) = \u001b[33mif\u001b[0m (x3 == \u001b[31m1\u001b[0m) (x3, y3) \u001b[33melse\u001b[0m (x3 >> \u001b[31m1\u001b[0m, y4 << \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35m$4$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdxhxyaab.scala:11:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m (x5, y5) = \u001b[33mif\u001b[0m (x4 % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) (x4, y5) \u001b[33melse\u001b[0m (x4 - \u001b[31m1\u001b[0m, y5 + y4)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35m$5$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdxhxyaab.scala:12:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m (x6, y6) = \u001b[33mif\u001b[0m (x5 == \u001b[31m0\u001b[0m) (x5, y6) \u001b[33melse\u001b[0m (x5, multiplyInt(x5, y5))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35m$6$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) a = -x\n        if (y < 0) b = -y\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        if (x < 0 && y < 0) result else if (x < 0 || y < 0) -result else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val z = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) z + z\n            else z + z + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < y) {\n            sum += x\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y + y\n        else if (y == 2) x + x\n        else if (x % 2 == 0) multiplyInt(x / 2, y + y)\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510264,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val (x1, y1) = if (x > y) (x, y) else (y, x)\n        var result = 0L\n        for (i <- 1 to y1.toInt) {\n            result += x1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x % 2 == 0) multiplyInt(x >> 1, y) << 1\n        else if (y % 2 == 0) multiplyInt(x, y >> 1) << 1\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) multiplyInt(-x, y)\n        else if (y < 0) multiplyInt(x, -y)\n        else if (x == y) multiplyInt(x, x)\n        else if (x > y) multiplyInt(y, x)\n        else if (x == 2) y << 1\n        else if (x == 3) y + y + y\n        else if (x == 4) y << 2\n        else if (x == 5) y << 2 + y\n        else if (x == 6) y << 2 + y + y\n        else if (x == 7) y << 3 + y + y + y\n        else if (x == 8) y << 3\n        else if (x == 9) y << 3 + y + y + y + y\n        else if (x == 10) y << 3 + y << 2\n        else if (x == 11) y << 3 + y << 2 + y\n        else if (x == 12) y << 3 + y << 2 + y + y\n        else if (x == 13) y << 3 + y << 2 + y + y + y\n        else if (x == 14) y << 3 + y << 2 + y << 1\n        else if (x == 15) y << 3 + y << 2 + y << 1 + y\n        else if (x == 16) y << 4\n        else if (x == 17) y << 4 + y\n        else if (x == 18) y << 4 + y + y\n        else if (x == 19) y << 4 + y + y + y\n        else if (x == 20) y << 4 + y << 2\n        else if (x == 21) y << 4 + y << 2 + y\n        else if (x == 22) y << 4 + y << 2 + y + y\n        else if (x == 23) y << 4 + y << 2 + y + y + y\n        else if (x == 24) y << 4 + y << 2 + y << 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122987,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaaya6h6y.scala:36:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m24\u001b[0m) y << \u001b[31m4\u001b[0m + y << \u001b[31m2\u001b[0m + y << \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Unit\n\u001b[31m   |\u001b[0m             Required: Long\n\u001b[31m   |\u001b[0m             Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0L\n        while (a > 0) {\n            if ((a & 1) == 1) result += b\n            a >>= 1\n            b <<= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, y / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        for (i <- 1 to y.toInt) result += x\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y << 1 + y << 2\n        else if (y == 6) x << 1 + x << 2\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y + y + y + y + y\n        else if (y == 10) x + x + x + x + x\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if (y % 2 == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_0r4a9i0.scala:37)\n\tat Problem.main(tmp_0r4a9i0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x > 0 && y > 0) return multiplyInt(x, y - 1) + x\n        if (x < 0 && y < 0) return multiplyInt(x, y + 1) - x\n        if (x > 0 && y < 0) return multiplyInt(x, y + 1) - x\n        if (x < 0 && y > 0) return multiplyInt(x, y - 1) + x\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var (a, b) = if (x > y) (x, y) else (y, x)\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val half = multiplyInt(a, b >> 1)\n            if ((b & 1) == 1) half + half + a else half + half\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val half = multiplyInt(a, b >> 1)\n            if ((b & 1) == 0) half + half\n            else half + half + a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var a = x\n        var b = y\n        var result = 0L\n        while (b > 0) {\n            if ((b & 1) == 1) result += a\n            a <<= 1\n            b >>= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        def multiplyInt(x : Long, y : Long, acc : Long) : Long = {\n            if (x == 0 || y == 0) acc\n            else if (x == 1) acc + y\n            else if (y == 1) acc + x\n            else if (x == -1) acc - y\n            else if (y == -1) acc - x\n            else if (x < 0 && y < 0) multiplyInt(-x, -y, acc)\n            else if (x < 0) multiplyInt(-x, y, acc - y)\n            else if (y < 0) multiplyInt(x, -y, acc - x)\n            else multiplyInt(x - 1, y, acc + y)\n        }\n        multiplyInt(x, y, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) * 2\n        else x + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvhyv9oqn.scala:17)\n\tat Problem.main(tmpvhyv9oqn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val (q, r) = (a / 2, a % 2)\n            if (r == 0) multiplyInt(q, b + b)\n            else multiplyInt(q, b + b) + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122993,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val a = abs(x)\n        val b = abs(y)\n        val c = min(a, b)\n        val d = max(a, b)\n        val e = if (c == a) x else y\n        val f = if (c == a) y else x\n        val g = c * d\n        if (e < 0) -g else g\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            if (x < y) multiplyInt(y, x)\n            else {\n                val half = multiplyInt(x, y >> 1)\n                if ((y & 1) == 0) half + half\n                else half + half + x\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            var result = 0L\n            for (i <- 1 to x.toInt) result += y\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == -2) return -(y << 1)\n        if (y == -2) return -(x << 1)\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == -3) return -(y + y + y)\n        if (y == -3) return -(x + x + x)\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == -4) return -(y << 2)\n        if (y == -4) return -(x << 2)\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == -5) return -(y + y + y + y + y)\n        if (y == -5) return -(x + x + x + x + x)\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == -6) return -(y + y + y + y + y + y)\n        if (y == -6) return -(x + x + x + x + x + x)\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == -7) return -(y + y + y + y + y + y + y)\n        if (y == -7) return -(x + x + x + x + x + x + x)\n        if (x == 8) return y << 3\n       \n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpji0478w6.scala:35:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[33mreturn\u001b[0m y << \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            if (x < y) multiplyInt(y, x)\n            else {\n                val m = x >> 1\n                val n = multiplyInt(m, y)\n                if (x % 2 == 0) n + n\n                else n + n + y\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0L\n        while (b != 0) {\n            if ((b & 1) != 0) result += a\n            a <<= 1\n            b >>= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 to y1.toString.length - 1) {\n            val digit = y1.toString.charAt(i).asDigit\n            result += x1 * digit * pow(10, i).toLong\n        }\n        result * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi5_lbth8.scala:18)\n\tat Problem.main(tmpi5_lbth8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, y1) = if (x < y) (x, y) else (y, x)\n            var result = 0L\n            for (i <- 1 to x1.toInt) result += y1\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        if (y < 0) return -multiplyInt(x, -y)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, y / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122968,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) x + multiplyInt(x, y + 1)\n        else if (x > 0 && y < 0) -(x + multiplyInt(x, -y - 1))\n        else -(x + multiplyInt(-x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, x2) = if (x % 2 == 0) (x / 2, x / 2) else (x / 2, x / 2 + 1)\n            val (y1, y2) = if (y % 2 == 0) (y / 2, y / 2) else (y / 2, y / 2 + 1)\n            multiplyInt(x1, y1) + multiplyInt(x1, y2) + multiplyInt(x2, y1) + multiplyInt(x2, y2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else {\n            val (a, b) = if (x < 0) (-x, y) else (x, y)\n            if (b < 0) -multiplyInt(a, -b)\n            else {\n                var result = 0L\n                for (i <- 1 to a.toInt) result += b\n                result\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        var x1 = abs(x)\n        var y1 = abs(y)\n        var result = 0L\n        while (y1 != 0) {\n            if ((y1 & 1) != 0) result += x1\n            x1 <<= 1\n            y1 >>= 1\n        }\n        result * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        val x1 = if (x < 0) -x else x\n        val y1 = if (y < 0) -y else y\n        val result = multiplyInt(x1 >> 1, y1) << 1\n        if ((x1 & 1) == 1) result + y1 else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) multiplyInt(-x, y)\n        else if (y < 0) multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x / 2, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        val absX = abs(x)\n        val absY = abs(y)\n        if (absX == 1) return absY * sign\n        if (absY == 1) return absX * sign\n        val half = multiplyInt(absX / 2, absY)\n        if (absX % 2 == 0) return half + half * sign\n        else return half + half + absY * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val a = abs(x)\n        val b = abs(y)\n        val c = min(a, b)\n        val d = max(a, b)\n        var result = 0L\n        for (i <- 1 to c.toInt) result += d\n        if (x < 0 && y < 0) result\n        else if (x < 0 || y < 0) -result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        return multiplyInt(x / 2, y) * 2 + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val sign = if (x < 0 && y < 0) 1 else if (x < 0 || y < 0) -1 else 1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        if (x1 < y1) multiplyInt(y1, x1)\n        else {\n            val half = multiplyInt(x1, y1 >> 1)\n            if ((y1 & 1) == 0) half + half\n            else half + half + x1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        while (a > 0) {\n            if ((a & 1) == 1) result += b\n            a >>= 1\n            b <<= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0L\n        while (a != 0) {\n            if ((a & 1) != 0) result += b\n            a >>= 1\n            b <<= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) multiplyInt(x, y + 1) - x\n        else if (x > 0 && y < 0) multiplyInt(x, y + 1) - x\n        else multiplyInt(x + 1, y) - y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n            b = -y\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) {\n            result += b\n        }\n        if (x < 0) result = -result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else {\n            val (x1, y1) = if (x < 0) (-x, y) else (x, y)\n            val (x2, y2) = if (y < 0) (x1, -y1) else (x1, y1)\n            val x3 = if (x2 % 2 == 0) x2 / 2 else x2\n            val y3 = if (x2 % 2 == 0) y2 * 2 else y2\n            val z = multiplyInt(x3, y3)\n            if (x2 % 2 == 0) z else z + y3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:12)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\tat Problem$.multiplyInt(tmp3nc1rwzi.scala:16)\n\ta",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122988,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x % 2 == 0) multiplyInt(x / 2, y + y)\n        else y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        val sign = if ((x > 0 && y > 0) || (x < 0 && y < 0)) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        if (x1 < y1) multiplyInt(y1, x1)\n        else {\n            val result = multiplyInt(x1, y1 / 2)\n            if (y1 % 2 == 0) result + result\n            else result + result + x1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val absX = abs(x)\n        val absY = abs(y)\n        val absResult = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) absResult\n        else if (x < 0 || y < 0) -absResult\n        else absResult\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multiplyInt(tmp_pi8yhew.scala:11)\n\tat Problem$.multi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val result = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) result\n        else if (x < 0 || y < 0) -result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.multiplyInt(tmpdm8_zxoh.scala:9)\n\tat Problem$.m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, x2) = if (x % 2 == 0) (x / 2, x / 2) else (x / 2, x / 2 + 1)\n            val (y1, y2) = if (y % 2 == 0) (y / 2, y / 2) else (y / 2, y / 2 + 1)\n            multiplyInt(x1, y1) + multiplyInt(x1, y2) + multiplyInt(x2, y1) + multiplyInt(x2, y2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == -2) return -(y << 1)\n        if (y == -2) return -(x << 1)\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == -3) return -(y + y + y)\n        if (y == -3) return -(x + x + x)\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == -4) return -(y << 2)\n        if (y == -4) return -(x << 2)\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == -5) return -(y + y + y + y + y)\n        if (y == -5) return -(x + x + x + x + x)\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == -6) return -(y + y + y + y + y + y)\n        if (y == -6) return -(x + x + x + x + x + x)\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == -7) return -(y + y + y + y + y + y + y)\n        if (y == -7) return -(x + x + x + x + x + x + x)\n        if (x == 8) return y << 3\n       \n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpji0478w6.scala:35:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[33mreturn\u001b[0m y << \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        if (y % 2 == 0) return multiplyInt(x, y / 2) * 2\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        val z = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) z + z\n        else x + z + z\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y + y + y + y + y + y\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y + y + y + y + y + y + y + y + y + y + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6bz_6tf.scala:32:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m12\u001b[0m) \u001b[33mreturn\u001b[0m y + y + y + y + y + y + y + y + y + y + y\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x > 0 && y > 0) || (x < 0 && y < 0)) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 until y1.toInt) {\n            result += x1\n        }\n        result * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        else if (x == 1) return y\n        else if (y == 1) return x\n        else if (x == -1) return -y\n        else if (y == -1) return -x\n        else if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        else if (x < 0) return -multiplyInt(-x, y)\n        else if (y < 0) return -multiplyInt(x, -y)\n        else if (x < y) return multiplyInt(y, x)\n        else if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        else return multiplyInt(x / 2, y) * 2 + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        for (i <- 1 to y.toInt) result += x\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0\n        while (a != 0) {\n            if ((a & 1) != 0) result += b\n            a = a >> 1\n            b = b << 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3th9gczn.scala:10:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m ((a & \u001b[31m1\u001b[0m) != \u001b[31m0\u001b[0m) result += b\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        val sign = if (x < 0 && y < 0) 1 else if (x < 0 || y < 0) -1 else 1\n        var x1 = abs(x)\n        var y1 = abs(y)\n        var result = 0L\n        while (x1 > 0) {\n            if ((x1 & 1) == 1) {\n                result += y1\n            }\n            x1 >>= 1\n            y1 <<= 1\n        }\n        sign * result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y + y + y + y + y + y\n        else if (y == 6) x + x + x + x + x + x\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y + y + y + y + y + y + y + y + y + y\n        else if (y == 10) x + x + x + x + x + x + x + x + x + x\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x + x\n        else if (x == 12) y << 2 + y << 2\n        else if (y == 12) x << 2 + x <<\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7iu7n_bu.scala:33:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (y == \u001b[31m12\u001b[0m) x << \u001b[31m2\u001b[0m + x <<\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) {\n            result += b\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, x2) = (x >> 1, x - (x >> 1 << 1))\n            val (y1, y2) = (y >> 1, y - (y >> 1 << 1))\n            val z1 = multiplyInt(x1, y1)\n            val z2 = multiplyInt(x2, y2)\n            val z3 = multiplyInt(x1 + x2, y1 + y2) - z1 - z2\n            (z1 << 1) + z2 + (z3 << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn7i1btp3.scala:22)\n\tat Problem.main(tmpn7i1btp3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x / 2, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val (q, r) = (a / 2, a % 2)\n            if (r == 0) multiplyInt(q, b) + multiplyInt(q, b)\n            else multiplyInt(q, b) + multiplyInt(q, b) + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val half = multiplyInt(a >> 1, b)\n            if (a % 2 == 0) half + half\n            else half + half + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, y / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == -2) return -(y << 1)\n        if (y == -2) return -(x << 1)\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == -3) return -(y + y + y)\n        if (y == -3) return -(x + x + x)\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == -4) return -(y << 2)\n        if (y == -4) return -(x << 2)\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == -5) return -(y + y + y + y + y)\n        if (y == -5) return -(x + x + x + x + x)\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == -6) return -(y + y + y + y + y + y)\n        if (y == -6) return -(x + x + x + x + x + x)\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == -7) return -(y + y + y + y + y + y + y)\n        if (y == -7) return -(x + x + x + x + x + x + x)\n        if (x == 8) return y << 3\n       \n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpji0478w6.scala:35:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[33mreturn\u001b[0m y << \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n        }\n        if (y < 0) {\n            b = -y\n        }\n        var result = 0L\n        for (i <- 0 until b.toInt) {\n            result += a\n        }\n        if (x < 0 && y < 0) {\n            return result\n        } else if (x < 0 || y < 0) {\n            return -result\n        } else {\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var sum = 0L\n        while (a != 0) {\n            if ((a & 1) != 0) {\n                sum = add(sum, b)\n            }\n            a = a >> 1\n            b = b << 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpom9rom1p.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                sum = add(sum, b)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: add\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y << 1 + y << 2\n        if (y == 6) return x << 1 + x << 2\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y << 2 + y << 2\n        if (y == 12) return x << 2 + x << 2\n        if (x == 13) return y + y + y + y + y + y + y + y + y + y + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc00tg5r5.scala:34:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m13\u001b[0m) \u001b[33mreturn\u001b[0m y + y + y + y + y + y + y + y + y + y + y\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x % 2 == 0) multiplyInt(x >> 1, y) << 1\n        else if (y % 2 == 0) multiplyInt(x, y >> 1) << 1\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        else if (x == 1) return y\n        else if (y == 1) return x\n        else if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        else if (x < 0) return -multiplyInt(-x, y)\n        else if (y < 0) return -multiplyInt(x, -y)\n        else if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val half = multiplyInt(x, y / 2)\n            if (y % 2 == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val z = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) z << 1\n            else z << 1 + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9fl_wxe1.scala:16)\n\tat Problem.main(tmp9fl_wxe1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (y > 0) {\n            if ((y & 1) == 1) result += x << i\n            y >>= 1\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_lwsc38.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            y >>= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value >>= is not a member of Long - did you mean y.>=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == -2) return -(y << 1)\n        if (y == -2) return -(x << 1)\n        if (x == 3) return y + (y << 1)\n        if (y == 3) return x + (x << 1)\n        if (x == -3) return -(y + (y << 1))\n        if (y == -3) return -(x + (x << 1))\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == -4) return -(y << 2)\n        if (y == -4) return -(x << 2)\n        if (x == 5) return y + (y << 2)\n        if (y == 5) return x + (x << 2)\n        if (x == -5) return -(y + (y << 2))\n        if (y == -5) return -(x + (x << 2))\n        if (x == 6) return (y << 1) + (y << 2)\n        if (y == 6) return (x << 1) + (x << 2)\n        if (x == -6) return -((y << 1) + (y << 2))\n        if (y == -6) return -((x << 1) + (x << 2))\n        if (x == 7) return (y << 3) - y\n        if (y == 7) return (x << 3) - x\n        if (x == -7) return -((y << 3) - y)\n        if (y == -7) return -((x << 3) - x)\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == -8) return -(y << 3)\n        if (y == -8\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpabl0jnem.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) {\n            multiplyInt(-x, -y)\n        } else if (x < 0) {\n            -multiplyInt(-x, y)\n        } else if (y < 0) {\n            -multiplyInt(x, -y)\n        } else if (x == 0 || y == 0) {\n            0\n        } else if (x == 1) {\n            y\n        } else if (y == 1) {\n            x\n        } else if (x == 2) {\n            y << 1\n        } else if (y == 2) {\n            x << 1\n        } else if (x % 2 == 0) {\n            multiplyInt(x >> 1, y) << 1\n        } else if (y % 2 == 0) {\n            multiplyInt(x, y >> 1) << 1\n        } else {\n            x + multiplyInt(x, y - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        val sign = if (x < 0 && y < 0 || x > 0 && y > 0) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 to y1.toInt - 1) result += x1\n        sign * result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x % 2 == 0) multiplyInt(x >> 1, y << 1)\n        else if (y % 2 == 0) multiplyInt(x << 1, y >> 1)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123011,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val (a, b) = if (x > y) (x, y) else (y, x)\n        val half = multiplyInt(a, b / 2)\n        if (b % 2 == 0) half + half else half + half + a\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (y == 1) x\n        else if (y == -1) -x\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -x + multiplyInt(x, y + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122968,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) * 2\n        else return multiplyInt(x, y / 2) * 2 + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else multiplyInt(x, y - 1) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else if (y % 2 == 0) multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val n = max(x, y)\n            val m = min(x, y)\n            val half = multiplyInt(n >> 1, m)\n            if (n % 2 == 0) half + half\n            else half + half + m\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) {\n            multiplyInt(-x, -y)\n        } else if (x < 0) {\n            -multiplyInt(-x, y)\n        } else if (y < 0) {\n            -multiplyInt(x, -y)\n        } else if (x == 0 || y == 0) {\n            0\n        } else if (x == 1) {\n            y\n        } else if (y == 1) {\n            x\n        } else if (x == 2) {\n            y << 1\n        } else if (y == 2) {\n            x << 1\n        } else if (x % 2 == 0) {\n            multiplyInt(x >> 1, y) << 1\n        } else if (y % 2 == 0) {\n            multiplyInt(x, y >> 1) << 1\n        } else {\n            x + multiplyInt(x, y - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        return multiplyInt(x / 2, y) * 2 + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val (a, b) = if (x < 0) (-x, y) else (x, y)\n        val (c, d) = if (y < 0) (a, -b) else (a, b)\n        val result = multiplyInt(c, d)\n        if (x < 0 && y < 0) result else if (x < 0 || y < 0) -result else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:7)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:9)\n\tat Problem$.multiplyInt(tmp4mrjcnl7.scala:",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 0 until a.toInt) {\n            result += b\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (y == 1) return x\n        if (y == -1) return -x\n        if (y < 0) return -multiplyInt(x, -y)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val n = max(x.toString.length, y.toString.length)\n            val m = n / 2\n            val a = x / pow(10, m).toLong\n            val b = x % pow(10, m).toLong\n            val c = y / pow(10, m).toLong\n            val d = y % pow(10, m).toLong\n            val ac = multiplyInt(a, c)\n            val bd = multiplyInt(b, d)\n            val adbc = multiplyInt(a + b, c + d) - ac - bd\n            (ac * pow(10, 2 * m) + adbc * pow(10, m) + bd).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.Long.toString(Long.java:490)\n\tat java.base/java.lang.Long.toString(Long.java:1416)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:11)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat Problem$.multiplyInt(tmpcy9tnybg.scala:17)\n\tat P",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val n = max(x.abs, y.abs)\n        val m = min(x.abs, y.abs)\n        val sign = if (x * y < 0) -1 else 1\n        def multiplyIntHelper(n : Long, m : Long) : Long = {\n            if (m == 1) return n\n            val half = multiplyIntHelper(n, m / 2)\n            if (m % 2 == 0) return half + half\n            else return half + half + n\n        }\n        return sign * multiplyIntHelper(n, m)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) a = -x\n        if (y < 0) b = -y\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        if (x < 0 && y < 0) result\n        else if (x < 0 || y < 0) -result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0L\n        while (a != 0) {\n            if ((a & 1) != 0) result += b\n            a >>= 1\n            b <<= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y << 1 + y << 2\n        else if (y == 6) x << 1 + x << 2\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y + y + y + y + y\n        else if (y == 10) x + x + x + x + x\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x\n        else if (x == 12) y << 2 + y << 2\n        else if (y == 12) x << 2 + x << 2\n        else if (x == 13) y + y + y + y + y + y + y + y + y + y + y +\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp25yz92r1.scala:34:69 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x == \u001b[31m13\u001b[0m) y + y + y + y + y + y + y + y + y + y + y +\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        val z = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return z + z\n        else return x + z + z\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        else if (y == 1) return x\n        else if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}