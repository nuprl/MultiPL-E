{
  "name": "mbpp_747_lcs_of_three",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        return L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for(i <- 1 to m; j <- 1 to n; k <- 1 to o) {\n            if(X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n            else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m; j <- 1 to n; k <- 1 to o) {\n            if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n            else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        return L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val n = X.length\n        val m = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](n + 1, m + 1, o + 1)\n        for (i <- 1 to n) {\n            for (j <- 1 to m) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(n)(m)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 0 to X.length) {\n            for (j <- 0 to Y.length) {\n                for (k <- 0 to Z.length) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length; val n = Y.length; val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        return L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val n = X.length\n        val m = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](n + 1, m + 1, o + 1)\n        for (i <- 1 to n) {\n            for (j <- 1 to m) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(n)(m)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && Y(j - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(L(i - 1)(j)(k), max(L(i)(j - 1)(k), L(i)(j)(k - 1)))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) dp(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(max(dp(i - 1)(j)(k), dp(i)(j - 1)(k)), dp(i)(j)(k - 1))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length; val n = Y.length; val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n            else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val L = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m) {\n            for (j <- 0 to n) {\n                for (k <- 0 to o) {\n                    if (i == 0 || j == 0 || k == 0) L(i)(j)(k) = 0\n                    else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) L(i)(j)(k) = L(i - 1)(j - 1)(k - 1) + 1\n                    else L(i)(j)(k) = max(max(L(i - 1)(j)(k), L(i)(j - 1)(k)), L(i)(j)(k - 1))\n                }\n            }\n        }\n        L(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val lcs = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 0 to m; j <- 0 to n; k <- 0 to o) {\n            if (i == 0 || j == 0 || k == 0) lcs(i)(j)(k) = 0\n            else if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) lcs(i)(j)(k) = lcs(i - 1)(j - 1)(k - 1) + 1\n            else lcs(i)(j)(k) = max(max(lcs(i - 1)(j)(k), lcs(i)(j - 1)(k)), lcs(i)(j)(k - 1))\n        }\n        lcs(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val dp = Array.ofDim[Long](X.length + 1, Y.length + 1, Z.length + 1)\n        for (i <- 1 to X.length) {\n            for (j <- 1 to Y.length) {\n                for (k <- 1 to Z.length) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = dp(i - 1)(j - 1)(k - 1) + 1\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(X.length)(Y.length)(Z.length)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509986,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        val m = X.length\n        val n = Y.length\n        val o = Z.length\n        val dp = Array.ofDim[Long](m + 1, n + 1, o + 1)\n        for (i <- 1 to m) {\n            for (j <- 1 to n) {\n                for (k <- 1 to o) {\n                    if (X(i - 1) == Y(j - 1) && X(i - 1) == Z(k - 1)) dp(i)(j)(k) = 1 + dp(i - 1)(j - 1)(k - 1)\n                    else dp(i)(j)(k) = max(dp(i - 1)(j)(k), max(dp(i)(j - 1)(k), dp(i)(j)(k - 1)))\n                }\n            }\n        }\n        dp(m)(n)(o)\n    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}