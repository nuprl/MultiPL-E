{
  "name": "mbpp_465_drop_empty",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            v match {\n                case Some(x) => dict2 += (k -> x)\n                case None =>\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx19chyf5.scala:16:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx19chyf5.scala:17:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx19chyf5.scala:17:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for((k,v) <- dict1) {\n            if(v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8cjgnkc.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8cjgnkc.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8cjgnkc.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6vuk2u9h.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6vuk2u9h.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6vuk2u9h.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.mapValues(x => x.getOrElse(\"\")).filter(x => x._2 != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5fcudfj7.scala:6:52 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.mapValues(\u001b[36mx\u001b[0m => x.getOrElse(\u001b[31m\"\"\u001b[0m)).filter(\u001b[36mx\u001b[0m => x._2 != \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5fcudfj7.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5fcudfj7.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5fcudfj7.scala:10:77 --------------------\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter { case (k,v) => v.isDefined }.mapValues(_.get)\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5mvqbuk.scala:6:60 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.filter { \u001b[33mcase\u001b[0m (k,v) => v.isDefined }.mapValues(_.get)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5mvqbuk.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5mvqbuk.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5mvqbuk.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.map(x => (x._1, x._2.getOrElse(\"\"))).filter(x => x._2 != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9urgopf.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9urgopf.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9urgopf.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.mapValues(_.getOrElse(\"\")).filter(_._2 != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsmaqfb9.scala:6:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.mapValues(_.getOrElse(\u001b[31m\"\"\u001b[0m)).filter(_._2 != \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsmaqfb9.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsmaqfb9.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsmaqfb9.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        return dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu1z1ypl.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu1z1ypl.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu1z1ypl.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for (key <- dict1.keys) {\n            if (dict1(key).isDefined) {\n                dict2 += (key -> dict1(key).get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8zi_o5nz.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8zi_o5nz.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8zi_o5nz.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        dict2.map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzo4mkl4i.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzo4mkl4i.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzo4mkl4i.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).mapValues(_.get)\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:6:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.filter(_._2.isDefined).mapValues(_.get)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mStri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2 != None).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper06n245.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper06n245.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper06n245.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(_._2.isDefined)\n        val dict3 = dict2.map(x => (x._1, x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphkmxo5b4.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphkmxo5b4.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphkmxo5b4.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).mapValues(_.get)\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:6:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.filter(_._2.isDefined).mapValues(_.get)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mStri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.flatMap(x => x._2.map(y => (x._1,y)))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9alx7cv.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9alx7cv.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd9alx7cv.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        dict2.map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3s09xv3s.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3s09xv3s.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3s09xv3s.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw5m3va86.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1, x._2.get))\n        return dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uiuu37h.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uiuu37h.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uiuu37h.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b7kexc5.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2 != None)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwlsx85p.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwlsx85p.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwlsx85p.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uxme9_3.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = new HashMap[String,String]\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2.toMap\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjcilv02j.scala:12:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        dict2.toMap\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Map[String, String]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mcollection\u001b[0m\u001b[1m\u001b[32m.\u001b[0m\u001b[1m\u001b[32mmutable\u001b[0m\u001b[1m\u001b[32m.\u001b[0mMap[String, String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjcilv02j.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjcilv02j.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjcilv02j.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_n2ro6l.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno_sax0_.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).mapValues(_.get)\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:6:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.filter(_._2.isDefined).mapValues(_.get)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeinwlxc2.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mStri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3xcdz6v4.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(_._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v9qota5.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v9qota5.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5v9qota5.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 : Map[String,String] = Map()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t3k3itz.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t3k3itz.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t3k3itz.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = for ((k,v) <- dict1 if v != None) yield (k,v.get)\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw1lv3ttl.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw1lv3ttl.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw1lv3ttl.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm5yy427.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5c5vqglp.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2 != None)\n        val dict3 = dict2.map(x => (x._1, x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbbmei64.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbbmei64.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbbmei64.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.map(x => (x._1,x._2.getOrElse(\"\")))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cba3xmx.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cba3xmx.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cba3xmx.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoxinbg8y.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}