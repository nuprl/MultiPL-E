{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    def toggleMiddleBits(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - n.toBinaryString.length))\n        val mask = (1 << (63 - n.toBinaryString.length)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << 63) - 1\n        val middleBits = n & (mask ^ (1 | lastBit))\n        val toggledMiddleBits = middleBits ^ (mask ^ (1 | lastBit))\n        toggledMiddleBits | (firstBit | lastBit)",
    "        var mask = 1L\n        var result = n\n        for (i <- 1 to 62) {\n            if ((n & mask) != 0) result &= ~mask\n            else result |= mask\n            mask <<= 1\n        }\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        var x = n\n        var i = 1\n        while (i < 63) {\n            x ^= (1L << i)\n            i += 2\n        }\n        x",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val result = binary.substring(0, 1) + binary.substring(1, binary.length - 1).map(x => if (x == '0') '1' else '0') + binary.substring(binary.length - 1, binary.length)\n        BigInt(result, 2).toLong",
    "        val binary = n.toBinaryString\n        val first = binary.head\n        val last = binary.last\n        val middle = binary.substring(1, binary.length - 1)\n        val toggled = middle.map(x => if (x == '0') '1' else '0')\n        (first + toggled + last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - firstBit))\n        val mask = (1 << (63 - firstBit)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (63 - firstBit)) | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var mask = (1L << (n.toBinaryString.length - 2)) - 1\n        return n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << 63)) >> 63\n        val mask = (1 << 63) - 1\n        val middleBits = (n & mask) >> 1\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 1) | lastBit)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '1') '0' else '1')\n        val s5 = s1 + s4 + s2\n        BigInt(s5, 2).toLong",
    "        val s = n.toBinaryString\n        val s1 = s.substring(1, s.length - 1)\n        val s2 = s1.map(x => if (x == '1') '0' else '1')\n        val s3 = s.substring(0, 1) + s2 + s.substring(s.length - 1, s.length)\n        BigInt(s3, 2).toLong",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        return m",
    "        var mask = (1L << 63) | 1\n        for (i <- 1 until 63) {\n            mask |= (1L << i)\n        }\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1).replace('0', '2').replace('1', '0').replace('2', '1')\n        (s.charAt(0) + m + s.charAt(l - 1)).toLong(2)",
    "        val s = n.toBinaryString\n        val s2 = s.substring(1, s.length - 1).map(c => if (c == '1') '0' else '1')\n        (s.head + s2 + s.last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toString.length - 2)) - 1\n        val middleBits = n & mask\n        val flippedMiddleBits = middleBits ^ mask\n        (firstBit << (n.toString.length - 1)) | flippedMiddleBits | lastBit",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = ((1L << 63) - 1) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        val s5 = s1 + s4 + s2\n        BigInt(s5, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << 63) - 1\n        val middleBits = n & (mask ^ (1 | lastBit))\n        val toggledMiddleBits = middleBits ^ (mask ^ (1 | lastBit))\n        toggledMiddleBits | (firstBit | lastBit)",
    "        val s = n.toBinaryString\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(s.length - 1, s.length)\n        val s3 = s.substring(1, s.length - 1)\n        val s4 = s3.map(x => if (x == '1') '0' else '1')\n        (s1 + s4 + s2).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.toString(2).length - 1)) - 1)\n        (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(c => if (c == '0') '1' else '0')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        BigInt(r, 2).toLong",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1)\n        val middleToggled = middle.map(c => if (c == '0') '1' else '0')\n        val result = first + middleToggled + last\n        BigInt(result, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toString.length - 1)) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n & (1 << (n.toBinaryString.length - 1))) >> (n.toBinaryString.length - 1)\n        var result = n\n        for (i <- 1 until n.toBinaryString.length - 1) {\n            val bit = (n & (1 << i)) >> i\n            if (bit == 0) result = result | (1 << i)\n            else result = result & ~(1 << i)\n        }\n        result | (firstBit << (n.toBinaryString.length - 1)) | lastBit",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val first = s.substring(0, 1)\n        val last = s.substring(l - 1, l)\n        val middle = s.substring(1, l - 1)\n        val middleToggled = middle.map(c => if (c == '1') '0' else '1')\n        (first + middleToggled + last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val str = n.toBinaryString\n        val first = str.substring(0, 1)\n        val last = str.substring(str.length - 1, str.length)\n        val middle = str.substring(1, str.length - 1).map(c => if (c == '0') '1' else '0')\n        (first + middle + last).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(c => if (c == '0') '1' else '0')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        BigInt(r, 2).toLong",
    "        val s = n.toBinaryString\n        val l = s.length\n        val t = s.substring(1, l - 1).map(x => if (x == '0') '1' else '0')\n        (s.substring(0, 1) + t + s.substring(l - 1, l)).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val b = new StringBuilder\n        b.append(s(0))\n        for (i <- 1 until l - 1) {\n            if (s(i) == '0') b.append('1')\n            else b.append('0')\n        }\n        b.append(s(l - 1))\n        b.toString.toLong(2)",
    "        val s = n.toBinaryString\n        val sb = new StringBuilder\n        sb.append(s.charAt(0))\n        for (i <- 1 until s.length - 1) {\n            if (s.charAt(i) == '1') sb.append('0')\n            else sb.append('1')\n        }\n        sb.append(s.charAt(s.length - 1))\n        return Integer.parseInt(sb.toString, 2).toLong",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val t = s.substring(1, l - 1).replaceAll(\"0\", \"2\").replaceAll(\"1\", \"0\").replaceAll(\"2\", \"1\")\n        (s.substring(0, 1) + t + s.substring(l - 1, l)).toLong(2)",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        return m",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << 63)) >> 63\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | toggledMiddleBits | lastBit)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 1\n        }\n        m",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (floor(log(n) / log(2)).toInt - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) + toggledMiddleBits + (lastBit << (floor(log(n) / log(2)).toInt - 1))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.toString(2).length - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1L << (middleBits.toBinaryString.length - 1)) - 1)\n        (firstBit << (toggledMiddleBits.toBinaryString.length + 1)) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val newS = s.substring(0, 1) + s.substring(1, s.length - 1).map(x => if (x == '0') '1' else '0') + s.substring(s.length - 1)\n        BigInt(newS, 2).toLong",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n >> 2 << 2\n        firstBit | middleBits | lastBit",
    "        val binary = n.toBinaryString\n        val first = binary.head\n        val last = binary.last\n        val middle = binary.substring(1, binary.length - 1)\n        val toggled = middle.map(c => if (c == '0') '1' else '0')\n        (first + toggled + last).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val bin = n.toBinaryString\n        val first = bin.head\n        val last = bin.last\n        val middle = bin.substring(1, bin.length - 1)\n        val newMiddle = middle.map(x => if (x == '0') '1' else '0')\n        (first + newMiddle + last).toLong(2)",
    "        var m = n >> 1\n        var result = 0L\n        while (m != 0) {\n            result = (result << 1) | 1\n            m >>= 1\n        }\n        result = (result << 1) | 1\n        result = (result << 1) | (n & 1)\n        result",
    "        val firstBit = n & 1\n        val lastBit = (n & (1 << (63))) >> 63\n        val mask = (1 << 63) - 1\n        val middleBits = (n & mask) >> 1\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1 << (63)) | 1\n        val middleBits = n & ~mask\n        val toggledMiddleBits = middleBits ^ ((1 << (63)) - 1)\n        toggledMiddleBits | firstBit | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val s2 = s.substring(1, s.length - 1).map(c => if (c == '0') '1' else '0')\n        (s.head + s2 + s.last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toString.length - 1)) | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1)\n        val middleToggled = middle.map(c => if (c == '1') '0' else '1')\n        val result = first + middleToggled + last\n        BigInt(result, 2).toLong",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1)\n        val middleToggled = middle.map(x => if (x == '0') '1' else '0')\n        val result = first + middleToggled + last\n        BigInt(result, 2).toLong",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1).map(c => if (c == '1') '0' else '1')\n        (first + middle + last).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 62) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = (l - 2) / 2\n        val a = s.substring(0, m)\n        val b = s.substring(m, l - m)\n        val c = s.substring(l - m, l)\n        val d = a + b.map(x => if (x == '0') '1' else '0') + c\n        BigInt(d, 2).toLong",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(1, l - 1).replaceAll(\"0\", \"2\").replaceAll(\"1\", \"0\").replaceAll(\"2\", \"1\")\n        val s3 = s.substring(l - 1, l)\n        (s1 + s2 + s3).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.toString(2).length - 1)) - 1)\n        (toggledMiddleBits << 2) + (lastBit << 1) + firstBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var mask = (1L << 63) - 1\n        mask = mask ^ (1L << 62)\n        mask = mask ^ (1L << 1)\n        mask = mask ^ 1\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val t = s.substring(1, s.length - 1).map(x => if (x == '0') '1' else '0')\n        (s(0) + t + s(s.length - 1)).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(x => if (x == '0') '1' else '0')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        BigInt(r, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val mask = (1 << (n.toBinaryString.length - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | toggledMiddleBits | lastBit",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(c => if (c == '0') '1' else '0')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        BigInt(r, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1).map(x => if (x == '0') '1' else '0')\n        (first + middle + last).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val m2 = m.map(x => if (x == '1') '0' else '1')\n        val s2 = s.substring(0, 1) + m2 + s.substring(l - 1, l)\n        BigInt(s2, 2).toLong",
    "        var result = n\n        for (i <- 1 until 63) {\n            val bit = (result >> i) & 1\n            if (bit == 1) result ^= (1 << i)\n        }\n        result",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1)\n        val middle = binary.substring(1, length - 1).map(x => if (x == '1') '0' else '1')\n        val result = first + middle + last\n        BigInt(result, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val toggled = n ^ mask\n        (toggled | (firstBit << 63) | (lastBit << 62)) >> 1",
    "        val s = n.toBinaryString\n        val l = s.length\n        val b = s.substring(0, 1) + s.substring(1, l - 1).replace(\"0\", \"2\").replace(\"1\", \"0\").replace(\"2\", \"1\") + s.substring(l - 1)\n        BigInt(b, 2).toLong",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(x => if (x == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        var result = n\n        var i = 1\n        while (i < 63) {\n            result ^= (1L << i)\n            i += 2\n        }\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var mask = 1L\n        var result = n\n        for (i <- 1 to 62) {\n            if ((n & mask) == 0) result |= mask\n            else result &= ~mask\n            mask <<= 1\n        }\n        result",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(x => if (x == '0') '1' else '0')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        r.toLong(2)",
    "        var m = n >> 1\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = (n >> 63) & 1\n        val lastBit = n & 1\n        val mask = (1L << 63) | 1\n        val middleBits = n & ~mask\n        val middleBitsToggled = middleBits ^ ((1L << 62) - 1)\n        (firstBit << 63) | (middleBitsToggled << 1) | lastBit",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(c => if (c == '1') '0' else '1')\n        val r = s.substring(0, 1) + t + s.substring(l - 1, l)\n        BigInt(r, 2).toLong",
    "        val binary = n.toBinaryString\n        val first = binary.head\n        val last = binary.last\n        val middle = binary.substring(1, binary.length - 1)\n        val toggled = middle.map(c => if (c == '1') '0' else '1')\n        (first + toggled + last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val len = binary.length\n        val result = binary.substring(0, 1) + binary.substring(1, len - 1).replaceAll(\"0\", \"2\").replaceAll(\"1\", \"0\").replaceAll(\"2\", \"1\") + binary.substring(len - 1, len)\n        return BigInt(result, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1L << (middleBits.bitLength - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val binary = n.toBinaryString\n        val first = binary.head\n        val last = binary.last\n        val middle = binary.substring(1, binary.length - 1)\n        val middleToggled = middle.map(c => if (c == '1') '0' else '1')\n        val result = first + middleToggled + last\n        Long.parseLong(result, 2)",
    "        val s = n.toBinaryString\n        val s1 = s.substring(1, s.length - 1)\n        val s2 = s1.replace('0', '2').replace('1', '0').replace('2', '1')\n        val s3 = s.substring(0, 1) + s2 + s.substring(s.length - 1, s.length)\n        BigInt(s3, 2).toLong",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(1, l - 1)\n        val s3 = s.substring(l - 1, l)\n        val s4 = s2.map(x => if (x == '0') '1' else '0')\n        val s5 = s1 + s4 + s3\n        s5.toLong(2)",
    "        val s = n.toBinaryString\n        val sb = new StringBuilder\n        sb.append(s.charAt(0))\n        for (i <- 1 until s.length - 1) {\n            if (s.charAt(i) == '0') sb.append('1') else sb.append('0')\n        }\n        sb.append(s.charAt(s.length - 1))\n        return Integer.parseInt(sb.toString, 2).toLong",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << (n.toBinaryString.length - 1)))\n        var result = n\n        for (i <- 1 until n.toBinaryString.length - 1) {\n            val bit = (n & (1 << i))\n            if (bit != 0) result = result & ~(1 << i)\n            else result = result | (1 << i)\n        }\n        result = result | firstBit\n        result = result | lastBit\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = (n >> 63) & 1\n        val lastBit = n & 1\n        val middleBits = (n >> 1) & ((1L << 62) - 1)\n        val toggledMiddleBits = middleBits ^ ((1L << 62) - 1)\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << 63) - 1\n        val middleBits = mask ^ (firstBit | lastBit)\n        n ^ middleBits",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val b = n.toBinaryString\n        val b1 = b.substring(1, b.length - 1)\n        val b2 = b1.map(c => if (c == '1') '0' else '1')\n        val b3 = b.substring(0, 1) + b2 + b.substring(b.length - 1, b.length)\n        BigInt(b3, 2).toLong",
    "        val length = n.toBinaryString.length\n        val mask = (1L << length) - 1\n        val mask2 = (1L << (length - 2)) - 1\n        val mask3 = mask2 << 1\n        val mask4 = mask ^ mask3\n        val result = n ^ mask4\n        result",
    "        val binaryString = n.toBinaryString\n        val firstBit = binaryString(0)\n        val lastBit = binaryString(binaryString.length - 1)\n        val middleBits = binaryString.substring(1, binaryString.length - 1)\n        val toggledMiddleBits = middleBits.map(c => if (c == '1') '0' else '1')\n        val toggledBinaryString = firstBit + toggledMiddleBits + lastBit\n        BigInt(toggledBinaryString, 2).toLong",
    "        val s = n.toBinaryString\n        val l = s.length\n        val first = s.substring(0, 1)\n        val last = s.substring(l - 1, l)\n        val middle = s.substring(1, l - 1).map(x => if (x == '0') '1' else '0')\n        (first + middle + last).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.bitLength - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '1') '0' else '1')\n        (s1 + s4 + s2).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, l - 2)\n        val s2 = s.substring(l - 2, l)\n        val s3 = s1.map(c => if (c == '0') '1' else '0')\n        (s3 + s2).toLong(2)",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = s.substring(1, l - 1)\n        val t = m.map(c => if (c == '0') '1' else '0')\n        val r = \"1\" + t + \"1\"\n        r.toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        (firstBit << 63) | (middleBitsToggled << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val result = (n ^ mask) | (firstBit << 62) | (lastBit << 63)\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (floor(log(n) / log(2)).toInt - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 1) | (firstBit << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & (mask ^ (1L << 63))\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1) | (1L << 0)\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '1') '0' else '1')\n        val s5 = s1 + s4 + s2\n        BigInt(s5, 2).toLong",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val middleBitsToggled = middleBits ^ mask\n        (firstBit << 63) + (middleBitsToggled << 2) + (lastBit << 1) + firstBit",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1 << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 1) | (firstBit << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val t = s.substring(1, s.length - 1).map(x => if (x == '0') '1' else '0')\n        (s.head + t + s.last).toLong(2)",
    "        val s = n.toBinaryString\n        val s1 = s.substring(1, s.length - 1)\n        val s2 = s1.map(x => if (x == '0') '1' else '0')\n        val s3 = s.charAt(0) + s2 + s.charAt(s.length - 1)\n        Long.parseLong(s3, 2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask"
  ]
}