{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    def toggleMiddleBits(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - n.toBinaryString.length))\n        val mask = (1 << (63 - n.toBinaryString.length)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << 63) - 1\n        val middleBits = n & (mask ^ (1 | lastBit))\n        val toggledMiddleBits = middleBits ^ (mask ^ (1 | lastBit))\n        toggledMiddleBits | (firstBit | lastBit)",
    "        var mask = 1L\n        var result = n\n        for (i <- 1 to 62) {\n            if ((n & mask) != 0) result &= ~mask\n            else result |= mask\n            mask <<= 1\n        }\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        var x = n\n        var i = 1\n        while (i < 63) {\n            x ^= (1L << i)\n            i += 2\n        }\n        x",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val s1 = s.substring(0, 1)\n        val s2 = s.substring(l - 1, l)\n        val s3 = s.substring(1, l - 1)\n        val s4 = s3.map(c => if (c == '0') '1' else '0')\n        (s1 + s4 + s2).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val result = binary.substring(0, 1) + binary.substring(1, binary.length - 1).map(x => if (x == '0') '1' else '0') + binary.substring(binary.length - 1, binary.length)\n        BigInt(result, 2).toLong",
    "        val binary = n.toBinaryString\n        val first = binary.head\n        val last = binary.last\n        val middle = binary.substring(1, binary.length - 1)\n        val toggled = middle.map(x => if (x == '0') '1' else '0')\n        (first + toggled + last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask"
  ]
}