{
  "name": "mbpp_253_count_integer",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that returns the number of integer elements in a given list.\n    def countInteger(list1 : Any) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countInteger((Any(1l, 2l, \"abc\", 1.2f))) == (2l));\n    assert(countInteger((Any(1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(countInteger((Any(1l.toLong, 1.2f.toLong, 4l.toLong, 5.1f.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case list1 : List[Int] => list1.length\n            case list1 : List[Any] => list1.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        list.filter(x => x.isInstanceOf[Int]).length",
    "        list1 match {\n            case list : List[Any] => list.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        var count = 0\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        return count",
    "        list1 match {\n            case list : List[Any] => list.count(x => x.isInstanceOf[Int])\n            case _ => 0\n        }",
    "        list1 match {\n            case list : List[Any] => list.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        list1 match {\n            case list1 : List[Int] => list1.length\n            case list1 : List[Double] => list1.length\n            case list1 : List[Long] => list1.length\n            case list1 : List[Float] => list1.length\n            case list1 : List[String] => list1.length\n            case list1 : List[Boolean] => list1.length\n            case list1 : List[Char] => list1.length\n            case list1 : List[Any] => list1.length\n            case list1 : List[AnyRef] => list1.length\n            case list1 : List[AnyVal] => list1.length\n            case list1 : List[Nothing] => list1.length\n            case list1 : List[Null] => list1.length\n            case list1 : List[Object] => list1.length\n            case list1 : List[Tuple1[Int]] => list1.length\n            case list1 : List[Tuple1[Double]] => list1.length\n            case list1 : List[Tuple1[Long]] => list1.length\n            case list1 : List[Tuple1[Float]] => list1.length\n            case list1 : List[Tuple1[String]] => list1.length\n            case list1 : List[Tuple1[Boolean]] => list1.length\n            case list1 : List[Tuple1[Char]] => list1.length\n            case list1 : List[Tuple1[Any]] => list1.length\n            case list1 : List[Tuple1[AnyRef]] => list1.length\n            case list1 : List[Tuple1[AnyVal]] => list1.length\n            case list1 : List[Tuple1[Nothing]] => list1.length\n            case list1 : List[Tuple1[Null]] => list1.length\n            case list1 : List[Tuple1[Object]] => list1.length\n            case list1 : List[Tuple2[Int, Int]] => list1.length\n            case list1 : List[Tuple2[Double, Double]] => list1.length\n            case list1 : List[Tuple2[Long, Long]]",
    "        list1 match {\n            case list1 : List[Int] => list1.length\n            case list1 : List[Any] => list1.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        var count = 0\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        return count",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case x : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        var count : Long = 0\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        return count",
    "        list1 match {\n            case list1 : List[Int] => list1.length\n            case list1 : List[Any] => list1.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        list1 match {\n            case list : List[Any] => list.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        list1 match {\n            case list : List[Any] => list.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        var count = 0\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        return count",
    "        list1 match {\n            case list : List[Any] => list.filter(_.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        list1 match {\n            case list : List[Any] => list.count(x => x.isInstanceOf[Int])\n            case _ => 0\n        }",
    "        list1 match {\n            case list1 : List[Int] => list1.length\n            case list1 : List[Any] => list1.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }",
    "        list1 match {\n            case list : List[Any] => list.filter(x => x.isInstanceOf[Int]).length\n            case _ => 0\n        }"
  ]
}