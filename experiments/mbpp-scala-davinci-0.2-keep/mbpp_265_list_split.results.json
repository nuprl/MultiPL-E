{
  "name": "mbpp_265_list_split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val N = S.asInstanceOf[List[Any]].length\n        val result = new ArrayBuffer[Any]\n        for (i <- 0 to N - 1 by step.toInt) {\n            val temp = new ArrayBuffer[Any]\n            for (j <- i to min(i + step - 1, N - 1)) {\n                temp += S.asInstanceOf[List[Any]](j)\n            }\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3l_muoim.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, N - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3l_muoim.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3l_muoim.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 until S.length by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo0kki7my.scala:7:28 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo0kki7my.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo0kki7my.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo0kki7my.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 until m) {\n            result += l.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        if (r != 0) result += l.slice(m * step.toInt, n)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6azm8nh7.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6azm8nh7.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (r != \u001b[31m0\u001b[0m) result += l.slice(m * step.toInt, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6azm8nh7.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6azm8nh7.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptja_ar8q.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptja_ar8q.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptja_ar8q.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var res = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            res = res :+ S.slice(i, i + step)\n            i += step\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yk13bok.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yk13bok.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            res = res :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                         value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yk13bok.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3yk13bok.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3yk13bok.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbc7e277.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbc7e277.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbc7e277.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = new ListBuffer[Any]\n                var i = 0\n                while (i < S.length) {\n                    result += S.slice(i, i + step)\n                    i += step\n                }\n                result.toList\n            }\n            case _ => S\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp09uuq9nl.scala:10:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp09uuq9nl.scala:11:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    result += S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp09uuq9nl.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    i += step\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp09uuq9nl.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp09uuq9nl.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((A",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = temp :: result\n                temp = List[Any]()\n            }\n            temp = x :: temp\n            i += 1\n        }\n        result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpanj4zway.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpanj4zway.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpanj4zway.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgaarkxq.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgaarkxq.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel64r2bj.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel64r2bj.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel64r2bj.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) {\n            return List(S)\n        }\n        var result = List[Any]()\n        var current = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ current\n                current = List[Any]()\n                count = 0\n            }\n            current = current :+ i\n            count += 1\n        }\n        if (current.length != 0) {\n            result = result :+ current\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpulekfax3.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpulekfax3.scala:27:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpulekfax3.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplhfi0cfg.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val subList = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                subList += list(i)\n                i += 1\n                j += 1\n            }\n            j = 0\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50o8b2rl.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50o8b2rl.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50o8b2rl.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            if (i % step == step - 1) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpah7cj5m4.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpah7cj5m4.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpah7cj5m4.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplhfi0cfg.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122475,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3wehsl9d.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3wehsl9d.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3wehsl9d.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbc7e277.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbc7e277.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbc7e277.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val len = list.length\n        val result = new ListBuffer[Any]()\n        for (i <- 0 until len by step.toInt) {\n            result += list.slice(i, min(i + step, len))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122475,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmr73vrbj.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, len))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmr73vrbj.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmr73vrbj.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val listSize = list.size\n        val n = listSize / step\n        val result = new Array[List[Any]](n.toInt)\n        for (i <- 0 until n.toInt) {\n            result(i) = list.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122474,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw16qrv4n.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw16qrv4n.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw16qrv4n.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 to S.length - 1 by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var temp = new ListBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result += temp.toList\n                temp = new ListBuffer[Any]()\n                temp += x\n                i = 1\n            } else {\n                temp += x\n                i += 1\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122474,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o0hwtv2.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o0hwtv2.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o0hwtv2.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_zdo11v3.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_zdo11v3.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_zdo11v3.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val l = S.asInstanceOf[List[Any]]\n            val l2 = new ListBuffer[Any]\n            for (i <- 0 until l.length by step.toInt) {\n                val l3 = new ListBuffer[Any]\n                for (j <- i until min(i + step, l.length)) {\n                    l3 += l(j)\n                }\n                l2 += l3.toList\n            }\n            l2.toList\n        } else {\n            val s = S.asInstanceOf[String]\n            val l2 = new ListBuffer[Any]\n            for (i <- 0 until s.length by step.toInt) {\n                val l3 = new ListBuffer[Any]\n                for (j <- i until min(i + step, s.length)) {\n                    l3 += s(j)\n                }\n                l2 += l3.toList\n            }\n            l2.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprio_36kg.scala:11:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mfor\u001b[0m (j <- i until min(i + step, l.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprio_36kg.scala:22:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mfor\u001b[0m (j <- i until min(i + step, s.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprio_36kg.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprio_36kg.scala:31:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]()\n            while (j < step && i < list.length) {\n                temp.append(list(i))\n                i += 1\n                j += 1\n            }\n            result.append(temp.toList)\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpez7xkpuw.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpez7xkpuw.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpez7xkpuw.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            val end = min(i + step, list.length)\n            result += list.slice(i, end)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122477,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4fswuixl.scala:11:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            result += list.slice(i, end)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (end : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4fswuixl.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4fswuixl.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4fswuixl.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = List[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var M = List[Any]()\n        var N = List[Any]()\n        if (S.isInstanceOf[List[Any]]) {\n            L = S.asInstanceOf[List[Any]]\n            while (i < L.length) {\n                if (k == 0) {\n                    M = List[Any]()\n                    N = List[Any]()\n                }\n                M = M :+ L(i)\n                k += 1\n                if (k == step) {\n                    N = N :+ M\n                    k = 0\n                }\n                i += 1\n            }\n            if (k != 0) N = N :+ M\n            return N\n        }\n        else {\n            L = S.toString.toList\n            while (i < L.length) {\n                if (k == 0) {\n                    M = List[Any]()\n                    N = List[Any]()\n                }\n                M = M :+ L(i)\n                k += 1\n                if (k == step) {\n                    N = N :+ M\n                    k = 0\n                }\n                i += 1\n            }\n            if (k != 0) N = N :+ M\n            return N\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l9lhj6e.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l9lhj6e.scala:50:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l9lhj6e.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val subList = new ListBuffer[Any]\n            for (j <- i to min(i + step.toInt - 1, list.length - 1)) {\n                subList += list(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp695vkxoj.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp695vkxoj.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp695vkxoj.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var list = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122472,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndgry5m2.scala:85:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndgry5m2.scala:85:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndgry5m2.scala:86:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprd302fg8.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprd302fg8.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprd302fg8.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val list = S.asInstanceOf[List[Any]]\n            val result = new ListBuffer[Any]\n            var i = 0\n            while (i < list.length) {\n                result += list.slice(i, i + step.toInt)\n                i += step.toInt\n            }\n            result.toList\n        }\n        else if (S.isInstanceOf[String]) {\n            val string = S.asInstanceOf[String]\n            val result = new ListBuffer[Any]\n            var i = 0\n            while (i < string.length) {\n                result += string.slice(i, i + step.toInt)\n                i += step.toInt\n            }\n            result.toList\n        }\n        else {\n            println(\"Invalid input\")\n            null\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaeyiacr.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaeyiacr.scala:32:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaeyiacr.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = ListBuffer[Any]()\n        while (i < S.asInstanceOf[ListBuffer[Any]].length) {\n            if (j == step) {\n                result += temp\n                temp = ListBuffer[Any]()\n                j = 0\n            }\n            temp += S.asInstanceOf[ListBuffer[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length != 0) result += temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpymd8boh0.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpymd8boh0.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpymd8boh0.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val len = list.length\n        val num = len / step\n        val result = new ArrayBuffer[Any]()\n        for (i <- 0 until num) {\n            val temp = new ArrayBuffer[Any]()\n            for (j <- 0 until step) {\n                temp += list(i * step + j)\n            }\n            result += temp.toList\n        }\n        if (len % step != 0) {\n            val temp = new ArrayBuffer[Any]()\n            for (i <- num * step until len) {\n                temp += list(i)\n            }\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122477,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2vgs02d.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (num : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2vgs02d.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2vgs02d.scala:13:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                temp += list(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2vgs02d.scala:20:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                temp += list(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    (i : Long)\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe2vgs02d.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) return S\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpighpuoma.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpighpuoma.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpighpuoma.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val temp = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                temp += list(j)\n            }\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122475,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzwmps46t.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzwmps46t.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzwmps46t.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509817,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbevkv0g1.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbevkv0g1.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_ticb19.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_ticb19.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_ticb19.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var count : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count < step) {\n                temp = temp :+ i\n                count += 1\n            } else {\n                result = result :+ temp\n                temp = List()\n                temp = temp :+ i\n                count = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i = 0\n        var temp : List[Any] = List()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = temp :: result\n                temp = List()\n            }\n            temp = x :: temp\n            i += 1\n        }\n        result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppr6pawkx.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppr6pawkx.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppr6pawkx.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ArrayBuffer[Any]\n        var i = 0\n        while (i < length) {\n            val subList = new ArrayBuffer[Any]\n            var j = 0\n            while (j < step && i < length) {\n                subList += list(i)\n                i += 1\n                j += 1\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwp73r557.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwp73r557.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwp73r557.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = Nil\n        var current : List[Any] = Nil\n        var i = 0\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (current != Nil) result = result :+ current\n                current = Nil\n            }\n            current = current :+ e\n            i += 1\n        }\n        if (current != Nil) result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2h5v3im.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2h5v3im.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2h5v3im.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = S.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var i = 0\n        while (i < L.length) {\n            var j = i + step\n            if (j > L.length) j = L.length\n            result = result :+ L.slice(i, j)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvs3pner.scala:12:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ L.slice(i, j)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvs3pner.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptvs3pner.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptvs3pner.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ArrayBuffer[Any]\n        var current = new ArrayBuffer[Any]\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result += current\n                current = new ArrayBuffer[Any]\n            }\n            current += x\n            i += 1\n        }\n        result += current\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptpuobh12.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptpuobh12.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptpuobh12.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpenefm3pr.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpenefm3pr.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpenefm3pr.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until m) {\n            val sublist = new ListBuffer[Any]\n            for (j <- 0 until step) {\n                sublist += l(i * step + j)\n            }\n            result += sublist.toList\n        }\n        if (r != 0) {\n            val sublist = new ListBuffer[Any]\n            for (i <- 0 until r) {\n                sublist += l(m * step + i)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm6tteu8.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm6tteu8.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm6tteu8.scala:14:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sublist += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm6tteu8.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcm6tteu8.scala:21:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sublist += l(m * step + i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step < 1) {\n            println(\"Step must be greater than 0\")\n            return\n        }\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        var j = 0\n        var temp = ListBuffer[Any]()\n        while (i < list.length) {\n            if (j == step) {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                j = 0\n            }\n            temp += list(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemmt7sar.scala:29:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemmt7sar.scala:29:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpemmt7sar.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp22mytnqh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[Any]()\n                var temp = List[Any]()\n                for (i <- 0 until S.length) {\n                    temp = temp :+ S(i)\n                    if (i % step == step - 1) {\n                        result = result :+ temp\n                        temp = List[Any]()\n                    }\n                }\n                if (temp.length > 0) result = result :+ temp\n                result\n            }\n            case S : String => {\n                var result = List[Any]()\n                var temp = \"\"\n                for (i <- 0 until S.length) {\n                    temp = temp + S(i)\n                    if (i % step == step - 1) {\n                        result = result :+ temp\n                        temp = \"\"\n                    }\n                }\n                if (temp.length > 0) result = result :+ temp\n                result\n            }\n            case _ => throw new Exception(\"Unsupported type\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb7c9a1d.scala:10:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmptb7c9a1d.scala:11:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb7c9a1d.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmptb7c9a1d.scala:24:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    temp = temp + S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptb7c9a1d.scala:37:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = temp :: result\n                temp = List[Any]()\n                count = 0\n            }\n            temp = x :: temp\n            count += 1\n        }\n        if (temp.length > 0) result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6bnqhldg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6bnqhldg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6bnqhldg.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplhfi0cfg.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until m) {\n            val sublist = new ListBuffer[Any]\n            for (j <- 0 until step) {\n                sublist += l(i * step + j)\n            }\n            result += sublist.toList\n        }\n        if (r != 0) {\n            val sublist = new ListBuffer[Any]\n            for (j <- 0 until r) {\n                sublist += l(m * step + j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tfg52g7.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tfg52g7.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tfg52g7.scala:14:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sublist += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tfg52g7.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5tfg52g7.scala:21:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sublist += l(m * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    Long\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val subList = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                subList += list(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6nf3er.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk6nf3er.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk6nf3er.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptja_ar8q.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptja_ar8q.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptja_ar8q.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val N = L.length\n        val M = N / step\n        val R = new Array[List[Any]](M.toInt)\n        for (i <- 0 until M.toInt) {\n            R(i) = L.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        R.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgic0bj4s.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgic0bj4s.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgic0bj4s.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgic0bj4s.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122434,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ArrayBuffer[Any]()\n        for (i <- 0 to length - 1 by step.toInt) {\n            val sublist = new ArrayBuffer[Any]()\n            for (j <- i to min(i + step.toInt - 1, length - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxmxnygj.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxmxnygj.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxmxnygj.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count < step) {\n                temp = temp :+ i\n                count += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ i\n                count = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = temp :: result\n                temp = List[Any]()\n                j = 0\n            }\n            temp = S.asInstanceOf[List[Any]].apply(i) :: temp\n            i += 1\n            j += 1\n        }\n        result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ha7kt33.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ha7kt33.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ha7kt33.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbrlsz_uy.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbrlsz_uy.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val list = S.asInstanceOf[List[Any]]\n            val result = new ListBuffer[Any]\n            var i = 0\n            var j = 0\n            while (i < list.length) {\n                if (j == 0) {\n                    result += new ListBuffer[Any]\n                }\n                result(result.length - 1).asInstanceOf[ListBuffer[Any]] += list(i)\n                i += 1\n                j = (j + 1) % step\n            }\n            result.toList\n        }\n        else {\n            val str = S.asInstanceOf[String]\n            val result = new ListBuffer[Any]\n            var i = 0\n            var j = 0\n            while (i < str.length) {\n                if (j == 0) {\n                    result += new StringBuilder\n                }\n                result(result.length - 1).asInstanceOf[StringBuilder].append(str(i))\n                i += 1\n                j = (j + 1) % step\n            }\n            result.map(x => x.asInstanceOf[StringBuilder].toString).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ylx750u.scala:17:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                j = (j + \u001b[31m1\u001b[0m) % step\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ylx750u.scala:32:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                j = (j + \u001b[31m1\u001b[0m) % step\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ylx750u.scala:38:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ylx750u.scala:38:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val l2 = new ListBuffer[Any]\n        for (i <- 0 to l.length - 1 by step.toInt) {\n            val l3 = new ListBuffer[Any]\n            for (j <- i to i + step.toInt - 1) {\n                if (j < l.length) {\n                    l3 += l(j)\n                }\n            }\n            l2 += l3.toList\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzar32tt.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzar32tt.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzar32tt.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val n = L.length\n        val m = n / step\n        val res = new Array[List[Any]](m.toInt)\n        for (i <- 0 until m.toInt) {\n            res(i) = L.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        if (n % step != 0) res(m.toInt - 1) = res(m.toInt - 1) ::: L.slice(m.toInt * step.toInt, n)\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp89swiwcy.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp89swiwcy.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp89swiwcy.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < length) {\n            val sublist = list.slice(i, min(i + step, length))\n            result += sublist\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkihzvpvg.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, length))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkihzvpvg.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkihzvpvg.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkihzvpvg.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpooqijrom.scala:11:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpooqijrom.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpooqijrom.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpooqijrom.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = ListBuffer[Any]()\n            while (j < step && i < S.length) {\n                temp += S(i)\n                j += 1\n                i += 1\n            }\n            result += temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7b1kbaqf.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7b1kbaqf.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7b1kbaqf.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7b1kbaqf.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7b1kbaqf.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var index = 0\n        var sublist = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (index == step) {\n                result += sublist.toList\n                sublist = new ListBuffer[Any]\n                index = 0\n            }\n            sublist += list(i)\n            index += 1\n        }\n        if (sublist.length > 0) result += sublist.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2dx_f8m1.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2dx_f8m1.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2dx_f8m1.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val n = list.length\n        val result = new ArrayBuffer[Any]()\n        for (i <- 0 until n by step.toInt) {\n            val temp = new ArrayBuffer[Any]()\n            for (j <- i until min(i + step, n)) {\n                temp += list(j)\n            }\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsrddl_zh.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, n)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrddl_zh.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrddl_zh.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = temp :: result\n                temp = List[Any]()\n                i = 0\n            }\n            temp = x :: temp\n            i += 1\n        }\n        if (temp != List[Any]()) result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122484,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfy3fns72.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfy3fns72.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfy3fns72.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbrlsz_uy.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbrlsz_uy.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val n = list.length\n        val result = new ListBuffer[Any]\n        for (i <- 0 to n - 1 by step.toInt) {\n            val sublist = list.slice(i, min(i + step, n))\n            result += sublist\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdpc0v7.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, n))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4zdpc0v7.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4zdpc0v7.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            if (j == step) {\n                result += list.slice(i - j, i)\n                j = 0\n            }\n            i += 1\n            j += 1\n        }\n        if (j != 0) result += list.slice(i - j, i)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzmw070g.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzmw070g.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzmw070g.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var index = 0\n        var temp = List[Any]()\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (index % step == 0 && index != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ i\n            index += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuqcnr565.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuqcnr565.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuqcnr565.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122488,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr6zz731.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr6zz731.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr6zz731.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]()\n        for (i <- 0 to S.length - 1) {\n            if (i % step == 0 && i != 0) {\n                result += temp\n                temp = new ListBuffer[Any]()\n            }\n            temp += S(i)\n        }\n        result += temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122491,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9lwjgjtx.scala:10:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9lwjgjtx.scala:15:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9lwjgjtx.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9lwjgjtx.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122488,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvji2bkr9.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvji2bkr9.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvji2bkr9.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val N = S.asInstanceOf[List[Any]].length\n        val result = new ListBuffer[Any]\n        for (i <- 0 until N by step.toInt) {\n            result += S.asInstanceOf[List[Any]].slice(i, min(i + step, N))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122492,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplj24x4n7.scala:9:61 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].slice(i, min(i + step, N))\n\u001b[31m\u001b[31m  |\u001b[0m                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Found:    Long\n\u001b[31m  |\u001b[0m                                                            Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplj24x4n7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplj24x4n7.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122490,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi81mob58.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi81mob58.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi81mob58.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0L to S.length - 1 by step) {\n            result = result :+ S.slice(i, i + step)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppk5jb_ad.scala:7:26 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0L\u001b[0m to S.length - \u001b[31m1\u001b[0m by step) {\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppk5jb_ad.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppk5jb_ad.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppk5jb_ad.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqb54kmj.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqb54kmj.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var list = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = ListBuffer[Any]()\n        while (i < S.asInstanceOf[ListBuffer[Any]].length) {\n            temp += S.asInstanceOf[ListBuffer[Any]].apply(i)\n            i += 1\n            if (i % step == 0) {\n                list += temp\n                temp = ListBuffer[Any]()\n            }\n        }\n        list += temp\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122489,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmxqjrh2_.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmxqjrh2_.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmxqjrh2_.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ x\n            i += 1\n        }\n        result = result :+ current\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = List[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var T = List[Any]()\n        var M = List[Any]()\n        var N = List[Any]()\n        var O = List[Any]()\n        var P = List[Any]()\n        var Q = List[Any]()\n        var R = List[Any]()\n        var U = List[Any]()\n        var V = List[Any]()\n        var W = List[Any]()\n        var X = List[Any]()\n        var Y = List[Any]()\n        var Z = List[Any]()\n        var AA = List[Any]()\n        var AB = List[Any]()\n        var AC = List[Any]()\n        var AD = List[Any]()\n        var AE = List[Any]()\n        var AF = List[Any]()\n        var AG = List[Any]()\n        var AH = List[Any]()\n        var AI = List[Any]()\n        var AJ = List[Any]()\n        var AK = List[Any]()\n        var AL = List[Any]()\n        var AM = List[Any]()\n        var AN = List[Any]()\n        var AO = List[Any]()\n        var AP = List[Any]()\n        var AQ = List[Any]()\n        var AR = List[Any]()\n        var AS = List[Any]()\n        var AT = List[Any]()\n        var AU = List[Any]()\n        var AV = List[Any]()\n        var AW = List[Any]()\n        var AX = List[Any]()\n        var AY = List[Any]()\n        var AZ = List[Any]()\n        var BA = List[Any]()\n        var BB = List[Any]()\n        var BC = List[Any]()\n        var BD = List[Any]()\n        var BE = List[Any]()\n        var BF = List[Any]()\n        var BG = List[Any]()\n        var BH = List[Any]()\n        var BI = List[Any]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122489,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxspsdhi.scala:61:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxspsdhi.scala:61:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxspsdhi.scala:62:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i = 0\n        var temp : List[Any] = List()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122491,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3sfjx9ab.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3sfjx9ab.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3sfjx9ab.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            if (j == 0) {\n                result += new ListBuffer[Any]\n            }\n            result(result.length - 1).asInstanceOf[ListBuffer[Any]] += list(i)\n            i += 1\n            j = (j + 1) % step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdvczly98.scala:16:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            j = (j + \u001b[31m1\u001b[0m) % step\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Long\n\u001b[31m   |\u001b[0m                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvczly98.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdvczly98.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until m) {\n            val sub = new ListBuffer[Any]\n            for (j <- 0 until step) sub += l(i * step + j)\n            result += sub.toList\n        }\n        if (r != 0) {\n            val sub = new ListBuffer[Any]\n            for (i <- 0 until r) sub += l(m * step + i)\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122497,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgm1di1l.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgm1di1l.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgm1di1l.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    Long\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgm1di1l.scala:18:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until r) sub += l(m * step + i)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgm1di1l.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until r) sub += l(m * step + i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val N = L.length\n        val M = N / step\n        val R = new Array[List[Any]](M.toInt)\n        for (i <- 0 until M.toInt) {\n            R(i) = L.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        R.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmud2cc7.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val n = length / step\n        val result = new ListBuffer[Any]\n        for (i <- 0 until n) {\n            val sublist = new ListBuffer[Any]\n            for (j <- 0 until step) {\n                sublist += list(i * step + j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpatzufnuv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpatzufnuv.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpatzufnuv.scala:13:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                sublist += list(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Long\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatzufnuv.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[Any]()\n                var i = 0\n                var temp = List[Any]()\n                for (i <- 0 to S.length - 1) {\n                    if (i % step == 0 && i != 0) {\n                        result = result :+ temp\n                        temp = List[Any]()\n                    }\n                    temp = temp :+ S(i)\n                }\n                result = result :+ temp\n                result\n            }\n            case S : Array[Any] => {\n                var result = List[Any]()\n                var i = 0\n                var temp = List[Any]()\n                for (i <- 0 to S.length - 1) {\n                    if (i % step == 0 && i != 0) {\n                        result = result :+ temp\n                        temp = List[Any]()\n                    }\n                    temp = temp :+ S(i)\n                }\n                result = result :+ temp\n                result\n            }\n            case S : String => {\n                var result = List[Any]()\n                var i = 0\n                var temp = List[Any]()\n                for (i <- 0 to S.length - 1) {\n                    if (i % step == 0 && i != 0) {\n                        result = result :+ temp\n                        temp = List[Any]()\n                    }\n                    temp = temp :+ S(i)\n                }\n                result = result :+ temp\n                result\n            }\n            case _ => {\n                println(\"Error: Input must be a list or string.\")\n                0\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2xfr3z3.scala:11:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj2xfr3z3.scala:16:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2xfr3z3.scala:25:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj2xfr3z3.scala:30:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj2xfr3z3.scala:39:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj2xfr3z3.scala:44:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplsk8o6cu.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplsk8o6cu.scala:16:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsk8o6cu.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsk8o6cu.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, min(i + step, S.length))\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, min(i + step, S.length))\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:9:58 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, min(i + step, S.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7jlownfb.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphgaarkxq.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgaarkxq.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgaarkxq.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ current\n                current = List[Any]()\n                count = 0\n            }\n            current = current :+ i\n            count += 1\n        }\n        result = result :+ current\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uxm6ex_.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uxm6ex_.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uxm6ex_.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, list.length - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bgetk6c.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, list.length - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val L = S.asInstanceOf[List[Any]]\n            if (L.length < step) {\n                List(L)\n            } else {\n                val (a, b) = L.splitAt(step.toInt)\n                List(a) ::: listSplit(b, step)\n            }\n        } else {\n            S\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp9dexjby.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                List(a) ::: listSplit(b, step)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value ::: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9dexjby.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9dexjby.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122496,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpke320rdh.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    Long\n\u001b[31m  |\u001b[0m                                            Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpke320rdh.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpke320rdh.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val N = L.length\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 to N - 1 by step.toInt) {\n            val subList = new ArrayBuffer[Any]\n            for (j <- i to min(i + step - 1, N - 1)) {\n                subList += L(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122497,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey15kv4u.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, N - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpey15kv4u.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpey15kv4u.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val res = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            res += temp.toList\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqbly_dtg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqbly_dtg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqbly_dtg.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val N = L.length\n        val M = N / step\n        val R = new Array[List[Any]](M.toInt)\n        for (i <- 0 until M.toInt) {\n            R(i) = L.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        R.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : ListBuffer[Any] = ListBuffer()\n        var temp : ListBuffer[Any] = ListBuffer()\n        var i : Long = 0\n        for (i <- 0 to S.length - 1) {\n            if (i % step == 0 && i != 0) {\n                result += temp\n                temp = ListBuffer()\n            }\n            temp += S(i)\n        }\n        result += temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122497,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp244tfx95.scala:9:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp244tfx95.scala:14:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp244tfx95.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp244tfx95.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        var res = List[Any]()\n        for (i <- 0 until m) {\n            var x = List[Any]()\n            for (j <- 0 until step) {\n                x = x :+ l(i * step + j)\n            }\n            res = res :+ x\n        }\n        if (r != 0) {\n            var x = List[Any]()\n            for (i <- 0 until r) {\n                x = x :+ l(m * step + i)\n            }\n            res = res :+ x\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122499,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheowjwb4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheowjwb4.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheowjwb4.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                x = x :+ l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheowjwb4.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheowjwb4.scala:21:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                x = x :+ l(m * step + i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122494,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprq4aofwh.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprq4aofwh.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprq4aofwh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val N = S.asInstanceOf[List[Any]].size\n        val M = N / step\n        val R = N % step\n        val L = new ListBuffer[Any]\n        for (i <- 0 until M) {\n            val l = new ListBuffer[Any]\n            for (j <- 0 until step) {\n                l += S.asInstanceOf[List[Any]]((i * step + j).toInt)\n            }\n            L += l.toList\n        }\n        if (R != 0) {\n            val l = new ListBuffer[Any]\n            for (j <- 0 until R) {\n                l += S.asInstanceOf[List[Any]]((M * step + j).toInt)\n            }\n            L += l.toList\n        }\n        L.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8z6zhp2.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until M) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (M : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8z6zhp2.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8z6zhp2.scala:19:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until R) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (R : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe8z6zhp2.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4tlufye.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        var current = new ListBuffer[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result += current.toList\n                current = new ListBuffer[Any]()\n                i = 0\n            }\n            current += x\n            i += 1\n        }\n        result += current.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122497,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp66wyxhj.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp66wyxhj.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp66wyxhj.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jvjjknx.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jvjjknx.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jvjjknx.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        var i = 0\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp += e\n                i += 1\n            } else {\n                result += temp.toList\n                temp.clear()\n                temp += e\n                i = 1\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx86ra7na.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx86ra7na.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx86ra7na.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        var i = 0\n        while (i < m) {\n            result += l.slice(i * step.toInt, (i + 1) * step.toInt)\n            i += 1\n        }\n        if (r != 0) result += l.slice(m * step.toInt, n)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnmpoeafr.scala:16:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (r != \u001b[31m0\u001b[0m) result += l.slice(m * step.toInt, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmpoeafr.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnmpoeafr.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmud2cc7.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val list3 = ListBuffer[Any]()\n            for (j <- i to i + step.toInt - 1) {\n                if (j < list.length) list3 += list(j)\n            }\n            list2 += list3.toList\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0tyc0bkp.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0tyc0bkp.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0tyc0bkp.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzvgdjij0.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzvgdjij0.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzvgdjij0.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            var result = List[Any]()\n            var temp = List[Any]()\n            for (i <- 0 until S.asInstanceOf[List[Any]].length) {\n                temp = temp ::: List(S.asInstanceOf[List[Any]](i))\n                if ((i + 1) % step == 0) {\n                    result = result ::: List(temp)\n                    temp = List[Any]()\n                }\n            }\n            if (temp.length != 0) result = result ::: List(temp)\n            return result\n        }\n        else return \"Error: Input is not a list.\"\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb0jbqajt.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb0jbqajt.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb0jbqajt.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S) {\n            if (i % step == 0 && i != 0) {\n                result = temp :: result\n                temp = List[Any]()\n            }\n            temp = x :: temp\n            i += 1\n        }\n        result = temp :: result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpru2dcmr9.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (x <- S) {\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  value foreach is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpru2dcmr9.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpru2dcmr9.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5cefkcj.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5cefkcj.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj5cefkcj.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ e\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count < step) {\n                temp = temp :+ i\n                count += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ i\n                count = 1\n            }\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9igxncal.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9igxncal.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9igxncal.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            }\n            else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61drjm62.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61drjm62.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61drjm62.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var i = 0\n        var temp = new ListBuffer[Any]\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n            }\n            temp += x\n            i += 1\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf_r1upvz.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf_r1upvz.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf_r1upvz.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmud2cc7.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            if (j == step) {\n                result += list.slice(i - j, i)\n                j = 0\n            }\n            i += 1\n            j += 1\n        }\n        if (j != 0) result += list.slice(i - j, i)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzavh8qjp.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzavh8qjp.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzavh8qjp.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var res = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            res = res :+ S.slice(i, i + step)\n            i += step\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_0krkzji.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_0krkzji.scala:10:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            res = res :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_0krkzji.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_0krkzji.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_0krkzji.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]()\n        var list = S.asInstanceOf[List[Any]]\n        while (i < list.length) {\n            temp += list(i)\n            j += 1\n            if (j == step) {\n                result += temp.toList\n                temp = new ListBuffer[Any]()\n                j = 0\n            }\n            i += 1\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfg6729c6.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfg6729c6.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfg6729c6.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplhfi0cfg.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        var result = List[List[Any]]()\n        for (i <- 0 to m - 1) {\n            var temp = List[Any]()\n            for (j <- 0 to step - 1) {\n                temp = temp :+ l(i * step + j)\n            }\n            result = result :+ temp\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw657c7w.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to m - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw657c7w.scala:12:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m to step - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw657c7w.scala:13:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                temp = temp :+ l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    Long\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfw657c7w.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ed35rxg.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ed35rxg.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        def listSplitHelper(S : Any, step : Long, acc : List[Any]) : List[Any] = {\n            if (S.isInstanceOf[List[Any]]) {\n                if (S.asInstanceOf[List[Any]].length == 0) acc\n                else {\n                    val (a, b) = S.asInstanceOf[List[Any]].splitAt(step.toInt)\n                    listSplitHelper(b, step, acc :+ a)\n                }\n            }\n            else {\n                if (S.asInstanceOf[String].length == 0) acc\n                else {\n                    val (a, b) = S.asInstanceOf[String].splitAt(step.toInt)\n                    listSplitHelper(b, step, acc :+ a)\n                }\n            }\n        }\n        listSplitHelper(S, step, List())\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pqnrs1i.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pqnrs1i.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8pqnrs1i.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnh8c14ix.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnh8c14ix.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnh8c14ix.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509817,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbevkv0g1.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbevkv0g1.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.size) {\n            var temp = List[Any]()\n            while (j < step && i < S.size) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzk0rwuhz.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.size) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value size is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzk0rwuhz.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.size) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value size is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzk0rwuhz.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0rwuhz.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0rwuhz.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4gdc6j1.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4gdc6j1.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4gdc6j1.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            if (j == step) {\n                result += list.slice(i - j, i)\n                j = 0\n            }\n            i += 1\n            j += 1\n        }\n        if (j != 0) result += list.slice(i - j, i)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmpg2iyfs.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmpg2iyfs.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmpg2iyfs.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var M = ListBuffer[Any]()\n        var N = ListBuffer[Any]()\n        var O = ListBuffer[Any]()\n        var P = ListBuffer[Any]()\n        var Q = ListBuffer[Any]()\n        var R = ListBuffer[Any]()\n        var S = ListBuffer[Any]()\n        var T = ListBuffer[Any]()\n        var U = ListBuffer[Any]()\n        var V = ListBuffer[Any]()\n        var W = ListBuffer[Any]()\n        var X = ListBuffer[Any]()\n        var Y = ListBuffer[Any]()\n        var Z = ListBuffer[Any]()\n        var a = ListBuffer[Any]()\n        var b = ListBuffer[Any]()\n        var c = ListBuffer[Any]()\n        var d = ListBuffer[Any]()\n        var e = ListBuffer[Any]()\n        var f = ListBuffer[Any]()\n        var g = ListBuffer[Any]()\n        var h = ListBuffer[Any]()\n        var ii = ListBuffer[Any]()\n        var jj = ListBuffer[Any]()\n        var kk = ListBuffer[Any]()\n        var ll = ListBuffer[Any]()\n        var mm = ListBuffer[Any]()\n        var nn = ListBuffer[Any]()\n        var oo = ListBuffer[Any]()\n        var pp = ListBuffer[Any]()\n        var qq = ListBuffer[Any]()\n        var rr = ListBuffer[Any]()\n        var ss = ListBuffer[Any]()\n        var tt = ListBuffer[Any]()\n        var uu = ListBuffer[Any]()\n        var vv = ListBuffer[Any]()\n        var ww = ListBuffer[Any]()\n        var xx = ListBuffer[Any]()\n        var yy = ListBuffer[Any]()\n        var zz = ListBuffer[Any]()\n        var aa = ListBuffer[Any]()\n        var bb = ListBuffer[Any]()\n        var cc = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpro5fsusi.scala:55:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpro5fsusi.scala:55:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpro5fsusi.scala:56:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122506,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieqcmb5d.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieqcmb5d.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieqcmb5d.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ArrayBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf515qsjp.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf515qsjp.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf515qsjp.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplhfi0cfg.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplhfi0cfg.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplhfi0cfg.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122506,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0i8o67e.scala:85:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0i8o67e.scala:85:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0i8o67e.scala:86:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2z9hhchs.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z9hhchs.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ e\n            i += 1\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk274h31q.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk274h31q.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk274h31q.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw1q6i_8i.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw1q6i_8i.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw1q6i_8i.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                result = result :+ List(x)\n            } else {\n                result = result.init :+ (result.last.asInstanceOf[List[Any]] :+ x)\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2wnix8l.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2wnix8l.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2wnix8l.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var curr = 0\n        var temp = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length) {\n            if (curr == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                curr = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            curr += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122508,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0za7bvgj.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0za7bvgj.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0za7bvgj.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqb54kmj.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqb54kmj.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            var temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ x\n            i += 1\n        }\n        result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122509,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx6eadky.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx6eadky.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx6eadky.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var temp = ListBuffer[Any]()\n        var temp2 = ListBuffer[Any]()\n        if (S.isInstanceOf[List[Any]]) {\n            temp = S.asInstanceOf[List[Any]].to[ListBuffer]\n            while (i < temp.length) {\n                temp2 = ListBuffer[Any]()\n                j = 0\n                while (j < step && i < temp.length) {\n                    temp2 += temp(i)\n                    i += 1\n                    j += 1\n                }\n                result += temp2\n            }\n        }\n        else if (S.isInstanceOf[String]) {\n            temp = S.asInstanceOf[String].toList.to[ListBuffer]\n            while (i < temp.length) {\n                temp2 = ListBuffer[Any]()\n                j = 0\n                while (j < step && i < temp.length) {\n                    temp2 += temp(i)\n                    i += 1\n                    j += 1\n                }\n                result += temp2\n            }\n        }\n        else if (S.isInstanceOf[Array[Any]]) {\n            temp = S.asInstanceOf[Array[Any]].to[ListBuffer]\n            while (i < temp.length) {\n                temp2 = ListBuffer[Any]()\n                j = 0\n                while (j < step && i < temp.length) {\n                    temp2 += temp(i)\n                    i += 1\n                    j += 1\n                }\n                result += temp2\n            }\n        }\n        else if (S.isInstanceOf[ListBuffer[Any]]) {\n            temp = S.asInstanceOf[ListBuffer[Any]]\n            while (i < temp.length) {\n                temp2 = ListBuffer[Any]()\n                j = 0\n                while (j < step && i < temp.length) {\n                    temp2 += temp(i)\n                    i += 1\n                    j += 1\n                }\n                result += temp2\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E056] Syntax Error: /tmp/tmpet5smvrb.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            temp = S.asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].to[\u001b[35mListBuffer\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing type parameter for collection.mutable.ListBuffer\n\u001b[31m\u001b[31m-- [E056] Syntax Error: /tmp/tmpet5smvrb.scala:26:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            temp = S.asInstanceOf[\u001b[35mString\u001b[0m].toList.to[\u001b[35mListBuffer\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing type parameter for collection.mutable.ListBuffer\n\u001b[31m\u001b[31m-- [E056] Syntax Error: /tmp/tmpet5smvrb.scala:39:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            temp = S.asInstanceOf[\u001b[35mArray\u001b[0m[\u001b[35mAny\u001b[0m]].to[\u001b[35mListBuffer\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing type parameter for collection.mutable.ListBuffer\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpet5smvrb.scala:67:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpet5smvrb.scala:67:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5gyi0l9.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5gyi0l9.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5gyi0l9.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            j += 1\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppss33nar.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppss33nar.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppss33nar.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            var L = S.asInstanceOf[List[Any]]\n            var result = List[Any]()\n            for (i <- 0 until L.length by step.toInt) {\n                result = result :+ L.slice(i, i + step.toInt)\n            }\n            return result\n        }\n        else if (S.isInstanceOf[String]) {\n            var L = S.asInstanceOf[String].toList\n            var result = List[Any]()\n            for (i <- 0 until L.length by step.toInt) {\n                result = result :+ L.slice(i, i + step.toInt)\n            }\n            return result\n        }\n        else {\n            return \"Error: Input must be a list or a string.\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5xv4gd_.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5xv4gd_.scala:27:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk5xv4gd_.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result : List[Any] = List()\n                var temp : List[Any] = List()\n                for (i <- 0 until S.length) {\n                    temp = temp :+ S(i)\n                    if ((i + 1) % step == 0) {\n                        result = result :+ temp\n                        temp = List()\n                    }\n                }\n                if (temp.length != 0) result = result :+ temp\n                result\n            }\n            case S : String => {\n                var result : List[Any] = List()\n                var temp : String = \"\"\n                for (i <- 0 until S.length) {\n                    temp = temp + S(i)\n                    if ((i + 1) % step == 0) {\n                        result = result :+ temp\n                        temp = \"\"\n                    }\n                }\n                if (temp.length != 0) result = result :+ temp\n                result\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9cx1spw.scala:10:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmph9cx1spw.scala:11:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9cx1spw.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmph9cx1spw.scala:24:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    temp = temp + S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9cx1spw.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step.toInt - 1, list.length - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_li0oyt.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_li0oyt.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_li0oyt.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count < step) {\n                temp = temp :+ i\n                count += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ i\n                count = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5m1iancl.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            j += 1\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0xauo1g.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0xauo1g.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0xauo1g.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 until m) {\n            result += l.slice(i * step, (i + 1) * step)\n        }\n        if (r != 0) {\n            result += l.slice(m * step, n)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpln2p_16a.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpln2p_16a.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpln2p_16a.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpln2p_16a.scala:15:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += l.slice(m * step, n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpln2p_16a.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqtfu6i6.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqtfu6i6.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfxs5uje6.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfxs5uje6.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfxs5uje6.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ListBuffer[Any]\n        for (i <- 0 to length - 1 by step.toInt) {\n            val subList = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, length - 1)) {\n                subList += list(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyaduum_.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, length - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgyaduum_.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgyaduum_.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ListBuffer[Any]\n        for (i <- 0 until m) {\n            val sub = new ListBuffer[Any]\n            for (j <- 0 until step) {\n                sub += l(i * step + j)\n            }\n            result += sub.toList\n        }\n        if (r != 0) {\n            val sub = new ListBuffer[Any]\n            for (i <- 0 until r) {\n                sub += l(m * step + i)\n            }\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqpbsqga.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqpbsqga.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqpbsqga.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqpbsqga.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqpbsqga.scala:21:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sub += l(m * step + i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp += x\n                i += 1\n            } else {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                temp += x\n                i = 1\n            }\n        }\n        if (temp.size > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mxjovc9.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mxjovc9.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mxjovc9.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ i\n            count += 1\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppq9phtwg.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppq9phtwg.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppq9phtwg.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppq9phtwg.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppq9phtwg.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until list.length by step.toInt) {\n            result.append(list.slice(i, i + step.toInt))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122513,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxwvupxfv.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxwvupxfv.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxwvupxfv.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122434,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) return List()\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp59gxcz8q.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp59gxcz8q.scala:10:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp59gxcz8q.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59gxcz8q.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59gxcz8q.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = temp :: result\n                temp = List()\n                i = 0\n            }\n            temp = x :: temp\n            i += 1\n        }\n        if (temp.length != 0) result = temp.reverse :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd5ehwmi2.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd5ehwmi2.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd5ehwmi2.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i = 0\n        var j = 0\n        var temp : List[Any] = List()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykm3uv6d.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykm3uv6d.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykm3uv6d.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvm8yllmj.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[Any]()\n                for (i <- 0 until S.length by step.toInt) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                }\n                result\n            }\n            case S : String => {\n                var result = List[Any]()\n                for (i <- 0 until S.length by step.toInt) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                }\n                result\n            }\n            case _ => {\n                println(\"Error: Input is not a list or a string.\")\n                return -1\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjc8_k3iq.scala:9:36 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjc8_k3iq.scala:10:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjc8_k3iq.scala:16:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length by step.toInt) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjc8_k3iq.scala:17:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc8_k3iq.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmud2cc7.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfmud2cc7.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ArrayBuffer[Any]()\n        var temp = new ArrayBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            temp += x\n            i += 1\n            if (i == step) {\n                result += temp.toList\n                temp.clear\n                i = 0\n            }\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgarbrpsb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgarbrpsb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgarbrpsb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i = 0\n        var temp : List[Any] = List()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (i != 0) {\n                    result = result :+ temp\n                    temp = List()\n                }\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbu9ni092.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbu9ni092.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbu9ni092.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}