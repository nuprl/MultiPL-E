{
  "name": "mbpp_96_divisor",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var divisors = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) divisors += 1\n        }\n        divisors\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl_z1d0hi.scala:17)\n\tat Problem.main(tmpl_z1d0hi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                if (i == sqrt(n).toInt) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfrk9im0k.scala:16)\n\tat Problem.main(tmpfrk9im0k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbv73ocxh.scala:17)\n\tat Problem.main(tmpbv73ocxh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbv73ocxh.scala:17)\n\tat Problem.main(tmpbv73ocxh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n                if (n / i != i) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var divisors = 0\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                divisors += 1\n            }\n        }\n        divisors * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz3kqcz1e.scala:17)\n\tat Problem.main(tmpz3kqcz1e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n                if (i != n / i) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                if (n / i == i) result += 1\n                else result += 2\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n).toLong * sqrt(n).toLong == n) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n                if (i != n / i) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) result += 1\n                else result += 2\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n) == sqrt(n).toLong) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                result += 2\n            }\n        }\n        if (sqrt(n).toLong * sqrt(n).toLong == n) result -= 1\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                result += 2\n            }\n        }\n        if (sqrt(n).toLong * sqrt(n).toLong == n) result -= 1\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n) == sqrt(n).toLong) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) result += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) result += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n                if (i != n / i) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) count += 2\n        }\n        if (sqrt(n) == sqrt(n).toLong) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n).toLong * sqrt(n).toLong == n) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var divisors = 0\n        for (i <- 1 to n.toInt) {\n            if (n % i == 0) divisors += 1\n        }\n        divisors\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1 to sqrt(n).toInt) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n                if (i != n / i) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (n / i == i) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var cnt = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) cnt += 1\n                else cnt += 2\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 1\n            }\n        }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsm7pnywj.scala:17)\n\tat Problem.main(tmpsm7pnywj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var cnt = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) cnt += 1\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n).toLong * sqrt(n).toLong == n) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n) == sqrt(n).toLong) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n            if (n % i == 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                count += 2\n            }\n        }\n        if (sqrt(n) * sqrt(n) == n) count -= 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i == n / i) count += 1\n                else count += 2\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n        var count = 0L\n        for (i <- 1L to sqrt(n).toLong) {\n            if (n % i == 0) {\n                if (i * i == n) count += 1\n                else count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}