{
  "name": "mbpp_450_extract_string",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result : List[String] = Nil\n        for (i <- str) {\n            if (i.length == l) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3vqrkncj.scala:13)\n\tat Problem.main(tmp3vqrkncj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length() == l) {\n                result = s :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqhxgtdha.scala:15)\n\tat Problem.main(tmpqhxgtdha.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length() == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        val result = new ListBuffer[String]()\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length == l) result = result :+ s\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        val result = new ListBuffer[String]\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length == l) {\n                result = result :+ s\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        val result = new ListBuffer[String]\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length() == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length() == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2cs_xrl.scala:13)\n\tat Problem.main(tmpi2cs_xrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length() == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        var result : List[String] = Nil\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpedqkvso3.scala:13)\n\tat Problem.main(tmpedqkvso3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(s => s.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.filter(x => x.length == l)\n    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
      "timestamp": 1665509716,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}