{
  "name": "mbpp_256_count_Primes_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n            while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2) == 0) return false\n                i += 6\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for (i <- 3 to n by 2) {\n            var isPrime = true\n            for (j <- 0 until primes.length) {\n                if (i % primes(j) == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        return primes.length",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count"
  ]
}