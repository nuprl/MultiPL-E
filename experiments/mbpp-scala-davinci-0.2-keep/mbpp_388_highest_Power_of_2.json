{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong",
    "        var i = 0\n        var result = 1L\n        while (result <= n) {\n            i += 1\n            result = pow(2, i).toLong\n        }\n        return pow(2, i - 1).toLong",
    "        var power = 0\n        while (pow(2, power) <= n) power += 1\n        power - 1",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        var y = 0\n        while(x > 0) {\n            x = x >> 1\n            y += 1\n        }\n        return 1 << (y - 1)",
    "        var x = n\n        while (x % 2 == 0) x /= 2\n        x",
    "        var x = n\n        while (x % 2 == 0) x /= 2\n        x",
    "        var i = 1L\n        while (i <= n) i *= 2\n        i / 2",
    "        var i = 1L\n        while(i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var p = 1L\n        while (p <= n) {\n            p = p << 1\n        }\n        p >> 1",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var x = 1L\n        while(x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        while(x % 2 == 0) x /= 2\n        x",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var x = 1L\n        while (x <= n) x *= 2\n        x / 2",
    "        var x = n\n        var i = 0\n        while (x > 1) {\n            x /= 2\n            i += 1\n        }\n        pow(2, i).toLong",
    "        var i = 1L\n        while (i <= n) i *= 2\n        i / 2",
    "        var power = 1L\n        while (power * 2 <= n) {\n            power *= 2\n        }\n        return power",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L;\n        while (i < n) {\n            i *= 2;\n        }\n        i / 2;",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var i = 0\n        var p = 1\n        while (p <= n) {\n            i += 1\n            p *= 2\n        }\n        return pow(2, i - 1).toLong",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var x = 1L\n        while (x <= n) x *= 2\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var x = n\n        while (x % 2 == 0) x /= 2\n        x",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong",
    "        var i = 1L\n        while(i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) x *= 2\n        x / 2",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var res = 1L\n        while (res <= n) {\n            res *= 2\n        }\n        res / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var i = 1L;\n        while (i <= n) {\n            i *= 2;\n        }\n        return i / 2;",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0L\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong",
    "        var result = 1L\n        while (result < n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        i",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        pow(2, i - 1).toLong",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            x >>= 1\n            i += 1\n        }\n        1L << (i - 1)",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var x = 1L\n        while (x <= n) x <<= 1\n        x >>= 1\n        return x",
    "        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        return i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var i = 0\n        while (pow(2, i) <= n) i += 1\n        pow(2, i - 1).toLong",
    "        var result = 1L\n        while (result * 2 <= n) result *= 2\n        result",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        return x / 2",
    "        var i = n\n        while (i % 2 == 0) i /= 2\n        i",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var power = 1L\n        while (power <= n) {\n            power *= 2\n        }\n        power / 2",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            i += 1\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        return i / 2",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << (i - 1)",
    "        var x = n\n        var y = 0\n        while (x % 2 == 0) {\n            x /= 2\n            y += 1\n        }\n        pow(2, y).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) {\n            x <<= 1\n        }\n        x >>= 1",
    "        var i = 1L\n        while (i < n) i *= 2\n        i / 2",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2",
    "        var power = 0\n        while (pow(2, power) <= n) {\n            power += 1\n        }\n        power - 1",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        i - 1",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        return x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i < n) {\n            i *= 2\n        }\n        return i / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result = result << 1\n            i += 1\n        }\n        result >> 1",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) x *= 2\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        return i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var result = 1L\n        while (result <= n) result *= 2\n        result / 2",
    "        var i = 0\n        var result = 0L\n        while (i <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return result / 2",
    "        var x = n\n        var i = 0\n        while (x > 1) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << i",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var res = 0L\n        while (res <= n) {\n            res = pow(2, i).toLong\n            i += 1\n        }\n        res / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var res = 1L\n        while (res <= n) {\n            res *= 2\n        }\n        res / 2",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        result / 2",
    "        var i = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var i = 0\n        while (pow(2, i) <= n) {\n            i += 1\n        }\n        return pow(2, i - 1).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i < n) i *= 2\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i * 2 <= n) i *= 2\n        i",
    "        var x = n\n        var y = 0\n        while (x > 0) {\n            x >>= 1\n            y += 1\n        }\n        return 1 << (y - 1)",
    "        var x = 1L\n        while(x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var result : Long = 1\n        while (result <= n) result *= 2\n        result / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var x = 1L\n        while (x <= n) {\n            x *= 2\n        }\n        x / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result = result << 1\n            i += 1\n        }\n        result >> 1",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        i",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return result / 2",
    "        var i = 1\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        var p = 0\n        while (x > 0) {\n            x >>= 1\n            p += 1\n        }\n        return 1 << (p - 1)",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            x = x >> 1\n            i += 1\n        }\n        return 1 << (i - 1)",
    "        var p = 1L\n        while (p <= n) p *= 2\n        p / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var power = 1L\n        while (power <= n) {\n            power *= 2\n        }\n        power / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            i += 1\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i * 2 <= n) {\n            i *= 2\n        }\n        return i",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        var y = 0\n        while (x > 0) {\n            x = x >> 1\n            y = y + 1\n        }\n        return 1 << (y - 1)",
    "        var p = 1L\n        while (p <= n) {\n            p *= 2\n        }\n        p / 2",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong",
    "        var power = 0\n        var result = 1L\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong",
    "        var i = 0\n        var result = 1\n        while (result <= n) {\n            result <<= 1\n            i += 1\n        }\n        result >>= 1\n        return result",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var i = 0\n        var result = 0\n        while (result <= n) {\n            result = pow(2, i).toLong\n            i += 1\n        }\n        return pow(2, i - 2).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var x = n\n        var count = 0\n        while (x % 2 == 0) {\n            count += 1\n            x /= 2\n        }\n        pow(2, count).toLong",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var x = 1L\n        while (x * 2 <= n) x *= 2\n        x",
    "        var power = 0\n        var result = 1\n        while (result <= n) {\n            result *= 2\n            power += 1\n        }\n        return pow(2, power - 1).toLong",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) i *= 2\n        i / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var result = 1L\n        while (result <= n) {\n            result *= 2\n        }\n        result / 2",
    "        var i = 1L\n        while (i <= n) {\n            i *= 2\n        }\n        i / 2"
  ]
}