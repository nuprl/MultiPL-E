{
  "name": "mbpp_414_overlapping",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether any value in a sequence exists in a sequence or not.\n    def overlapping(list1 : List[Long], list2 : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 4l.toLong, 5l.toLong)), (List[Long](1l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set1 = list1.toSet\n        val set2 = list2.toSet\n        set1.intersect(set2).size > 0",
    "        var result = false\n        for (i <- list1) {\n            for (j <- list2) {\n                if (i == j) {\n                    result = true\n                }\n            }\n        }\n        return result",
    "        for (i <- list1) {\n            for (j <- list2) {\n                if (i == j) return true\n            }\n        }\n        return false",
    "        list1.exists(list2.contains(_))",
    "        for (i <- list1) {\n            for (j <- list2) {\n                if (i == j) return true\n            }\n        }\n        false",
    "        list1.exists(list2.contains(_))",
    "        var result = false\n        for (i <- list1) {\n            if (list2.contains(i)) {\n                result = true\n                return result\n            }\n        }\n        return result",
    "        val set1 = list1.toSet\n        val set2 = list2.toSet\n        val intersection = set1.intersect(set2)\n        if (intersection.size > 0) true else false",
    "        var result = false\n        for (i <- list1) {\n            if (list2.contains(i)) {\n                result = true\n            }\n        }\n        return result",
    "        for (i <- list1) {\n            for (j <- list2) {\n                if (i == j) {\n                    return true\n                }\n            }\n        }\n        return false",
    "        for (i <- list1) {\n            if (list2.contains(i)) return true\n        }\n        return false",
    "        for (i <- list1) {\n            if (list2.contains(i)) return true\n        }\n        return false",
    "        val set1 = list1.toSet\n        val set2 = list2.toSet\n        set1.intersect(set2).size > 0",
    "        for (i <- list1) {\n            for (j <- list2) {\n                if (i == j) return true\n            }\n        }\n        return false",
    "        val set1 = list1.toSet\n        val set2 = list2.toSet\n        set1.intersect(set2).size > 0",
    "        for (i <- list1) {\n            if (list2.contains(i)) return true\n        }\n        return false",
    "        var result = false\n        for (i <- list1) {\n            if (list2.contains(i)) {\n                result = true\n            }\n        }\n        return result",
    "        val set1 = list1.toSet\n        val set2 = list2.toSet\n        set1.intersect(set2).size > 0",
    "        list1.exists(list2.contains(_))",
    "        val set1 = new HashSet[Long]\n        val set2 = new HashSet[Long]\n        for (i <- list1) set1 += i\n        for (i <- list2) set2 += i\n        for (i <- set1) if (set2.contains(i)) return true\n        return false"
  ]
}