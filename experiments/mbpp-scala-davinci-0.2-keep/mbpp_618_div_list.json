{
  "name": "mbpp_618_div_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to divide two lists element wise.\n    def divList(nums1 : List[Long], nums2 : List[Long]) : List[Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divList((List[Long](4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Float](4.0f.toFloat, 2.5f.toFloat, 2.0f.toFloat))));\n    assert(divList((List[Long](3l.toLong, 2l.toLong)), (List[Long](1l.toLong, 4l.toLong))).equals((List[Float](3.0f.toFloat, 0.5f.toFloat))));\n    assert(divList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Float](1.8f.toFloat, 1.7142857142857142f.toFloat))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums1.zip(nums2).map(x => x._1.toFloat / x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        (nums1 zip nums2).map(x => x._1.toFloat / x._2)",
    "        nums1.zip(nums2).map(x => x._1.toFloat / x._2.toFloat)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"Lists must be of equal length\")\n        }\n        val result = new ListBuffer[Float]()\n        for (i <- 0 until nums1.length) {\n            result += nums1(i).toFloat / nums2(i)\n        }\n        result.toList",
    "        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head.toFloat / nums2.head) :: divList(nums1.tail, nums2.tail)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        var result = List[Float]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i).toFloat / nums2(i))\n        result",
    "        var result : List[Float] = Nil\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        return result",
    "        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        return result",
    "        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1.toFloat / x._2)",
    "        if (nums1.length == 0) return List()\n        (nums1.head.toFloat / nums2.head) :: divList(nums1.tail, nums2.tail)",
    "        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head.toFloat / nums2.head) :: divList(nums1.tail, nums2.tail)",
    "        if (nums1.length != nums2.length) {\n            println(\"Error: lists must be of equal length\")\n            return List()\n        }\n        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        (nums1 zip nums2).map(x => x._1.toFloat / x._2)",
    "        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head.toFloat / nums2.head) :: divList(nums1.tail, nums2.tail)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"List lengths must be equal\")\n        }\n        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i))\n        }\n        result",
    "        var result = List[Float]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1.toFloat / x._2)",
    "        var result : List[Float] = Nil\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i).toFloat / nums2(i).toFloat)\n        }\n        return result"
  ]
}