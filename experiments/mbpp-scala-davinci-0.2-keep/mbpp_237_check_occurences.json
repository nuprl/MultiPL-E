{
  "name": "mbpp_237_check_occurences",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (occurences.contains(test_list(i))) {\n                occurences(test_list(i)) += 1\n            }\n            else {\n                occurences(test_list(i)) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var dict = Map[Long,Long]()\n        for (i <- test_list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) = result(i) + 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            }\n            else {\n                result(i) = 1\n            }\n        }\n        return result",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences",
    "        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result += (i -> 1)\n            }\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (tuple <- test_list) {\n            if (occurences.contains(tuple)) {\n                occurences(tuple) += 1\n            } else {\n                occurences(tuple) = 1\n            }\n        }\n        occurences",
    "        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences",
    "        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        val dict = Map[Long,Long]()\n        for (i <- test_list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences",
    "        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences"
  ]
}