{
  "name": "mbpp_593_removezero_ip",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length && ip(i) == '0') i += 1\n        while (i < ip.length) {\n            result += ip(i)\n            i += 1\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            result.append(num)\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIp = ipList.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        return newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (i == 0) {\n                result.append(num)\n            }\n            else {\n                result.append(\".\" + num)\n            }\n        }\n        result.toString",
    "        var ip_list = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until ip_list.length) {\n            var num = ip_list(i).toInt\n            while (num > 0) {\n                result += num % 10\n                num /= 10\n            }\n            if (i < ip_list.length - 1) result += \".\"\n        }\n        result.reverse",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                result.append(\"0\")\n            } else {\n                result.append(num)\n            }\n            if (i != 3) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.reduceLeft((x, y) => x + \".\" + y)\n        ipArray4",
    "        val iparr = ip.split(\"\\\\.\")\n        var res = \"\"\n        for (i <- 0 until iparr.length) {\n            val num = iparr(i).toInt\n            if (num == 0) {\n                res += \"0\"\n            } else {\n                res += num.toString\n                for (j <- i + 1 until iparr.length) {\n                    res += \".\" + iparr(j)\n                }\n                return res\n            }\n        }\n        return res",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        return newIp",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') {\n                sb.append(s(i).substring(1))\n            } else {\n                sb.append(s(i))\n            }\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') sb.append(s(i).substring(1))\n            else sb.append(s(i))\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                result.append(part.substring(1))\n            } else {\n                result.append(part)\n            }\n            if (i < parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val t = s(i).toInt\n            sb.append(t)\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until ips.length) {\n            val s = ips(i)\n            if (s.length > 1 && s.charAt(0) == '0') {\n                sb.append(s.substring(1))\n            } else {\n                sb.append(s)\n            }\n            if (i < ips.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val parts = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                res.append(part.substring(1))\n            } else {\n                res.append(part)\n            }\n            if (i != parts.length - 1) res.append(\".\")\n        }\n        res.toString",
    "        var result = ip\n        while (result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result",
    "        val ip_arr = ip.split(\"\\\\.\")\n        val new_ip = ip_arr.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0*\", \"\")).mkString(\".\")\n        return new_ip",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        var result = ip\n        while (result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val split = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until split.length) {\n            val num = split(i).toInt\n            result.append(num)\n            if (i != split.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            sb.append(s(i).toInt)\n            if (i < s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        var result = ip\n        while(result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = s(i).toInt\n            if (num == 0) sb.append(\"0\")\n            else sb.append(num)\n            if (i != 3) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        val ipArray5 = ipArray4.split(\"\\\\.\")\n        val ipArray6 = ipArray5.filter(x => x != \"\")\n        val ipArray7 = ipArray6.mkString(\".\")\n        return ipArray7",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val iparr = ip.split(\"\\\\.\")\n        val newip = iparr.map(x => x.toInt.toString).mkString(\".\")\n        newip",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n                if (i < s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipList = ipArray.toList\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        val ips = ip.split(\"\\\\.\")\n        val res = ips.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        res",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val ipArr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until ipArr.length) {\n            val num = ipArr(i).toInt\n            if (num == 0) {\n                if (i == 0) res.append(\"0\")\n            } else {\n                res.append(num)\n                if (i != ipArr.length - 1) res.append(\".\")\n            }\n        }\n        res.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val x = s(i).toInt\n            if (x == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(x.toString)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceAll(\"^0+\", \"\")).mkString(\".\")\n        newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = ipArray.map(x => x.toInt.toString)\n        result.mkString(\".\")",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => if (x == 0) \"\" else x.toString)\n        iparr3.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val res = for (part <- parts) yield {\n            val num = part.toInt\n            if (num == 0) \"0\" else num.toString\n        }\n        res.mkString(\".\")",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to s.length - 1) {\n            sb.append(s(i).toInt)\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"0\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            result.append(parts(i).toInt.toString)\n            if (i != parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                result.append(part.substring(1))\n            } else {\n                result.append(part)\n            }\n            if (i < parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val parts = ip.split(\"\\\\.\")\n        val newParts = parts.map(x => x.toInt.toString)\n        newParts.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            if (ipArray(i).length() > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != 3) result.append(\".\")\n        }\n        result.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt.toString)\n        iparr2.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4.replaceAll(\"^\\\\.+\", \"\")",
    "        val iparr = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to 3) {\n            var num = iparr(i).toInt\n            while (num > 0) {\n                result += num % 10\n                num /= 10\n            }\n            result += \".\"\n        }\n        result.substring(0, result.length - 1)",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipList4.mkString(\".\")",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = s(i).toInt\n            sb.append(num)\n            if (i != 3) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5",
    "        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val s = ips(i)\n            var j = 0\n            while (j < s.length && s(j) == '0') j += 1\n            sb.append(s.substring(j))\n            if (i < 3) sb.append(\".\")\n        }\n        sb.toString",
    "        var result = \"\"\n        var count = 0\n        for (i <- 0 until ip.length) {\n            if (ip(i) == '0' && ip(i + 1) == '0') {\n                count += 1\n            } else {\n                result += ip(i)\n            }\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        ipArray.map(x => x.toInt).mkString(\".\")",
    "        val ipArr = ip.split(\"\\\\.\")\n        val res = ipArr.map(x => x.toInt.toString)\n        res.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                newIp.append(ipArray(i).substring(1))\n            } else {\n                newIp.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) {\n                newIp.append(\".\")\n            }\n        }\n        newIp.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = for (i <- ipArray) yield i.toInt\n        val ipArray3 = for (i <- ipArray2) yield i.toString\n        val ipArray4 = for (i <- ipArray3) yield if (i.length == 1) \"00\" + i else if (i.length == 2) \"0\" + i else i\n        val ipArray5 = for (i <- ipArray4) yield i.substring(i.length - 3, i.length)\n        ipArray5.mkString(\".\")",
    "        val iparr = ip.split(\"\\\\.\")\n        val newiparr = iparr.map(x => x.toInt.toString)\n        newiparr.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(_.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val tokens = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            var token = tokens(i)\n            while (token.length > 1 && token.startsWith(\"0\")) token = token.substring(1)\n            result.append(token)\n            if (i != 3) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.filter(x => x != \"\")\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                result.append(part.substring(1))\n            } else {\n                result.append(part)\n            }\n            if (i < 3) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(num)\n                else result.append(\".0\")\n            } else {\n                result.append(\".\" + num)\n            }\n        }\n        result.toString.substring(1)",
    "        ip.split(\"\\\\.\").map(x => x.toInt.toString).mkString(\".\")",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => if (x.length == 1) \"00\" + x else if (x.length == 2) \"0\" + x else x)\n        val ipList5 = ipList4.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList6 = ipList5.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList7 = ipList6.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList8 = ipList7.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList9 = ipList8.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList10 = ipList9.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList11 = ipList10.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList12 = ipList11.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList13 = ipList12.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList14 = ipList13.map(x => if (x.charAt(0) == '0') x.substring(1) else x)\n        val ipList15 = ipList14.map(x => if (x.charAt(0) == '0') x.substring(1) else",
    "        ip.split(\"\\\\.\").map(x => x.toInt).map(x => x.toString).mkString(\".\")",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        return ipArray4",
    "        val parts = ip.split(\"\\\\.\")\n        val res = parts.map(x => x.toInt.toString).mkString(\".\")\n        return res",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => if (x.length == 1) \"00\" + x else if (x.length == 2) \"0\" + x else x)\n        val ipList5 = ipList4.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList6 = ipList5.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList7 = ipList6.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList8 = ipList7.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList9 = ipList8.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList10 = ipList9.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList11 = ipList10.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList12 = ipList11.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList13 = ipList12.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList14 = ipList13.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList15 = ipList14.map(x => if (x.startsWith(\"0\")) x.substring(1) else x)\n        val ipList16 = ipList15.map(x => if (x.startsWith(\"0\")) x.substring(1",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (i != 0) sb.append(\".\")\n            sb.append(num)\n        }\n        sb.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        iparr.map(x => x.toInt).mkString(\".\")",
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '.') {\n                result += ip(i)\n                i += 1\n            }\n            else if (ip(i) == '0') {\n                i += 1\n            }\n            else {\n                result += ip.substring(i)\n                return result\n            }\n        }\n        result",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5",
    "        val split = ip.split(\"\\\\.\")\n        val res = split.map(x => x.toInt.toString).mkString(\".\")\n        res",
    "        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to ipArray.length - 1) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result += ipArray(i).substring(1)\n            } else {\n                result += ipArray(i)\n            }\n            if (i < ipArray.length - 1) result += \".\"\n        }\n        result",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to s.length - 1) {\n            val n = s(i).toInt\n            if (n == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i < s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0') {\n                i += 1\n                while (i < ip.length && ip(i) == '0') i += 1\n                if (i < ip.length) result += \".\"\n            } else {\n                result += ip(i)\n                i += 1\n            }\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt.toString)\n        newIp.mkString(\".\")",
    "        val arr = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until arr.length) {\n            val s = arr(i)\n            var j = 0\n            while (j < s.length && s(j) == '0') j += 1\n            if (j == s.length) sb.append(\"0\")\n            else sb.append(s.substring(j))\n            if (i != arr.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) {\n                    result.append(\"0\")\n                }\n            } else {\n                result.append(num)\n                if (i != ipArray.length - 1) {\n                    result.append(\".\")\n                }\n            }\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val newParts = parts.map(x => x.toInt.toString)\n        newParts.mkString(\".\")",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder()\n        for (i <- 0 until parts.length) {\n            var part = parts(i)\n            while (part.length > 1 && part.charAt(0) == '0') part = part.substring(1)\n            result.append(part)\n            if (i < parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0*\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                if (sb.length > 0) sb.append(\".\")\n            }\n            else sb.append(n)\n        }\n        sb.toString",
    "        val split = ip.split(\"\\\\.\")\n        val res = split.map(x => if (x.length > 1 && x.charAt(0) == '0') x.substring(1) else x)\n        res.mkString(\".\")",
    "        val ipArr = ip.split(\"\\\\.\")\n        ipArr.map(x => x.toInt).map(x => x.toString).mkString(\".\")",
    "        val arr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until arr.length) {\n            var num = arr(i).toInt\n            while (num > 0) {\n                res.append(num % 10)\n                num /= 10\n            }\n            if (i != arr.length - 1) res.append(\".\")\n        }\n        res.reverse.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            result.append(num)\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4",
    "        val iparr = ip.split(\"\\\\.\")\n        val newip = iparr.map(x => x.toInt.toString).mkString(\".\")\n        return newip",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val arr = ip.split(\"\\\\.\").map(_.toInt)\n        val res = arr.map(x => x.toString).mkString(\".\")\n        res",
    "        val parts = ip.split('.')\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                result.append(part.substring(1))\n            } else {\n                result.append(part)\n            }\n            if (i < parts.length - 1) result.append('.')\n        }\n        result.toString",
    "        val split = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until split.length) {\n            val num = split(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(\"0\")\n                else result.append(\".0\")\n            }\n            else result.append(\".\" + num)\n        }\n        result.toString.substring(1)",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5",
    "        val split = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until split.length) {\n            if (split(i).length > 1 && split(i).charAt(0) == '0') {\n                res.append(split(i).substring(1))\n            } else {\n                res.append(split(i))\n            }\n            if (i != split.length - 1) res.append(\".\")\n        }\n        res.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until iparr.length) {\n            val num = iparr(i).toInt\n            if (num == 0) {\n                if (i == 0) res.append(\"0\")\n                else res.append(\".0\")\n            }\n            else res.append(\".\" + num)\n        }\n        res.toString.substring(1)",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            if (parts(i).length > 1 && parts(i).charAt(0) == '0') {\n                result.append(parts(i).substring(1))\n            } else {\n                result.append(parts(i))\n            }\n            if (i != parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayBuffer = ArrayBuffer[String]()\n        for (i <- 0 to 3) {\n            ipArrayBuffer += ipArray(i).toInt.toString\n        }\n        ipArrayBuffer.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(\"0\")\n                else result.append(\".\")\n            }\n            else {\n                result.append(num)\n                if (i != ipArray.length - 1) result.append(\".\")\n            }\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4",
    "        val arr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until arr.length) {\n            if (arr(i).length > 1 && arr(i).charAt(0) == '0') {\n                res.append(arr(i).substring(1))\n            } else {\n                res.append(arr(i))\n            }\n            if (i != arr.length - 1) res.append(\".\")\n        }\n        res.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.filter(x => x != \"\")\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) 0 else x)\n        val ipArray4 = ipArray3.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray5 = ipArray4.map(x => if (x == \"\") \"0\" else x)\n        val ipArray6 = ipArray5.mkString(\".\")\n        ipArray6",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) sb.append(\"0\")\n            else {\n                sb.append(num)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        return newIp",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt.toString)\n        val ipArr3 = ipArr2.map(x => x.toInt.toString)\n        ipArr3.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.toInt)\n        val ipArray5 = ipArray4.map(x => x.toString)\n        val ipArray6 = ipArray5.map(x => x.toInt)\n        val ipArray7 = ipArray6.map(x => x.toString)\n        val ipArray8 = ipArray7.map(x => x.toInt)\n        val ipArray9 = ipArray8.map(x => x.toString)\n        val ipArray10 = ipArray9.map(x => x.toInt)\n        val ipArray11 = ipArray10.map(x => x.toString)\n        val ipArray12 = ipArray11.map(x => x.toInt)\n        val ipArray13 = ipArray12.map(x => x.toString)\n        val ipArray14 = ipArray13.map(x => x.toInt)\n        val ipArray15 = ipArray14.map(x => x.toString)\n        val ipArray16 = ipArray15.map(x => x.toInt)\n        val ipArray17 = ipArray16.map(x => x.toString)\n        val ipArray18 = ipArray17.map(x => x.toInt)\n        val ipArray19 = ipArray18.map(x => x.toString)\n        val ipArray20 = ipArray19.map(x => x.toInt)\n        val ipArray21 = ipArray20.map(x => x.toString)\n        val ipArray22 = ipArray21.map(x => x.toInt)\n        val ipArray23 = ipArray22.map(x => x.toString)\n        val ipArray24 = ipArray23.map(x => x.toInt)\n        val ipArray25 = ipArray24.map(x => x.toString)\n        val ipArray26 = ipArray25.map(x => x.toInt)\n",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val result = parts.map(x => x.toInt.toString).mkString(\".\")\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.map(x => if (x.length == 1) \"00\" + x else if (x.length == 2) \"0\" + x else x)\n        val ipArray5 = ipArray4.map(x => if (x == \"\") \"0\" else x)\n        val ipArray6 = ipArray5.mkString(\".\")\n        ipArray6",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to 3) {\n            var temp = ipArray(i)\n            while (temp.startsWith(\"0\")) {\n                temp = temp.substring(1)\n            }\n            result += temp\n            if (i != 3) result += \".\"\n        }\n        result",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) sb.append(\"0\")\n            else sb.append(n)\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        val newiparr = iparr.map(x => x.toInt.toString)\n        newiparr.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")",
    "        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => if (x == 0) \"0\" else x.toString)\n        val ipArr4 = ipArr3.mkString(\".\")\n        ipArr4",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) {\n                    result.append(num)\n                }\n            } else {\n                result.append(num)\n                if (i != ipArray.length - 1) {\n                    result.append(\".\")\n                }\n            }\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new ArrayBuffer[String]()\n        for (i <- 0 to 3) {\n            val s = ipArray(i)\n            if (s.length() > 1 && s.charAt(0) == '0') {\n                result += s.substring(1)\n            } else {\n                result += s\n            }\n        }\n        result.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.filter(x => x != \"\")\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => if (x == 0) \"\" else x.toString)\n        val iparr4 = iparr3.filter(x => x != \"\")\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(num)\n            } else {\n                result.append(num)\n                if (i != ipArray.length - 1) result.append(\".\")\n            }\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) 0 else x)\n        val ipArray4 = ipArray3.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray5 = ipArray4.reduceLeft((x, y) => x + \".\" + y)\n        return ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val s = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to 3) {\n            var temp = s(i)\n            while (temp.length > 1 && temp.charAt(0) == '0') temp = temp.substring(1)\n            result += temp\n            if (i != 3) result += \".\"\n        }\n        result",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt.toString)\n        ipList2.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            val zeroes = part.takeWhile(c => c == '0')\n            val nonzeroes = part.drop(zeroes.length)\n            result.append(nonzeroes)\n            if (i != parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until iparr.length) {\n            result += iparr(i).toInt.toString\n            if (i != iparr.length - 1) result += \".\"\n        }\n        result",
    "        val iparr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until iparr.length) {\n            if (iparr(i).length > 1 && iparr(i).charAt(0) == '0') {\n                res.append(iparr(i).substring(1))\n            } else {\n                res.append(iparr(i))\n            }\n            if (i != iparr.length - 1) res.append(\".\")\n        }\n        res.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) res.append(\"0\")\n            } else {\n                res.append(num)\n                if (i != ipArray.length - 1) res.append(\".\")\n            }\n        }\n        res.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0') {\n                var j = i\n                while (j < ip.length && ip(j) == '0') {\n                    j += 1\n                }\n                if (j == ip.length || ip(j) == '.') {\n                    i = j\n                } else {\n                    result += ip(i)\n                    i += 1\n                }\n            } else {\n                result += ip(i)\n                i += 1\n            }\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                if (sb.length > 0) sb.append(\".\")\n            } else {\n                sb.append(n)\n                if (i < s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.map(x => if (x.length == 1) \"00\" + x else if (x.length == 2) \"0\" + x else x)\n        val ipArray5 = ipArray4.map(x => if (x.length == 0) \"0\" else x)\n        val ipArray6 = ipArray5.mkString(\".\")\n        return ipArray6",
    "        val ip_arr = ip.split(\"\\\\.\")\n        val ip_arr_no_zero = ip_arr.map(x => x.toInt.toString)\n        ip_arr_no_zero.mkString(\".\")",
    "        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        return ipArr5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        val ipArray5 = ipArray4.replaceAll(\"^\\\\.+\", \"\")\n        val ipArray6 = ipArray5.replaceAll(\"\\\\.+$\", \"\")\n        return ipArray6",
    "        val iparr = ip.split(\"\\\\.\")\n        val newiparr = iparr.map(x => x.toInt)\n        val newip = newiparr.map(x => x.toString).mkString(\".\")\n        return newip",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5",
    "        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newIp",
    "        var result = ip\n        while (result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result",
    "        val ips = ip.split(\"\\\\.\")\n        val newIps = ips.map(x => x.toInt.toString)\n        newIps.mkString(\".\")",
    "        var result = ip\n        while (result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result",
    "        val parts = ip.split(\"\\\\.\")\n        val newParts = parts.map(x => x.toInt.toString)\n        newParts.mkString(\".\")"
  ]
}