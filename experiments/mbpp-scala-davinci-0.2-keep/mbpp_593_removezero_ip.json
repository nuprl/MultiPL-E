{
  "name": "mbpp_593_removezero_ip",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length && ip(i) == '0') i += 1\n        while (i < ip.length) {\n            result += ip(i)\n            i += 1\n        }\n        result",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            result.append(num)\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIp = ipList.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        return newIp",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (i == 0) {\n                result.append(num)\n            }\n            else {\n                result.append(\".\" + num)\n            }\n        }\n        result.toString",
    "        var ip_list = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until ip_list.length) {\n            var num = ip_list(i).toInt\n            while (num > 0) {\n                result += num % 10\n                num /= 10\n            }\n            if (i < ip_list.length - 1) result += \".\"\n        }\n        result.reverse",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                result.append(\"0\")\n            } else {\n                result.append(num)\n            }\n            if (i != 3) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.reduceLeft((x, y) => x + \".\" + y)\n        ipArray4",
    "        val iparr = ip.split(\"\\\\.\")\n        var res = \"\"\n        for (i <- 0 until iparr.length) {\n            val num = iparr(i).toInt\n            if (num == 0) {\n                res += \"0\"\n            } else {\n                res += num.toString\n                for (j <- i + 1 until iparr.length) {\n                    res += \".\" + iparr(j)\n                }\n                return res\n            }\n        }\n        return res",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        return newIp",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') {\n                sb.append(s(i).substring(1))\n            } else {\n                sb.append(s(i))\n            }\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') sb.append(s(i).substring(1))\n            else sb.append(s(i))\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                result.append(part.substring(1))\n            } else {\n                result.append(part)\n            }\n            if (i < parts.length - 1) result.append(\".\")\n        }\n        result.toString",
    "        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val t = s(i).toInt\n            sb.append(t)\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until ips.length) {\n            val s = ips(i)\n            if (s.length > 1 && s.charAt(0) == '0') {\n                sb.append(s.substring(1))\n            } else {\n                sb.append(s)\n            }\n            if (i < ips.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")"
  ]
}