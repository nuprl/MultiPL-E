{
  "name": "mbpp_754_extract_index_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val result = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result : List[Long] = Nil\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\" else l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        val l1l2l3List = l1l2l3.toList\n        val l1l2l3ListSorted = l1l2l3List.sorted\n        val l1l2l3ListSortedIndex = l1l2l3ListSorted.map(l1.indexOf(_))\n        l1l2l3ListSortedIndex",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.length == 0) \"No common elements\" else l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        val list = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list",
    "        val list = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3)\n        if (l.length == 0) \"No common elements\"\n        else l.map(x => x._1)",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val result = new ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.length == 0) \"No common elements\" else l",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\" else l",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) result = result :+ l1(index)\n            index += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3f = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._2 == x._2)\n        l1l2l3f.map(x => x._1._1)",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1).map(x => x._1).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val minLength = min(min(l1.length, l2.length), l3.length)\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        val l1l2l3List = l1l2l3.toList\n        val l1l2l3ListSorted = l1l2l3List.sorted\n        l1l2l3ListSorted",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        if (l1.length != l2.length || l1.length != l3.length) {\n            return \"Lists are not of the same length\"\n        }\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        return l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l : List[Long] = List()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var indexList = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) indexList = indexList :+ l1(i)\n        }\n        indexList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val result = ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to min(l1.length, min(l2.length, l3.length)) - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l2(i) == l3(i)) l = l :+ l2(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result.reverse",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ArrayBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result",
    "        val minLength = min(min(l1.length, l2.length), l3.length)\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l1_length = l1.length\n        val l2_length = l2.length\n        val l3_length = l3.length\n        val min_length = min(min(l1_length, l2_length), l3_length)\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min_length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1_set = l1.toSet\n        val l2_set = l2.toSet\n        val l3_set = l3.toSet\n        val l1_l2_intersection = l1_set.intersect(l2_set)\n        val l1_l2_l3_intersection = l1_l2_intersection.intersect(l3_set)\n        l1_l2_l3_intersection.toList",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result",
    "        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3_filtered = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1l2l3_filtered.map(x => x._1._1)",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        var index = 0\n        while (index < l1.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val common = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList",
    "        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.isEmpty) \"No common elements\" else l",
    "        val l = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1_l2 = l1.zip(l2)\n        val l1_l2_l3 = l1_l2.zip(l3)\n        val l1_l2_l3_filtered = l1_l2_l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1_l2_l3_filtered.map(x => x._1._1)",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val common = new ListBuffer[Long]\n        val minSize = min(l1.size, min(l2.size, l3.size))\n        for (i <- 0 until minSize) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                common += l1(i)\n            }\n        }\n        common.toList",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = l1(i) :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val minLength = min(min(l1.length, l2.length), l3.length)\n        var result = List[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result"
  ]
}