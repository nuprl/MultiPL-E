{
  "name": "mbpp_598_armstrong_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var digits = number.toString.toList.map(_.toString.toInt)\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var temp = number\n        while (temp > 0) {\n            digits += (temp % 10).toInt\n            temp /= 10\n        }\n        var sum = 0\n        for (d <- digits) {\n            sum += pow(d, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n != 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            val digit = n % 10\n            sum += digit * digit * digit\n            n /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.toString.toInt).toList\n        val len = digits.length\n        val sum = digits.map(x => pow(x, len)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var num = number\n        while (num > 0) {\n            val digit = num % 10\n            sum += digit * digit * digit\n            num /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number"
  ]
}