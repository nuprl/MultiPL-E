{
  "name": "mbpp_598_armstrong_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.toList.map(_.toString.toInt)\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var temp = number\n        while (temp > 0) {\n            digits += (temp % 10).toInt\n            temp /= 10\n        }\n        var sum = 0\n        for (d <- digits) {\n            sum += pow(d, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n != 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            val digit = n % 10\n            sum += digit * digit * digit\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.toString.toInt).toList\n        val len = digits.length\n        val sum = digits.map(x => pow(x, len)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var num = number\n        while (num > 0) {\n            val digit = num % 10\n            sum += digit * digit * digit\n            num /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(x => pow(x, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.toString.toInt)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        val sum = digits.map(pow(_, len)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var temp = number\n        var sum = 0\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toInt\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.size)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n != 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var sum = 0\n        while (n > 0) {\n            sum += pow(n % 10, 3).toInt\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.toString.toInt)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = List[Int]()\n        var n = number\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var num = number\n        while (num > 0) {\n            digits += (num % 10).toInt\n            num /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var temp = number\n        while (temp > 0) {\n            digits += (temp % 10).toInt\n            temp /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = ListBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) sum += pow(digit, digits.length).toInt\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var num = number\n        while (num > 0) {\n            sum += pow(num % 10, 3).toLong\n            num /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var num = number\n        var sum = 0\n        var digits = 0\n        while (num > 0) {\n            digits += 1\n            num /= 10\n        }\n        num = number\n        while (num > 0) {\n            sum += pow(num % 10, digits).toLong\n            num /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe83rerus.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += pow(num % \u001b[31m10\u001b[0m, digits).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = 0\n        while (n > 0) {\n            digits += 1\n            n /= 10\n        }\n        var sum = 0L\n        n = number\n        while (n > 0) {\n            sum += pow(n % 10, digits).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val n = digits.length\n        val sum = digits.map(pow(_, n)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var temp = number\n        var sum = 0\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toInt\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            val digit = n % 10\n            sum += digit * digit * digit\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var temp = number\n        var sum = 0\n        var n = 0\n        while (temp > 0) {\n            n += 1\n            temp /= 10\n        }\n        temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, n).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplrvz3z4g.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += pow(temp % \u001b[31m10\u001b[0m, n).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.size)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(x => x.asDigit).toList\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn8iohkbf.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += pow(digits(i), digits.length).toLong\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        if (sum == number) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while(temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val length = digits.length\n        digits.map(pow(_, length)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        digits.map(x => pow(x, len)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- digits) {\n            sum += pow(i, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var num = number\n        while (num > 0) {\n            sum += pow(num % 10, 3).toLong\n            num /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.toString.toInt).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzknxdk7.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += pow(digit, digits.length).toLong\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var numberCopy = number\n        while (numberCopy > 0) {\n            sum += pow(numberCopy % 10, 3).toLong\n            numberCopy /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzknxdk7.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += pow(digit, digits.length).toLong\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.foldLeft(0)((sum, digit) => sum + pow(digit, digits.length).toInt)\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzknxdk7.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += pow(digit, digits.length).toLong\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        val sum = digits.map(x => pow(x, digits.length).toLong).sum\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzknxdk7.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            sum += pow(digit, digits.length).toLong\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = List[Long]()\n        var n = number\n        while (n > 0) {\n            digits = (n % 10) :: digits\n            n /= 10\n        }\n        var sum = 0L\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.toString.toInt)\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toInt\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit)\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        digits.map(pow(_, length)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.size\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.toString.toInt).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var num = number\n        var digits = ListBuffer[Int]()\n        while (num > 0) {\n            digits += (num % 10).toInt\n            num /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, number.toString.length).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            val digit = temp % 10\n            sum += digit * digit * digit\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(c => c.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(d => pow(d, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var num = number\n        while (num > 0) {\n            val digit = num % 10\n            sum += digit * digit * digit\n            num /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        if (sum == number) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        number == sum\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = List[Int]()\n        var temp = number\n        while (temp > 0) {\n            digits = digits :+ (temp % 10).toInt\n            temp /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        if (sum == number) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        val sum = digits.map(pow(_, len)).sum\n        return number == sum\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val n = digits.length\n        digits.map(pow(_, n)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toInt\n        }\n        if (sum == number) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toInt\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        digits.map(pow(_, len)).sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        return number == sum\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var n = number\n        var sum = 0\n        while (n != 0) {\n            sum += pow(n % 10, 3).toInt\n            n /= 10\n        }\n        return sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number\n    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}